/*********************************************************
 * Example
 *****************************************************/

#include <stdio.h>
#include <math.h>
#include <stdbool.h>
#include <system.h>
#include <sys/alt_irq.h>
#include <altera_avalon_timer_regs.h>
#include <altera_avalon_pio_regs.h>

// Function Declaration
void init_timer_interrupt( void );
static void timer_isr( void * context, alt_u32 id );
void init_segment_counter(void);
bool check_prime(int number, int array[], int array_count);
int count = 0;
int countdown = 0;


int main( void )
{
	printf("Hello from NIOS II!\n");
	printf("This is an interrupt example\n");

	// Enable the timer
	init_timer_interrupt();
	init_segment_counter();

	while(1){

	}

	return 0;
}

void init_timer_interrupt( void )
{
	// Register the ISR with HAL
	alt_ic_isr_register(TIMER_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_IRQ, (void *)timer_isr, NULL, 0x0);

	// Start the timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE,
			ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
			ALTERA_AVALON_TIMER_CONTROL_START_MSK |
			ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
}

static void timer_isr(void * context, alt_u32 id) {
	static int count = 0;
	static int countdown = 0;
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);

	count++;
	if(countown < 0) {
		if(count == 1000) {
			countdown--;
			count = 0;
			IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_0_BASE,numbers[countdown]);
		}
	}


}

void init_segment_counter(void) {
	int primes[10000] = {2,3};
	int primes_r[10000] = {2,3};
	int counter = 5;
	int array_count = 2;
	int numbers[] = {
			0b1000000,
			0b1111001,
			0b0100100,
			0b0110000,
			0b0011001,
			0b0010010,
			0b0000010,
			0b1111000,
			0b0000000,
			0b0010000
	};

	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_0_BASE,numbers[0]);
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_1_BASE,numbers[0]);
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_2_BASE,numbers[0]);
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_3_BASE,numbers[0]);
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_4_BASE,numbers[0]);
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_5_BASE,numbers[0]);

	int curr_num = counter;

	while(1){
		if(check_prime(counter, primes, array_count)) {
			curr_num = counter;
			printf("\n%d", curr_num);
			primes[array_count] = curr_num;
			array_count++;
			int nDigits = floor(log10(counter)) + 1;

			int digit = curr_num % 10;
			curr_num /= 10;
			IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_0_BASE,numbers[digit]);

			if(nDigits > 0) {
				digit = curr_num % 10;
				curr_num /= 10;
				IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_1_BASE,numbers[digit]);
			}

			if(nDigits > 1) {
				digit = curr_num % 10;
				curr_num /= 10;
				IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_2_BASE,numbers[digit]);
			}

			if(nDigits > 2) {
				digit = curr_num % 10;
				curr_num /= 10;
				IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_3_BASE,numbers[digit]);
			}

			if(nDigits > 3) {
				digit = curr_num % 10;
				curr_num /= 10;
				IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_4_BASE,numbers[digit]);
			}

			if(nDigits > 4) {
				digit = curr_num % 10;
				curr_num /= 10;
				IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_5_BASE,numbers[digit]);
			}
		}

		counter += 2;

		if (array_count >= 4294967294) {
			counter = 5;
			array_count = 2;
			*primes = *primes_r;
		}
	}
}

bool check_prime(int number, int array[], int array_count) {
	for(int i = 0; i < array_count; i++) {
		if(number % array[i] == 0) {
			return false;
		}
	}

	return true;
}
