
t.elf:     file format elf32-littlenios2
t.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000000

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000720 memsz 0x00000720 flags r-x
    LOAD off    0x00001720 vaddr 0x00000720 paddr 0x00000874 align 2**12
         filesz 0x00000154 memsz 0x00000154 flags rw-
    LOAD off    0x000019c8 vaddr 0x000009c8 paddr 0x000009c8 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-
    LOAD off    0x00002000 vaddr 0x04020000 paddr 0x04020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04020000  04020000  00002000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  04020020  04020020  00002020  2**0
                  CONTENTS
  2 .text         000006a8  00000000  00000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000078  000006a8  000006a8  000016a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000154  00000720  00000874  00001720  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  000009c8  000009c8  000019c8  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000009d8  000009d8  00002020  2**0
                  CONTENTS
  7 .Onchip_Memory 00000000  04020020  04020020  00002020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000278  00000000  00000000  00002048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000220b  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000dff  00000000  00000000  000044cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001061  00000000  00000000  000052ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000002f8  00000000  00000000  0000632c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000baf  00000000  00000000  00006624  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000057b  00000000  00000000  000071d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00007750  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000110  00000000  00000000  00007780  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00008a1a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00008a1d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00008a20  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00008a21  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00008a22  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00008a2d  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00008a38  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000004  00000000  00000000  00008a43  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000003b  00000000  00000000  00008a47  2**0
                  CONTENTS, READONLY
 27 .jdi          000046ee  00000000  00000000  00008a82  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00063ac6  00000000  00000000  0000d170  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04020000 l    d  .entry	00000000 .entry
04020020 l    d  .exceptions	00000000 .exceptions
00000000 l    d  .text	00000000 .text
000006a8 l    d  .rodata	00000000 .rodata
00000720 l    d  .rwdata	00000000 .rwdata
000009c8 l    d  .bss	00000000 .bss
000009d8 l    d  .SDRAM	00000000 .SDRAM
04020020 l    d  .Onchip_Memory	00000000 .Onchip_Memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../t_bsp//obj/HAL/src/crt0.o
00000048 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000007b8 l     O .rwdata	00000048 Char_Buffer
00000764 l     O .rwdata	00000054 Pixel_Buffer
00000720 l     O .rwdata	00000044 RGB_Resampler
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000004f0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000144 g     F .text	0000002c alt_main
00000874 g       *ABS*	00000000 __flash_rwdata_start
0000044c g     F .text	0000006c alt_up_char_buffer_string
000003fc g     F .text	00000050 alt_up_char_buffer_draw
00000170 g     F .text	00000038 alt_putstr
000005e4 g     F .text	00000008 altera_nios2_gen2_irq_init
04020000 g     F .entry	0000001c __reset
00000000 g       *ABS*	00000000 __flash_exceptions_start
000009d4 g     O .bss	00000004 errno
000009cc g     O .bss	00000004 alt_argv
00008858 g       *ABS*	00000000 _gp
00000800 g     O .rwdata	00000030 alt_fd_list
00000564 g     F .text	00000074 alt_find_dev
000004b8 g     F .text	00000020 alt_up_char_buffer_clear
000005ec g     F .text	00000038 alt_icache_flush
0000085c g     O .rwdata	00000004 alt_max_fd
000009d8 g       *ABS*	00000000 __bss_end
00000830 g     O .rwdata	00000028 alt_dev_null
000004d8 g     F .text	00000018 alt_dcache_flush_all
00000874 g       *ABS*	00000000 __ram_rwdata_end
00000860 g     O .rwdata	00000008 alt_dev_list
00000720 g       *ABS*	00000000 __ram_rodata_end
00000858 g     O .rwdata	00000004 jtag_uart_0
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000009d8 g       *ABS*	00000000 end
000003a8 g     F .text	0000004c alt_up_char_buffer_init
04000000 g       *ABS*	00000000 __alt_stack_pointer
00000374 g     F .text	00000034 altera_avalon_jtag_uart_write
00000000 g     F .text	0000004c _start
000001c8 g     F .text	000001ac alt_sys_init
00000720 g       *ABS*	00000000 __ram_rwdata_start
000006a8 g       *ABS*	00000000 __ram_rodata_start
00000624 g     F .text	00000030 memcmp
000009d8 g       *ABS*	00000000 __alt_stack_base
000004f8 g     F .text	0000006c alt_dev_llist_insert
000009c8 g       *ABS*	00000000 __bss_start
0000004c g     F .text	00000018 main
000009c8 g     O .bss	00000004 alt_envp
000003f4 g     F .text	00000008 alt_up_char_buffer_open_dev
00000870 g     O .rwdata	00000004 alt_errno
00000654 g     F .text	00000038 strcmp
000006a8 g       *ABS*	00000000 __flash_rodata_start
000001a8 g     F .text	00000020 alt_irq_init
000009d0 g     O .bss	00000004 alt_argc
00000868 g     O .rwdata	00000008 alt_fs_list
04020020 g       *ABS*	00000000 __ram_exceptions_start
00000874 g       *ABS*	00000000 _edata
000009d8 g       *ABS*	00000000 _end
04020020 g       *ABS*	00000000 __ram_exceptions_end
04020000 g       *ABS*	00000000 __alt_mem_Onchip_Memory
04000000 g       *ABS*	00000000 __alt_data_end
0402001c g       .entry	00000000 _exit
0000068c g     F .text	0000001c strlen
000005d8 g     F .text	0000000c alt_icache_flush_all
00000064 g     F .text	000000e0 alt_load



Disassembly of section .entry:

04020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 402000c:	00bffd16 	blt	zero,r2,4020004 <__ram_exceptions_end+0xffffffe4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4020010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 4020014:	08400014 	ori	at,at,0
    jmp r1
 4020018:	0800683a 	jmp	at

0402001c <_exit>:
 402001c:	00000000 	call	0 <__alt_mem_SDRAM>

Disassembly of section .text:

00000000 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   0:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   4:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__ram_exceptions_end+0xfbfdffe4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  10:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
  14:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  18:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  1c:	d6a21614 	ori	gp,gp,34904
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  20:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  24:	10827214 	ori	r2,r2,2504

    movhi r3, %hi(__bss_end)
  28:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  2c:	18c27614 	ori	r3,r3,2520

    beq r2, r3, 1f
  30:	10c00326 	beq	r2,r3,40 <_start+0x40>

0:
    stw zero, (r2)
  34:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  38:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  3c:	10fffd36 	bltu	r2,r3,34 <__ram_exceptions_end+0xfbfe0014>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  40:	00000640 	call	64 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  44:	00001440 	call	144 <alt_main>

00000048 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  48:	003fff06 	br	48 <__ram_exceptions_end+0xfbfe0028>

0000004c <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
  4c:	01000034 	movhi	r4,0
 */

#include "sys/alt_stdio.h"

int main()
{ 
  50:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
  54:	2101aa04 	addi	r4,r4,1704
 */

#include "sys/alt_stdio.h"

int main()
{ 
  58:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
  5c:	00001700 	call	170 <alt_putstr>
  60:	003fff06 	br	60 <__ram_exceptions_end+0xfbfe0040>

00000064 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  64:	deffff04 	addi	sp,sp,-4
  68:	01000034 	movhi	r4,0
  6c:	01400034 	movhi	r5,0
  70:	dfc00015 	stw	ra,0(sp)
  74:	2101c804 	addi	r4,r4,1824
  78:	29421d04 	addi	r5,r5,2164

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  7c:	2140061e 	bne	r4,r5,98 <alt_load+0x34>
  80:	010100b4 	movhi	r4,1026
  84:	01400034 	movhi	r5,0
  88:	21000804 	addi	r4,r4,32
  8c:	29400004 	addi	r5,r5,0
  90:	2140121e 	bne	r4,r5,dc <alt_load+0x78>
  94:	00000b06 	br	c4 <alt_load+0x60>
  98:	00c00034 	movhi	r3,0
  9c:	18c21d04 	addi	r3,r3,2164
  a0:	1907c83a 	sub	r3,r3,r4
  a4:	0005883a 	mov	r2,zero
  {
    while( to != end )
  a8:	10fff526 	beq	r2,r3,80 <__ram_exceptions_end+0xfbfe0060>
    {
      *to++ = *from++;
  ac:	114f883a 	add	r7,r2,r5
  b0:	39c00017 	ldw	r7,0(r7)
  b4:	110d883a 	add	r6,r2,r4
  b8:	10800104 	addi	r2,r2,4
  bc:	31c00015 	stw	r7,0(r6)
  c0:	003ff906 	br	a8 <__ram_exceptions_end+0xfbfe0088>
  c4:	01000034 	movhi	r4,0
  c8:	01400034 	movhi	r5,0
  cc:	2101aa04 	addi	r4,r4,1704
  d0:	2941aa04 	addi	r5,r5,1704

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  d4:	2140101e 	bne	r4,r5,118 <alt_load+0xb4>
  d8:	00000b06 	br	108 <alt_load+0xa4>
  dc:	00c100b4 	movhi	r3,1026
  e0:	18c00804 	addi	r3,r3,32
  e4:	1907c83a 	sub	r3,r3,r4
  e8:	0005883a 	mov	r2,zero
  {
    while( to != end )
  ec:	10fff526 	beq	r2,r3,c4 <__ram_exceptions_end+0xfbfe00a4>
    {
      *to++ = *from++;
  f0:	114f883a 	add	r7,r2,r5
  f4:	39c00017 	ldw	r7,0(r7)
  f8:	110d883a 	add	r6,r2,r4
  fc:	10800104 	addi	r2,r2,4
 100:	31c00015 	stw	r7,0(r6)
 104:	003ff906 	br	ec <__ram_exceptions_end+0xfbfe00cc>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 108:	00004d80 	call	4d8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 10c:	dfc00017 	ldw	ra,0(sp)
 110:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 114:	00005d81 	jmpi	5d8 <alt_icache_flush_all>
 118:	00c00034 	movhi	r3,0
 11c:	18c1c804 	addi	r3,r3,1824
 120:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 124:	0005883a 	mov	r2,zero
  {
    while( to != end )
 128:	18bff726 	beq	r3,r2,108 <__ram_exceptions_end+0xfbfe00e8>
    {
      *to++ = *from++;
 12c:	114f883a 	add	r7,r2,r5
 130:	39c00017 	ldw	r7,0(r7)
 134:	110d883a 	add	r6,r2,r4
 138:	10800104 	addi	r2,r2,4
 13c:	31c00015 	stw	r7,0(r6)
 140:	003ff906 	br	128 <__ram_exceptions_end+0xfbfe0108>

00000144 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 144:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 148:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 14c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 150:	00001a80 	call	1a8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 154:	00001c80 	call	1c8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 158:	d1a05c17 	ldw	r6,-32400(gp)
 15c:	d1605d17 	ldw	r5,-32396(gp)
 160:	d1205e17 	ldw	r4,-32392(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 164:	dfc00017 	ldw	ra,0(sp)
 168:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 16c:	000004c1 	jmpi	4c <main>

00000170 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 170:	defffe04 	addi	sp,sp,-8
 174:	dc000015 	stw	r16,0(sp)
 178:	dfc00115 	stw	ra,4(sp)
 17c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 180:	000068c0 	call	68c <strlen>
 184:	01000034 	movhi	r4,0
 188:	000f883a 	mov	r7,zero
 18c:	100d883a 	mov	r6,r2
 190:	800b883a 	mov	r5,r16
 194:	21021604 	addi	r4,r4,2136
#else
    return fputs(str, stdout);
#endif
#endif
}
 198:	dfc00117 	ldw	ra,4(sp)
 19c:	dc000017 	ldw	r16,0(sp)
 1a0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 1a4:	00003741 	jmpi	374 <altera_avalon_jtag_uart_write>

000001a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1a8:	deffff04 	addi	sp,sp,-4
 1ac:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
 1b0:	00005e40 	call	5e4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1b4:	00800044 	movi	r2,1
 1b8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1bc:	dfc00017 	ldw	ra,0(sp)
 1c0:	dec00104 	addi	sp,sp,4
 1c4:	f800283a 	ret

000001c8 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_BUFFER, Char_Buffer);
 1c8:	00800034 	movhi	r2,0
 1cc:	1081ee04 	addi	r2,r2,1976
 1d0:	10c00a17 	ldw	r3,40(r2)
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1d4:	deffff04 	addi	sp,sp,-4
 1d8:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_BUFFER, Char_Buffer);
 1dc:	18c00117 	ldw	r3,4(r3)
 1e0:	01401004 	movi	r5,64
 1e4:	193fffcc 	andi	r4,r3,65535
 1e8:	1806d43a 	srli	r3,r3,16
 1ec:	11000c15 	stw	r4,48(r2)
 1f0:	10c00d15 	stw	r3,52(r2)
 1f4:	29000436 	bltu	r5,r4,208 <alt_sys_init+0x40>
 1f8:	01000fc4 	movi	r4,63
 1fc:	11000f15 	stw	r4,60(r2)
 200:	01000184 	movi	r4,6
 204:	11001015 	stw	r4,64(r2)
 208:	01000804 	movi	r4,32
 20c:	20c00236 	bltu	r4,r3,218 <alt_sys_init+0x50>
 210:	00c007c4 	movi	r3,31
 214:	10c01115 	stw	r3,68(r2)
 218:	01000034 	movhi	r4,0
 21c:	2101ee04 	addi	r4,r4,1976
 220:	00003a80 	call	3a8 <alt_up_char_buffer_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 224:	01000034 	movhi	r4,0
 228:	d1600204 	addi	r5,gp,-32760
 22c:	2101ee04 	addi	r4,r4,1976
 230:	00004f80 	call	4f8 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER, Pixel_Buffer);
 234:	00800034 	movhi	r2,0
 238:	1081d904 	addi	r2,r2,1892
 23c:	10c00a17 	ldw	r3,40(r2)
 240:	01c00044 	movi	r7,1
 244:	19000017 	ldw	r4,0(r3)
 248:	11000b15 	stw	r4,44(r2)
 24c:	19000117 	ldw	r4,4(r3)
 250:	11000c15 	stw	r4,48(r2)
 254:	19000204 	addi	r4,r3,8
 258:	2140000b 	ldhu	r5,0(r4)
 25c:	18c00304 	addi	r3,r3,12
 260:	11400f15 	stw	r5,60(r2)
 264:	21000017 	ldw	r4,0(r4)
 268:	2008d43a 	srli	r4,r4,16
 26c:	11001015 	stw	r4,64(r2)
 270:	19000017 	ldw	r4,0(r3)
 274:	2009d07a 	srai	r4,r4,1
 278:	2100004c 	andi	r4,r4,1
 27c:	11000d15 	stw	r4,52(r2)
 280:	19000017 	ldw	r4,0(r3)
 284:	2009d13a 	srai	r4,r4,4
 288:	210003cc 	andi	r4,r4,15
 28c:	11000e15 	stw	r4,56(r2)
 290:	19400017 	ldw	r5,0(r3)
 294:	2807d43a 	srai	r3,r5,16
 298:	280cd63a 	srli	r6,r5,24
 29c:	21c0021e 	bne	r4,r7,2a8 <alt_sys_init+0xe0>
 2a0:	10001115 	stw	zero,68(r2)
 2a4:	00000506 	br	2bc <alt_sys_init+0xf4>
 2a8:	01400084 	movi	r5,2
 2ac:	2140021e 	bne	r4,r5,2b8 <alt_sys_init+0xf0>
 2b0:	11c01115 	stw	r7,68(r2)
 2b4:	00000106 	br	2bc <alt_sys_init+0xf4>
 2b8:	11401115 	stw	r5,68(r2)
 2bc:	18c03fcc 	andi	r3,r3,255
 2c0:	01400804 	movi	r5,32
 2c4:	28cfc83a 	sub	r7,r5,r3
 2c8:	013fffc4 	movi	r4,-1
 2cc:	21ced83a 	srl	r7,r4,r7
 2d0:	298bc83a 	sub	r5,r5,r6
 2d4:	2148d83a 	srl	r4,r4,r5
 2d8:	11c01215 	stw	r7,72(r2)
 2dc:	11c01117 	ldw	r7,68(r2)
 2e0:	11001415 	stw	r4,80(r2)
 2e4:	01000034 	movhi	r4,0
 2e8:	38c7883a 	add	r3,r7,r3
 2ec:	d1600204 	addi	r5,gp,-32760
 2f0:	2101d904 	addi	r4,r4,1892
 2f4:	10c01315 	stw	r3,76(r2)
 2f8:	00004f80 	call	4f8 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( RGB_RESAMPLER, RGB_Resampler);
 2fc:	01000034 	movhi	r4,0
 300:	2101c804 	addi	r4,r4,1824
 304:	20800a17 	ldw	r2,40(r4)
 308:	d1600204 	addi	r5,gp,-32760
 30c:	10c00017 	ldw	r3,0(r2)
 310:	18c003cc 	andi	r3,r3,15
 314:	20c00b15 	stw	r3,44(r4)
 318:	10c00017 	ldw	r3,0(r2)
 31c:	1807d13a 	srai	r3,r3,4
 320:	18c0004c 	andi	r3,r3,1
 324:	20c00c15 	stw	r3,48(r4)
 328:	10c00017 	ldw	r3,0(r2)
 32c:	1807d17a 	srai	r3,r3,5
 330:	18c0004c 	andi	r3,r3,1
 334:	20c00d15 	stw	r3,52(r4)
 338:	10c00017 	ldw	r3,0(r2)
 33c:	1807d43a 	srai	r3,r3,16
 340:	18c003cc 	andi	r3,r3,15
 344:	20c00e15 	stw	r3,56(r4)
 348:	10c00017 	ldw	r3,0(r2)
 34c:	1807d53a 	srai	r3,r3,20
 350:	18c0004c 	andi	r3,r3,1
 354:	20c00f15 	stw	r3,60(r4)
 358:	10800017 	ldw	r2,0(r2)
 35c:	1005d57a 	srai	r2,r2,21
 360:	1080004c 	andi	r2,r2,1
 364:	20801015 	stw	r2,64(r4)
}
 368:	dfc00017 	ldw	ra,0(sp)
 36c:	dec00104 	addi	sp,sp,4
 370:	00004f81 	jmpi	4f8 <alt_dev_llist_insert>

00000374 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 374:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 378:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 37c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 380:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 384:	2980072e 	bgeu	r5,r6,3a4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 388:	38c00037 	ldwio	r3,0(r7)
 38c:	18ffffec 	andhi	r3,r3,65535
 390:	183ffc26 	beq	r3,zero,384 <__ram_exceptions_end+0xfbfe0364>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 394:	28c00007 	ldb	r3,0(r5)
 398:	20c00035 	stwio	r3,0(r4)
 39c:	29400044 	addi	r5,r5,1
 3a0:	003ff806 	br	384 <__ram_exceptions_end+0xfbfe0364>

  return count;
}
 3a4:	f800283a 	ret

000003a8 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 3a8:	defffe04 	addi	sp,sp,-8
 3ac:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
 3b0:	24000217 	ldw	r16,8(r4)
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 3b4:	dfc00115 	stw	ra,4(sp)
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 3b8:	80800007 	ldb	r2,0(r16)
 3bc:	10000926 	beq	r2,zero,3e4 <alt_up_char_buffer_init+0x3c>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 3c0:	01400034 	movhi	r5,0
 3c4:	2941be04 	addi	r5,r5,1784
 3c8:	8009883a 	mov	r4,r16
 3cc:	00006540 	call	654 <strcmp>
 3d0:	1000021e 	bne	r2,zero,3dc <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
 3d4:	80000005 	stb	zero,0(r16)
			break;
 3d8:	00000206 	br	3e4 <alt_up_char_buffer_init+0x3c>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 3dc:	84000044 	addi	r16,r16,1
 3e0:	003ff506 	br	3b8 <__ram_exceptions_end+0xfbfe0398>
			break;
		}
	}
	
	return;
}
 3e4:	dfc00117 	ldw	ra,4(sp)
 3e8:	dc000017 	ldw	r16,0(sp)
 3ec:	dec00204 	addi	sp,sp,8
 3f0:	f800283a 	ret

000003f4 <alt_up_char_buffer_open_dev>:
alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 3f4:	d1600204 	addi	r5,gp,-32760
 3f8:	00005641 	jmpi	564 <alt_find_dev>

000003fc <alt_up_char_buffer_draw>:
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 3fc:	20800c17 	ldw	r2,48(r4)
 400:	3080102e 	bgeu	r6,r2,444 <alt_up_char_buffer_draw+0x48>
 404:	20800d17 	ldw	r2,52(r4)
 408:	38800e2e 	bgeu	r7,r2,444 <alt_up_char_buffer_draw+0x48>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 40c:	20800f17 	ldw	r2,60(r4)
 410:	3084703a 	and	r2,r6,r2
 414:	21800e17 	ldw	r6,56(r4)
 418:	1186983a 	sll	r3,r2,r6
 41c:	20801117 	ldw	r2,68(r4)
 420:	21801017 	ldw	r6,64(r4)
 424:	388e703a 	and	r7,r7,r2
 428:	398e983a 	sll	r7,r7,r6
 42c:	20800b17 	ldw	r2,44(r4)
 430:	19ccb03a 	or	r6,r3,r7
 434:	308d883a 	add	r6,r6,r2
 438:	31400025 	stbio	r5,0(r6)

	return 0;
 43c:	0005883a 	mov	r2,zero
 440:	f800283a 	ret

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
 444:	00bfffc4 	movi	r2,-1
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);

	return 0;
}
 448:	f800283a 	ret

0000044c <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 44c:	20800c17 	ldw	r2,48(r4)
 450:	30800236 	bltu	r6,r2,45c <alt_up_char_buffer_string+0x10>
		return -1;
 454:	00bfffc4 	movi	r2,-1
 458:	f800283a 	ret
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 45c:	20800d17 	ldw	r2,52(r4)
 460:	38bffc2e 	bgeu	r7,r2,454 <__ram_exceptions_end+0xfbfe0434>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
 464:	20801017 	ldw	r2,64(r4)
 468:	388e983a 	sll	r7,r7,r2
 46c:	398f883a 	add	r7,r7,r6
 470:	394fc83a 	sub	r7,r7,r5

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
 474:	314dc83a 	sub	r6,r6,r5
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 478:	28c00003 	ldbu	r3,0(r5)
 47c:	29d3883a 	add	r9,r5,r7
 480:	1a003fcc 	andi	r8,r3,255
 484:	4200201c 	xori	r8,r8,128
 488:	423fe004 	addi	r8,r8,-128
 48c:	40000826 	beq	r8,zero,4b0 <alt_up_char_buffer_string+0x64>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 490:	20800b17 	ldw	r2,44(r4)
 494:	4885883a 	add	r2,r9,r2
 498:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
 49c:	20800c17 	ldw	r2,48(r4)
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
 4a0:	29400044 	addi	r5,r5,1
		if (++x >= char_buffer->x_resolution)
 4a4:	2987883a 	add	r3,r5,r6
 4a8:	18bff336 	bltu	r3,r2,478 <__ram_exceptions_end+0xfbfe0458>
 4ac:	003fe906 	br	454 <__ram_exceptions_end+0xfbfe0434>
			return -1;
		++offset;
	}
	return 0;
 4b0:	0005883a 	mov	r2,zero
}
 4b4:	f800283a 	ret

000004b8 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 4b8:	20800a17 	ldw	r2,40(r4)
 4bc:	00c00044 	movi	r3,1
 4c0:	10c000a5 	stbio	r3,2(r2)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 4c4:	20800a17 	ldw	r2,40(r4)
 4c8:	108000a3 	ldbuio	r2,2(r2)
 4cc:	1080004c 	andi	r2,r2,1
 4d0:	103ffc1e 	bne	r2,zero,4c4 <__ram_exceptions_end+0xfbfe04a4>
	return 0;
}
 4d4:	f800283a 	ret

000004d8 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4d8:	0005883a 	mov	r2,zero
 4dc:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4e0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4e4:	10800804 	addi	r2,r2,32
 4e8:	10fffd1e 	bne	r2,r3,4e0 <__ram_exceptions_end+0xfbfe04c0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4ec:	f800283a 	ret

000004f0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 4f0:	3005883a 	mov	r2,r6
 4f4:	f800283a 	ret

000004f8 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4f8:	20000226 	beq	r4,zero,504 <alt_dev_llist_insert+0xc>
 4fc:	20800217 	ldw	r2,8(r4)
 500:	1000101e 	bne	r2,zero,544 <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 504:	d0a00617 	ldw	r2,-32744(gp)
 508:	10000926 	beq	r2,zero,530 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 50c:	deffff04 	addi	sp,sp,-4
 510:	dfc00015 	stw	ra,0(sp)
 514:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 518:	00c00584 	movi	r3,22
 51c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 520:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 524:	dfc00017 	ldw	ra,0(sp)
 528:	dec00104 	addi	sp,sp,4
 52c:	f800283a 	ret
 530:	d0a05f04 	addi	r2,gp,-32388
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 534:	00c00584 	movi	r3,22
 538:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 53c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 540:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
 544:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 548:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
 54c:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
 550:	28800017 	ldw	r2,0(r5)
 554:	11000115 	stw	r4,4(r2)
  list->next           = entry;
 558:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
 55c:	0005883a 	mov	r2,zero
 560:	f800283a 	ret

00000564 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 564:	defffb04 	addi	sp,sp,-20
 568:	dcc00315 	stw	r19,12(sp)
 56c:	dc800215 	stw	r18,8(sp)
 570:	dc400115 	stw	r17,4(sp)
 574:	dc000015 	stw	r16,0(sp)
 578:	dfc00415 	stw	ra,16(sp)
 57c:	2027883a 	mov	r19,r4
 580:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
 584:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
 588:	000068c0 	call	68c <strlen>
 58c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 590:	84400726 	beq	r16,r17,5b0 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 594:	81000217 	ldw	r4,8(r16)
 598:	900d883a 	mov	r6,r18
 59c:	980b883a 	mov	r5,r19
 5a0:	00006240 	call	624 <memcmp>
 5a4:	10000426 	beq	r2,zero,5b8 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 5a8:	84000017 	ldw	r16,0(r16)
 5ac:	003ff806 	br	590 <__ram_exceptions_end+0xfbfe0570>
  }
  
  /* No match found */
  
  return NULL;
 5b0:	0005883a 	mov	r2,zero
 5b4:	00000106 	br	5bc <alt_find_dev+0x58>
 5b8:	8005883a 	mov	r2,r16
}
 5bc:	dfc00417 	ldw	ra,16(sp)
 5c0:	dcc00317 	ldw	r19,12(sp)
 5c4:	dc800217 	ldw	r18,8(sp)
 5c8:	dc400117 	ldw	r17,4(sp)
 5cc:	dc000017 	ldw	r16,0(sp)
 5d0:	dec00504 	addi	sp,sp,20
 5d4:	f800283a 	ret

000005d8 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 5d8:	01440004 	movi	r5,4096
 5dc:	0009883a 	mov	r4,zero
 5e0:	00005ec1 	jmpi	5ec <alt_icache_flush>

000005e4 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 5e4:	000170fa 	wrctl	ienable,zero
 5e8:	f800283a 	ret

000005ec <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 5ec:	00840004 	movi	r2,4096
 5f0:	1140012e 	bgeu	r2,r5,5f8 <alt_icache_flush+0xc>
 5f4:	100b883a 	mov	r5,r2
 5f8:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 5fc:	2005883a 	mov	r2,r4
 600:	1140032e 	bgeu	r2,r5,610 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 604:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 608:	10800804 	addi	r2,r2,32
 60c:	003ffc06 	br	600 <__ram_exceptions_end+0xfbfe05e0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 610:	210007cc 	andi	r4,r4,31
 614:	20000126 	beq	r4,zero,61c <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 618:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 61c:	0000203a 	flushp
 620:	f800283a 	ret

00000624 <memcmp>:
 624:	218d883a 	add	r6,r4,r6
 628:	21800826 	beq	r4,r6,64c <memcmp+0x28>
 62c:	20800003 	ldbu	r2,0(r4)
 630:	28c00003 	ldbu	r3,0(r5)
 634:	10c00226 	beq	r2,r3,640 <memcmp+0x1c>
 638:	10c5c83a 	sub	r2,r2,r3
 63c:	f800283a 	ret
 640:	21000044 	addi	r4,r4,1
 644:	29400044 	addi	r5,r5,1
 648:	003ff706 	br	628 <__ram_exceptions_end+0xfbfe0608>
 64c:	0005883a 	mov	r2,zero
 650:	f800283a 	ret

00000654 <strcmp>:
 654:	20800003 	ldbu	r2,0(r4)
 658:	10c03fcc 	andi	r3,r2,255
 65c:	18c0201c 	xori	r3,r3,128
 660:	18ffe004 	addi	r3,r3,-128
 664:	18000526 	beq	r3,zero,67c <strcmp+0x28>
 668:	29800007 	ldb	r6,0(r5)
 66c:	1980031e 	bne	r3,r6,67c <strcmp+0x28>
 670:	21000044 	addi	r4,r4,1
 674:	29400044 	addi	r5,r5,1
 678:	003ff606 	br	654 <__ram_exceptions_end+0xfbfe0634>
 67c:	28c00003 	ldbu	r3,0(r5)
 680:	10803fcc 	andi	r2,r2,255
 684:	10c5c83a 	sub	r2,r2,r3
 688:	f800283a 	ret

0000068c <strlen>:
 68c:	2005883a 	mov	r2,r4
 690:	10c00007 	ldb	r3,0(r2)
 694:	18000226 	beq	r3,zero,6a0 <strlen+0x14>
 698:	10800044 	addi	r2,r2,1
 69c:	003ffc06 	br	690 <__ram_exceptions_end+0xfbfe0670>
 6a0:	1105c83a 	sub	r2,r2,r4
 6a4:	f800283a 	ret
