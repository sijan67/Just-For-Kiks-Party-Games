
party_remake.elf:     file format elf32-littlenios2
party_remake.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000020

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00001328 memsz 0x00001328 flags r-x
    LOAD off    0x00002348 vaddr 0x04001348 paddr 0x040014d0 align 2**12
         filesz 0x00000188 memsz 0x00000188 flags rw-
    LOAD off    0x00002658 vaddr 0x04001658 paddr 0x04001658 align 2**12
         filesz 0x00000000 memsz 0x00000050 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  04000020  04000020  000024d0  2**0
                  CONTENTS
  2 .text         0000119c  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000018c  040011bc  040011bc  000021bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000188  04001348  040014d0  00002348  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000050  04001658  04001658  00002658  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  040016a8  040016a8  000024d0  2**0
                  CONTENTS
  7 .Onchip_Memory 00000000  08010000  08010000  000024d0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000024d0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000002e0  00000000  00000000  000024f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000384f  00000000  00000000  000027d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000012ab  00000000  00000000  00006027  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000018e2  00000000  00000000  000072d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000004c0  00000000  00000000  00008bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001011  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001a09  00000000  00000000  0000a085  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0000ba90  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000100  00000000  00000000  0000bac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0000d1d6  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0000d1d9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0000d1dd  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000004  00000000  00000000  0000d1de  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  0000d1e2  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000004  00000000  00000000  0000d1e6  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000004  00000000  00000000  0000d1ea  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000003b  00000000  00000000  0000d1ee  2**0
                  CONTENTS, READONLY
 27 .jdi          0000448d  00000000  00000000  0000d229  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00088ac0  00000000  00000000  000116b6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000020 l    d  .text	00000000 .text
040011bc l    d  .rodata	00000000 .rodata
04001348 l    d  .rwdata	00000000 .rwdata
04001658 l    d  .bss	00000000 .bss
040016a8 l    d  .SDRAM	00000000 .SDRAM
08010000 l    d  .Onchip_Memory	00000000 .Onchip_Memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../party_remake_bsp//obj/HAL/src/crt0.o
04000068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
040003f4 l     F .text	00000008 alt_dev_reg
04001428 l     O .rwdata	00000030 Audio
040013e0 l     O .rwdata	00000048 Char_Buffer
0400138c l     O .rwdata	00000054 Pixel_Buffer
04001348 l     O .rwdata	00000044 RGB_Resampler
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04001004 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
04000390 g     F .text	0000002c alt_main
04000bb0 g     F .text	0000015c alt_up_pixel_buffer_dma_draw_vline
040014d0 g       *ABS*	00000000 __flash_rwdata_start
040001ec g     F .text	00000038 button_trigger
040006a0 g     F .text	0000006c alt_up_char_buffer_string
04000650 g     F .text	00000050 alt_up_char_buffer_draw
04001680 g     O .bss	00000028 player_list
040003bc g     F .text	00000038 alt_putstr
04000734 g     F .text	00000098 alt_up_pixel_buffer_dma_draw
040010f8 g     F .text	00000008 altera_nios2_gen2_irq_init
0400072c g     F .text	00000008 alt_up_pixel_buffer_dma_open_dev
04000000 g     F .entry	0000001c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
04001658 g     O .bss	00000004 current_count
0400167c g     O .bss	00000004 errno
04001668 g     O .bss	00000004 char_buffer
04001674 g     O .bss	00000004 alt_argv
040094b0 g       *ABS*	00000000 _gp
040007cc g     F .text	0000001c alt_up_pixel_buffer_dma_change_back_buffer_address
04001458 g     O .rwdata	00000030 alt_fd_list
04001078 g     F .text	00000074 alt_find_dev
04000268 g     F .text	00000028 memcpy
0400006c g     F .text	00000180 init_room_setup
0400070c g     F .text	00000020 alt_up_char_buffer_clear
0400080c g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
04000a74 g     F .text	0000013c alt_up_pixel_buffer_dma_draw_hline
04001100 g     F .text	00000038 alt_icache_flush
04000dd8 g     F .text	0000004c helper_plot_pixel
040014b8 g     O .rwdata	00000004 alt_max_fd
040014b0 g     O .rwdata	00000001 game_state
0400081c g     F .text	00000090 alt_up_pixel_buffer_dma_clear_screen
040016a8 g       *ABS*	00000000 __bss_end
040008ac g     F .text	000001c8 alt_up_pixel_buffer_dma_draw_box
04001488 g     O .rwdata	00000028 alt_dev_null
04000fec g     F .text	00000018 alt_dcache_flush_all
04000d0c g     F .text	000000cc alt_up_pixel_buffer_dma_draw_rectangle
040014d0 g       *ABS*	00000000 __ram_rwdata_end
040014bc g     O .rwdata	00000008 alt_dev_list
04000e24 g     F .text	000001c8 alt_up_pixel_buffer_dma_draw_line
04001348 g       *ABS*	00000000 __ram_rodata_end
04000000 g       *ABS*	00000000 __alt_mem_SDRAM
04001664 g     O .bss	00000004 team_one_score
040016a8 g       *ABS*	00000000 end
040005fc g     F .text	0000004c alt_up_char_buffer_init
08000000 g       *ABS*	00000000 __alt_stack_pointer
040005c8 g     F .text	00000034 altera_avalon_jtag_uart_write
0400165c g     O .bss	00000004 global_count
04000020 g     F .text	0000004c _start
0400041c g     F .text	000001ac alt_sys_init
04001348 g       *ABS*	00000000 __ram_rwdata_start
040011bc g       *ABS*	00000000 __ram_rodata_start
04001138 g     F .text	00000030 memcmp
040016a8 g       *ABS*	00000000 __alt_stack_base
0400100c g     F .text	0000006c alt_dev_llist_insert
04001658 g       *ABS*	00000000 __bss_start
04000290 g     F .text	00000020 memset
0400025c g     F .text	0000000c main
04001670 g     O .bss	00000004 alt_envp
040007e8 g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
04000648 g     F .text	00000008 alt_up_char_buffer_open_dev
04000224 g     F .text	00000038 init_question_gameplay
040014b4 g     O .rwdata	00000004 JTAG
040014cc g     O .rwdata	00000004 alt_errno
04001168 g     F .text	00000038 strcmp
040011bc g       *ABS*	00000000 __flash_rodata_start
040003fc g     F .text	00000020 alt_irq_init
0400166c g     O .bss	00000004 pixel_buffer
04001678 g     O .bss	00000004 alt_argc
040014c4 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
040014d0 g       *ABS*	00000000 _edata
040016a8 g       *ABS*	00000000 _end
04000020 g       *ABS*	00000000 __ram_exceptions_end
08010000 g       *ABS*	00000000 __alt_mem_Onchip_Memory
08000000 g       *ABS*	00000000 __alt_data_end
0400001c g       .entry	00000000 _exit
040011a0 g     F .text	0000001c strlen
040010ec g     F .text	0000000c alt_icache_flush_all
04001660 g     O .bss	00000004 team_two_score
040002b0 g     F .text	000000e0 alt_load



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_mem_Onchip_Memory+0xfbff0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08400814 	ori	at,at,32
    jmp r1
 4000018:	0800683a 	jmp	at

0400001c <_exit>:
 400001c:	00000000 	call	0 <__alt_mem_SDRAM-0x4000000>

Disassembly of section .text:

04000020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 4000028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 400002c:	00bffd16 	blt	zero,r2,4000024 <__alt_mem_Onchip_Memory+0xfbff0024>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000030:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000034:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000038:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 400003c:	d6a52c14 	ori	gp,gp,38064
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000040:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000044:	10859614 	ori	r2,r2,5720

    movhi r3, %hi(__bss_end)
 4000048:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 400004c:	18c5aa14 	ori	r3,r3,5800

    beq r2, r3, 1f
 4000050:	10c00326 	beq	r2,r3,4000060 <_start+0x40>

0:
    stw zero, (r2)
 4000054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400005c:	10fffd36 	bltu	r2,r3,4000054 <__alt_mem_Onchip_Memory+0xfbff0054>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000060:	40002b00 	call	40002b0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000064:	40003900 	call	4000390 <alt_main>

04000068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000068:	003fff06 	br	4000068 <__alt_mem_Onchip_Memory+0xfbff0068>

0400006c <init_room_setup>:

    return 0;
}

void init_room_setup() {
    alt_putstr("Hello from Nios II!\n");
 400006c:	01010034 	movhi	r4,1024
    init_question_gameplay();

    return 0;
}

void init_room_setup() {
 4000070:	deffe804 	addi	sp,sp,-96
    alt_putstr("Hello from Nios II!\n");
 4000074:	21046f04 	addi	r4,r4,4540
    init_question_gameplay();

    return 0;
}

void init_room_setup() {
 4000078:	dfc01715 	stw	ra,92(sp)
    alt_putstr("Hello from Nios II!\n");
 400007c:	40003bc0 	call	40003bc <alt_putstr>

    pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/Pixel_Buffer");
 4000080:	01010034 	movhi	r4,1024
 4000084:	21047504 	addi	r4,r4,4564
 4000088:	400072c0 	call	400072c <alt_up_pixel_buffer_dma_open_dev>
 400008c:	d0a06f15 	stw	r2,-32324(gp)
    if(pixel_buffer == NULL) {
 4000090:	1000031e 	bne	r2,zero,40000a0 <init_room_setup+0x34>
        alt_putstr("Error: could not open pixel buffer device\n");
 4000094:	01010034 	movhi	r4,1024
 4000098:	21047a04 	addi	r4,r4,4584
 400009c:	00000206 	br	40000a8 <init_room_setup+0x3c>
    } else {
        alt_putstr("Opened pixel buffer device\n");
 40000a0:	01010034 	movhi	r4,1024
 40000a4:	21048504 	addi	r4,r4,4628
 40000a8:	40003bc0 	call	40003bc <alt_putstr>
    //usleep(1000000);
/*
    alt_up_char_buffer_clear(char_buffer);
    usleep(1000000);
    */
    alt_putstr("Displaying Colour\n");
 40000ac:	01010034 	movhi	r4,1024
 40000b0:	21048c04 	addi	r4,r4,4656
 40000b4:	40003bc0 	call	40003bc <alt_putstr>
    alt_up_pixel_buffer_dma_draw_box (pixel_buffer, 150, 100, 199, 149, RED, 0);
 40000b8:	00be0014 	movui	r2,63488
 40000bc:	d1206f17 	ldw	r4,-32324(gp)
 40000c0:	d8800115 	stw	r2,4(sp)
 40000c4:	00802544 	movi	r2,149
 40000c8:	d8800015 	stw	r2,0(sp)
 40000cc:	01c031c4 	movi	r7,199
 40000d0:	01801904 	movi	r6,100
 40000d4:	01402584 	movi	r5,150
 40000d8:	d8000215 	stw	zero,8(sp)
 40000dc:	40008ac0 	call	40008ac <alt_up_pixel_buffer_dma_draw_box>

    char_buffer = alt_up_char_buffer_open_dev("/dev/Char_Buffer");
 40000e0:	01010034 	movhi	r4,1024
 40000e4:	21049104 	addi	r4,r4,4676
 40000e8:	40006480 	call	4000648 <alt_up_char_buffer_open_dev>
 40000ec:	d0a06e15 	stw	r2,-32328(gp)

    if(char_buffer == NULL) {
 40000f0:	1000031e 	bne	r2,zero,4000100 <init_room_setup+0x94>
        alt_putstr("Error: could not open char buffer device\n");
 40000f4:	01010034 	movhi	r4,1024
 40000f8:	21049604 	addi	r4,r4,4696
 40000fc:	00000206 	br	4000108 <init_room_setup+0x9c>
    } else {
        alt_putstr("Opened Char buffer device\n");
 4000100:	01010034 	movhi	r4,1024
 4000104:	2104a104 	addi	r4,r4,4740
 4000108:	40003bc0 	call	40003bc <alt_putstr>
    }

    char text = 'X';
    char text_top_row[40] = "TriviaSoC:\0";
 400010c:	01410034 	movhi	r5,1024
 4000110:	01800304 	movi	r6,12
 4000114:	2944a804 	addi	r5,r5,4768
 4000118:	d9000d04 	addi	r4,sp,52
 400011c:	40002680 	call	4000268 <memcpy>
 4000120:	01800704 	movi	r6,28
 4000124:	000b883a 	mov	r5,zero
 4000128:	d9001004 	addi	r4,sp,64
 400012c:	40002900 	call	4000290 <memset>
    char text_bottom_row[40] = "Please enter the Room Code:\0";
 4000130:	01410034 	movhi	r5,1024
 4000134:	01800744 	movi	r6,29
 4000138:	2944b204 	addi	r5,r5,4808
 400013c:	d9000304 	addi	r4,sp,12
 4000140:	40002680 	call	4000268 <memcpy>
 4000144:	018002c4 	movi	r6,11
 4000148:	000b883a 	mov	r5,zero
 400014c:	d9000a44 	addi	r4,sp,41
 4000150:	40002900 	call	4000290 <memset>
    /* output text message near the middle of the VGA monitor */
    while(alt_up_char_buffer_clear(char_buffer));
 4000154:	d1206e17 	ldw	r4,-32328(gp)
 4000158:	400070c0 	call	400070c <alt_up_char_buffer_clear>
 400015c:	103ffd1e 	bne	r2,zero,4000154 <__alt_mem_Onchip_Memory+0xfbff0154>
    alt_up_char_buffer_draw(char_buffer, text, 0, 0);
 4000160:	d1206e17 	ldw	r4,-32328(gp)
 4000164:	000f883a 	mov	r7,zero
 4000168:	000d883a 	mov	r6,zero
 400016c:	01401604 	movi	r5,88
 4000170:	40006500 	call	4000650 <alt_up_char_buffer_draw>
    alt_up_char_buffer_draw(char_buffer, text, 0, 59);
 4000174:	d1206e17 	ldw	r4,-32328(gp)
 4000178:	01c00ec4 	movi	r7,59
 400017c:	000d883a 	mov	r6,zero
 4000180:	01401604 	movi	r5,88
 4000184:	40006500 	call	4000650 <alt_up_char_buffer_draw>
    alt_up_char_buffer_draw(char_buffer, text, 79, 0);
 4000188:	d1206e17 	ldw	r4,-32328(gp)
 400018c:	000f883a 	mov	r7,zero
 4000190:	018013c4 	movi	r6,79
 4000194:	01401604 	movi	r5,88
 4000198:	40006500 	call	4000650 <alt_up_char_buffer_draw>
    alt_up_char_buffer_draw(char_buffer, text, 79, 59);
 400019c:	d1206e17 	ldw	r4,-32328(gp)
 40001a0:	01c00ec4 	movi	r7,59
 40001a4:	018013c4 	movi	r6,79
 40001a8:	01401604 	movi	r5,88
 40001ac:	40006500 	call	4000650 <alt_up_char_buffer_draw>
    alt_up_char_buffer_string(char_buffer, text_top_row, 20,20);
 40001b0:	d1206e17 	ldw	r4,-32328(gp)
 40001b4:	01c00504 	movi	r7,20
 40001b8:	380d883a 	mov	r6,r7
 40001bc:	d9400d04 	addi	r5,sp,52
 40001c0:	40006a00 	call	40006a0 <alt_up_char_buffer_string>
    alt_up_char_buffer_string(char_buffer, text_bottom_row, 40,40);
 40001c4:	d1206e17 	ldw	r4,-32328(gp)
 40001c8:	01c00a04 	movi	r7,40
 40001cc:	380d883a 	mov	r6,r7
 40001d0:	d9400304 	addi	r5,sp,12
 40001d4:	40006a00 	call	40006a0 <alt_up_char_buffer_string>

    bool game_start = false;
    int i = 0;
 40001d8:	0005883a 	mov	r2,zero
    while(!game_start) {
        if(i < 4) { // & API call from backend to grab name
 40001dc:	00c000c4 	movi	r3,3
 40001e0:	18bfff16 	blt	r3,r2,40001e0 <__alt_mem_Onchip_Memory+0xfbff01e0>
            //player_list[i] = ""; // Name pulled from backend
            i++;
 40001e4:	10800044 	addi	r2,r2,1
 40001e8:	003ffd06 	br	40001e0 <__alt_mem_Onchip_Memory+0xfbff01e0>

040001ec <button_trigger>:
 */

void button_trigger() {
    int button_pressed = 0;

    current_count = global_count;
 40001ec:	d0e06b17 	ldw	r3,-32340(gp)
    while(button_pressed != 0 || current_count + 10 > global_count) {
    	if(IORD_ALTERA_AVALON_PIO_DATA(BUTTON_1_BASE)) {
 40001f0:	014200b4 	movhi	r5,2050
        // Display timing end
    }
 */

void button_trigger() {
    int button_pressed = 0;
 40001f4:	0009883a 	mov	r4,zero

    current_count = global_count;
 40001f8:	d0e06a15 	stw	r3,-32344(gp)
    while(button_pressed != 0 || current_count + 10 > global_count) {
    	if(IORD_ALTERA_AVALON_PIO_DATA(BUTTON_1_BASE)) {
 40001fc:	294c1404 	addi	r5,r5,12368

void button_trigger() {
    int button_pressed = 0;

    current_count = global_count;
    while(button_pressed != 0 || current_count + 10 > global_count) {
 4000200:	20000426 	beq	r4,zero,4000214 <button_trigger+0x28>
    	if(IORD_ALTERA_AVALON_PIO_DATA(BUTTON_1_BASE)) {
 4000204:	28800037 	ldwio	r2,0(r5)
 4000208:	103ffd26 	beq	r2,zero,4000200 <__alt_mem_Onchip_Memory+0xfbff0200>
    		button_pressed = 1;
 400020c:	01000044 	movi	r4,1
 4000210:	003ffc06 	br	4000204 <__alt_mem_Onchip_Memory+0xfbff0204>

void button_trigger() {
    int button_pressed = 0;

    current_count = global_count;
    while(button_pressed != 0 || current_count + 10 > global_count) {
 4000214:	d0a06a17 	ldw	r2,-32344(gp)
 4000218:	10800244 	addi	r2,r2,9
 400021c:	10fff90e 	bge	r2,r3,4000204 <__alt_mem_Onchip_Memory+0xfbff0204>
    	if(IORD_ALTERA_AVALON_PIO_DATA(BUTTON_1_BASE)) {
    		button_pressed = 1;
    	}
    }

}
 4000220:	f800283a 	ret

04000224 <init_question_gameplay>:
    // Add players into teams (backend should do this)
    // end program message
    printf ("Setup Complete \n");
}

void init_question_gameplay() {
 4000224:	defffe04 	addi	sp,sp,-8
 4000228:	dc000015 	stw	r16,0(sp)
 400022c:	dfc00115 	stw	ra,4(sp)
    while(team_one_score < 1000 || team_two_score < 1000) {
 4000230:	0400f9c4 	movi	r16,999
 4000234:	d0a06d17 	ldw	r2,-32332(gp)
 4000238:	80800216 	blt	r16,r2,4000244 <init_question_gameplay+0x20>
        // Grab Question from API call
        //char text_top_row[40] = '';
        //alt_up_char_buffer_string(char_buffer, text_top_row, 20,20); // Display question
        button_trigger();
 400023c:	40001ec0 	call	40001ec <button_trigger>
 4000240:	003ffc06 	br	4000234 <__alt_mem_Onchip_Memory+0xfbff0234>
    // end program message
    printf ("Setup Complete \n");
}

void init_question_gameplay() {
    while(team_one_score < 1000 || team_two_score < 1000) {
 4000244:	d0a06c17 	ldw	r2,-32336(gp)
 4000248:	80bffc0e 	bge	r16,r2,400023c <__alt_mem_Onchip_Memory+0xfbff023c>
        // Enable Audio Reading
        // Send Audio to backend


    }
}
 400024c:	dfc00117 	ldw	ra,4(sp)
 4000250:	dc000017 	ldw	r16,0(sp)
 4000254:	dec00204 	addi	sp,sp,8
 4000258:	f800283a 	ret

0400025c <main>:
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define WHITE   0xFFFF

int main() {
 400025c:	deffff04 	addi	sp,sp,-4
 4000260:	dfc00015 	stw	ra,0(sp)
    //init_timer_interrupt();
    init_room_setup();
 4000264:	400006c0 	call	400006c <init_room_setup>

04000268 <memcpy>:
 4000268:	2005883a 	mov	r2,r4
 400026c:	2007883a 	mov	r3,r4
 4000270:	218d883a 	add	r6,r4,r6
 4000274:	19800526 	beq	r3,r6,400028c <memcpy+0x24>
 4000278:	29000003 	ldbu	r4,0(r5)
 400027c:	18c00044 	addi	r3,r3,1
 4000280:	29400044 	addi	r5,r5,1
 4000284:	193fffc5 	stb	r4,-1(r3)
 4000288:	003ffa06 	br	4000274 <__alt_mem_Onchip_Memory+0xfbff0274>
 400028c:	f800283a 	ret

04000290 <memset>:
 4000290:	2005883a 	mov	r2,r4
 4000294:	2007883a 	mov	r3,r4
 4000298:	218d883a 	add	r6,r4,r6
 400029c:	19800326 	beq	r3,r6,40002ac <memset+0x1c>
 40002a0:	19400005 	stb	r5,0(r3)
 40002a4:	18c00044 	addi	r3,r3,1
 40002a8:	003ffc06 	br	400029c <__alt_mem_Onchip_Memory+0xfbff029c>
 40002ac:	f800283a 	ret

040002b0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40002b0:	deffff04 	addi	sp,sp,-4
 40002b4:	01010034 	movhi	r4,1024
 40002b8:	01410034 	movhi	r5,1024
 40002bc:	dfc00015 	stw	ra,0(sp)
 40002c0:	2104d204 	addi	r4,r4,4936
 40002c4:	29453404 	addi	r5,r5,5328

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 40002c8:	2140061e 	bne	r4,r5,40002e4 <alt_load+0x34>
 40002cc:	01010034 	movhi	r4,1024
 40002d0:	01410034 	movhi	r5,1024
 40002d4:	21000804 	addi	r4,r4,32
 40002d8:	29400804 	addi	r5,r5,32
 40002dc:	2140121e 	bne	r4,r5,4000328 <alt_load+0x78>
 40002e0:	00000b06 	br	4000310 <alt_load+0x60>
 40002e4:	00c10034 	movhi	r3,1024
 40002e8:	18c53404 	addi	r3,r3,5328
 40002ec:	1907c83a 	sub	r3,r3,r4
 40002f0:	0005883a 	mov	r2,zero
  {
    while( to != end )
 40002f4:	10fff526 	beq	r2,r3,40002cc <__alt_mem_Onchip_Memory+0xfbff02cc>
    {
      *to++ = *from++;
 40002f8:	114f883a 	add	r7,r2,r5
 40002fc:	39c00017 	ldw	r7,0(r7)
 4000300:	110d883a 	add	r6,r2,r4
 4000304:	10800104 	addi	r2,r2,4
 4000308:	31c00015 	stw	r7,0(r6)
 400030c:	003ff906 	br	40002f4 <__alt_mem_Onchip_Memory+0xfbff02f4>
 4000310:	01010034 	movhi	r4,1024
 4000314:	01410034 	movhi	r5,1024
 4000318:	21046f04 	addi	r4,r4,4540
 400031c:	29446f04 	addi	r5,r5,4540

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4000320:	2140101e 	bne	r4,r5,4000364 <alt_load+0xb4>
 4000324:	00000b06 	br	4000354 <alt_load+0xa4>
 4000328:	00c10034 	movhi	r3,1024
 400032c:	18c00804 	addi	r3,r3,32
 4000330:	1907c83a 	sub	r3,r3,r4
 4000334:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4000338:	10fff526 	beq	r2,r3,4000310 <__alt_mem_Onchip_Memory+0xfbff0310>
    {
      *to++ = *from++;
 400033c:	114f883a 	add	r7,r2,r5
 4000340:	39c00017 	ldw	r7,0(r7)
 4000344:	110d883a 	add	r6,r2,r4
 4000348:	10800104 	addi	r2,r2,4
 400034c:	31c00015 	stw	r7,0(r6)
 4000350:	003ff906 	br	4000338 <__alt_mem_Onchip_Memory+0xfbff0338>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4000354:	4000fec0 	call	4000fec <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 4000358:	dfc00017 	ldw	ra,0(sp)
 400035c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 4000360:	40010ec1 	jmpi	40010ec <alt_icache_flush_all>
 4000364:	00c10034 	movhi	r3,1024
 4000368:	18c4d204 	addi	r3,r3,4936
 400036c:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4000370:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4000374:	18bff726 	beq	r3,r2,4000354 <__alt_mem_Onchip_Memory+0xfbff0354>
    {
      *to++ = *from++;
 4000378:	114f883a 	add	r7,r2,r5
 400037c:	39c00017 	ldw	r7,0(r7)
 4000380:	110d883a 	add	r6,r2,r4
 4000384:	10800104 	addi	r2,r2,4
 4000388:	31c00015 	stw	r7,0(r6)
 400038c:	003ff906 	br	4000374 <__alt_mem_Onchip_Memory+0xfbff0374>

04000390 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4000390:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4000394:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4000398:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400039c:	40003fc0 	call	40003fc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40003a0:	400041c0 	call	400041c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 40003a4:	d1a07017 	ldw	r6,-32320(gp)
 40003a8:	d1607117 	ldw	r5,-32316(gp)
 40003ac:	d1207217 	ldw	r4,-32312(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 40003b0:	dfc00017 	ldw	ra,0(sp)
 40003b4:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 40003b8:	400025c1 	jmpi	400025c <main>

040003bc <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 40003bc:	defffe04 	addi	sp,sp,-8
 40003c0:	dc000015 	stw	r16,0(sp)
 40003c4:	dfc00115 	stw	ra,4(sp)
 40003c8:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 40003cc:	40011a00 	call	40011a0 <strlen>
 40003d0:	01010034 	movhi	r4,1024
 40003d4:	000f883a 	mov	r7,zero
 40003d8:	100d883a 	mov	r6,r2
 40003dc:	800b883a 	mov	r5,r16
 40003e0:	21052d04 	addi	r4,r4,5300
#else
    return fputs(str, stdout);
#endif
#endif
}
 40003e4:	dfc00117 	ldw	ra,4(sp)
 40003e8:	dc000017 	ldw	r16,0(sp)
 40003ec:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 40003f0:	40005c81 	jmpi	40005c8 <altera_avalon_jtag_uart_write>

040003f4 <alt_dev_reg>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 40003f4:	d1600304 	addi	r5,gp,-32756
 40003f8:	400100c1 	jmpi	400100c <alt_dev_llist_insert>

040003fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 40003fc:	deffff04 	addi	sp,sp,-4
 4000400:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
 4000404:	40010f80 	call	40010f8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4000408:	00800044 	movi	r2,1
 400040c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4000410:	dfc00017 	ldw	ra,0(sp)
 4000414:	dec00104 	addi	sp,sp,4
 4000418:	f800283a 	ret

0400041c <alt_sys_init>:
void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
 400041c:	01010034 	movhi	r4,1024
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4000420:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
 4000424:	21050a04 	addi	r4,r4,5160
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4000428:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
 400042c:	40003f40 	call	40003f4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_BUFFER, Char_Buffer);
 4000430:	00810034 	movhi	r2,1024
 4000434:	1084f804 	addi	r2,r2,5088
 4000438:	10c00a17 	ldw	r3,40(r2)
 400043c:	01401004 	movi	r5,64
 4000440:	18c00117 	ldw	r3,4(r3)
 4000444:	193fffcc 	andi	r4,r3,65535
 4000448:	1806d43a 	srli	r3,r3,16
 400044c:	11000c15 	stw	r4,48(r2)
 4000450:	10c00d15 	stw	r3,52(r2)
 4000454:	29000436 	bltu	r5,r4,4000468 <alt_sys_init+0x4c>
 4000458:	01000fc4 	movi	r4,63
 400045c:	11000f15 	stw	r4,60(r2)
 4000460:	01000184 	movi	r4,6
 4000464:	11001015 	stw	r4,64(r2)
 4000468:	01000804 	movi	r4,32
 400046c:	20c00236 	bltu	r4,r3,4000478 <alt_sys_init+0x5c>
 4000470:	00c007c4 	movi	r3,31
 4000474:	10c01115 	stw	r3,68(r2)
 4000478:	01010034 	movhi	r4,1024
 400047c:	2104f804 	addi	r4,r4,5088
 4000480:	40005fc0 	call	40005fc <alt_up_char_buffer_init>
 4000484:	01010034 	movhi	r4,1024
 4000488:	2104f804 	addi	r4,r4,5088
 400048c:	40003f40 	call	40003f4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER, Pixel_Buffer);
 4000490:	00810034 	movhi	r2,1024
 4000494:	1084e304 	addi	r2,r2,5004
 4000498:	10c00a17 	ldw	r3,40(r2)
 400049c:	01c00044 	movi	r7,1
 40004a0:	19000017 	ldw	r4,0(r3)
 40004a4:	11000b15 	stw	r4,44(r2)
 40004a8:	19000117 	ldw	r4,4(r3)
 40004ac:	11000c15 	stw	r4,48(r2)
 40004b0:	19000204 	addi	r4,r3,8
 40004b4:	2140000b 	ldhu	r5,0(r4)
 40004b8:	18c00304 	addi	r3,r3,12
 40004bc:	11400f15 	stw	r5,60(r2)
 40004c0:	21000017 	ldw	r4,0(r4)
 40004c4:	2008d43a 	srli	r4,r4,16
 40004c8:	11001015 	stw	r4,64(r2)
 40004cc:	19000017 	ldw	r4,0(r3)
 40004d0:	2009d07a 	srai	r4,r4,1
 40004d4:	2100004c 	andi	r4,r4,1
 40004d8:	11000d15 	stw	r4,52(r2)
 40004dc:	19000017 	ldw	r4,0(r3)
 40004e0:	2009d13a 	srai	r4,r4,4
 40004e4:	210003cc 	andi	r4,r4,15
 40004e8:	11000e15 	stw	r4,56(r2)
 40004ec:	19400017 	ldw	r5,0(r3)
 40004f0:	2807d43a 	srai	r3,r5,16
 40004f4:	280cd63a 	srli	r6,r5,24
 40004f8:	21c0021e 	bne	r4,r7,4000504 <alt_sys_init+0xe8>
 40004fc:	10001115 	stw	zero,68(r2)
 4000500:	00000506 	br	4000518 <alt_sys_init+0xfc>
 4000504:	01400084 	movi	r5,2
 4000508:	2140021e 	bne	r4,r5,4000514 <alt_sys_init+0xf8>
 400050c:	11c01115 	stw	r7,68(r2)
 4000510:	00000106 	br	4000518 <alt_sys_init+0xfc>
 4000514:	11401115 	stw	r5,68(r2)
 4000518:	18c03fcc 	andi	r3,r3,255
 400051c:	01400804 	movi	r5,32
 4000520:	28cfc83a 	sub	r7,r5,r3
 4000524:	013fffc4 	movi	r4,-1
 4000528:	21ced83a 	srl	r7,r4,r7
 400052c:	298bc83a 	sub	r5,r5,r6
 4000530:	2148d83a 	srl	r4,r4,r5
 4000534:	11c01215 	stw	r7,72(r2)
 4000538:	11c01117 	ldw	r7,68(r2)
 400053c:	11001415 	stw	r4,80(r2)
 4000540:	01010034 	movhi	r4,1024
 4000544:	38c7883a 	add	r3,r7,r3
 4000548:	2104e304 	addi	r4,r4,5004
 400054c:	10c01315 	stw	r3,76(r2)
 4000550:	40003f40 	call	40003f4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( RGB_RESAMPLER, RGB_Resampler);
 4000554:	01010034 	movhi	r4,1024
 4000558:	2104d204 	addi	r4,r4,4936
 400055c:	20800a17 	ldw	r2,40(r4)
 4000560:	10c00017 	ldw	r3,0(r2)
 4000564:	18c003cc 	andi	r3,r3,15
 4000568:	20c00b15 	stw	r3,44(r4)
 400056c:	10c00017 	ldw	r3,0(r2)
 4000570:	1807d13a 	srai	r3,r3,4
 4000574:	18c0004c 	andi	r3,r3,1
 4000578:	20c00c15 	stw	r3,48(r4)
 400057c:	10c00017 	ldw	r3,0(r2)
 4000580:	1807d17a 	srai	r3,r3,5
 4000584:	18c0004c 	andi	r3,r3,1
 4000588:	20c00d15 	stw	r3,52(r4)
 400058c:	10c00017 	ldw	r3,0(r2)
 4000590:	1807d43a 	srai	r3,r3,16
 4000594:	18c003cc 	andi	r3,r3,15
 4000598:	20c00e15 	stw	r3,56(r4)
 400059c:	10c00017 	ldw	r3,0(r2)
 40005a0:	1807d53a 	srai	r3,r3,20
 40005a4:	18c0004c 	andi	r3,r3,1
 40005a8:	20c00f15 	stw	r3,60(r4)
 40005ac:	10800017 	ldw	r2,0(r2)
 40005b0:	1005d57a 	srai	r2,r2,21
 40005b4:	1080004c 	andi	r2,r2,1
 40005b8:	20801015 	stw	r2,64(r4)
}
 40005bc:	dfc00017 	ldw	ra,0(sp)
 40005c0:	dec00104 	addi	sp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_BUFFER, Char_Buffer);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER, Pixel_Buffer);
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( RGB_RESAMPLER, RGB_Resampler);
 40005c4:	40003f41 	jmpi	40003f4 <alt_dev_reg>

040005c8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 40005c8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40005cc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 40005d0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 40005d4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 40005d8:	2980072e 	bgeu	r5,r6,40005f8 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 40005dc:	38c00037 	ldwio	r3,0(r7)
 40005e0:	18ffffec 	andhi	r3,r3,65535
 40005e4:	183ffc26 	beq	r3,zero,40005d8 <__alt_mem_Onchip_Memory+0xfbff05d8>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 40005e8:	28c00007 	ldb	r3,0(r5)
 40005ec:	20c00035 	stwio	r3,0(r4)
 40005f0:	29400044 	addi	r5,r5,1
 40005f4:	003ff806 	br	40005d8 <__alt_mem_Onchip_Memory+0xfbff05d8>

  return count;
}
 40005f8:	f800283a 	ret

040005fc <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 40005fc:	defffe04 	addi	sp,sp,-8
 4000600:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
 4000604:	24000217 	ldw	r16,8(r4)
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 4000608:	dfc00115 	stw	ra,4(sp)
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 400060c:	80800007 	ldb	r2,0(r16)
 4000610:	10000926 	beq	r2,zero,4000638 <alt_up_char_buffer_init+0x3c>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 4000614:	01410034 	movhi	r5,1024
 4000618:	2944c504 	addi	r5,r5,4884
 400061c:	8009883a 	mov	r4,r16
 4000620:	40011680 	call	4001168 <strcmp>
 4000624:	1000021e 	bne	r2,zero,4000630 <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
 4000628:	80000005 	stb	zero,0(r16)
			break;
 400062c:	00000206 	br	4000638 <alt_up_char_buffer_init+0x3c>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 4000630:	84000044 	addi	r16,r16,1
 4000634:	003ff506 	br	400060c <__alt_mem_Onchip_Memory+0xfbff060c>
			break;
		}
	}
	
	return;
}
 4000638:	dfc00117 	ldw	ra,4(sp)
 400063c:	dc000017 	ldw	r16,0(sp)
 4000640:	dec00204 	addi	sp,sp,8
 4000644:	f800283a 	ret

04000648 <alt_up_char_buffer_open_dev>:
alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 4000648:	d1600304 	addi	r5,gp,-32756
 400064c:	40010781 	jmpi	4001078 <alt_find_dev>

04000650 <alt_up_char_buffer_draw>:
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 4000650:	20800c17 	ldw	r2,48(r4)
 4000654:	3080102e 	bgeu	r6,r2,4000698 <alt_up_char_buffer_draw+0x48>
 4000658:	20800d17 	ldw	r2,52(r4)
 400065c:	38800e2e 	bgeu	r7,r2,4000698 <alt_up_char_buffer_draw+0x48>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 4000660:	20800f17 	ldw	r2,60(r4)
 4000664:	3084703a 	and	r2,r6,r2
 4000668:	21800e17 	ldw	r6,56(r4)
 400066c:	1186983a 	sll	r3,r2,r6
 4000670:	20801117 	ldw	r2,68(r4)
 4000674:	21801017 	ldw	r6,64(r4)
 4000678:	388e703a 	and	r7,r7,r2
 400067c:	398e983a 	sll	r7,r7,r6
 4000680:	20800b17 	ldw	r2,44(r4)
 4000684:	19ccb03a 	or	r6,r3,r7
 4000688:	308d883a 	add	r6,r6,r2
 400068c:	31400025 	stbio	r5,0(r6)

	return 0;
 4000690:	0005883a 	mov	r2,zero
 4000694:	f800283a 	ret

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
 4000698:	00bfffc4 	movi	r2,-1
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);

	return 0;
}
 400069c:	f800283a 	ret

040006a0 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 40006a0:	20800c17 	ldw	r2,48(r4)
 40006a4:	30800236 	bltu	r6,r2,40006b0 <alt_up_char_buffer_string+0x10>
		return -1;
 40006a8:	00bfffc4 	movi	r2,-1
 40006ac:	f800283a 	ret
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 40006b0:	20800d17 	ldw	r2,52(r4)
 40006b4:	38bffc2e 	bgeu	r7,r2,40006a8 <__alt_mem_Onchip_Memory+0xfbff06a8>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
 40006b8:	20801017 	ldw	r2,64(r4)
 40006bc:	388e983a 	sll	r7,r7,r2
 40006c0:	398f883a 	add	r7,r7,r6
 40006c4:	394fc83a 	sub	r7,r7,r5

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
 40006c8:	314dc83a 	sub	r6,r6,r5
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 40006cc:	28c00003 	ldbu	r3,0(r5)
 40006d0:	29d3883a 	add	r9,r5,r7
 40006d4:	1a003fcc 	andi	r8,r3,255
 40006d8:	4200201c 	xori	r8,r8,128
 40006dc:	423fe004 	addi	r8,r8,-128
 40006e0:	40000826 	beq	r8,zero,4000704 <alt_up_char_buffer_string+0x64>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 40006e4:	20800b17 	ldw	r2,44(r4)
 40006e8:	4885883a 	add	r2,r9,r2
 40006ec:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
 40006f0:	20800c17 	ldw	r2,48(r4)
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
 40006f4:	29400044 	addi	r5,r5,1
		if (++x >= char_buffer->x_resolution)
 40006f8:	2987883a 	add	r3,r5,r6
 40006fc:	18bff336 	bltu	r3,r2,40006cc <__alt_mem_Onchip_Memory+0xfbff06cc>
 4000700:	003fe906 	br	40006a8 <__alt_mem_Onchip_Memory+0xfbff06a8>
			return -1;
		++offset;
	}
	return 0;
 4000704:	0005883a 	mov	r2,zero
}
 4000708:	f800283a 	ret

0400070c <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 400070c:	20800a17 	ldw	r2,40(r4)
 4000710:	00c00044 	movi	r3,1
 4000714:	10c000a5 	stbio	r3,2(r2)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 4000718:	20800a17 	ldw	r2,40(r4)
 400071c:	108000a3 	ldbuio	r2,2(r2)
 4000720:	1080004c 	andi	r2,r2,1
 4000724:	103ffc1e 	bne	r2,zero,4000718 <__alt_mem_Onchip_Memory+0xfbff0718>
	return 0;
}
 4000728:	f800283a 	ret

0400072c <alt_up_pixel_buffer_dma_open_dev>:
alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 400072c:	d1600304 	addi	r5,gp,-32756
 4000730:	40010781 	jmpi	4001078 <alt_find_dev>

04000734 <alt_up_pixel_buffer_dma_draw>:
int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 4000734:	20800f17 	ldw	r2,60(r4)
 4000738:	3080222e 	bgeu	r6,r2,40007c4 <alt_up_pixel_buffer_dma_draw+0x90>
 400073c:	20c01017 	ldw	r3,64(r4)
 4000740:	38c0202e 	bgeu	r7,r3,40007c4 <alt_up_pixel_buffer_dma_draw+0x90>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4000744:	22800d17 	ldw	r10,52(r4)
 4000748:	22001217 	ldw	r8,72(r4)
 400074c:	22401117 	ldw	r9,68(r4)
 4000750:	20c01417 	ldw	r3,80(r4)
 4000754:	5000071e 	bne	r10,zero,4000774 <alt_up_pixel_buffer_dma_draw+0x40>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 4000758:	3210703a 	and	r8,r6,r8
 400075c:	21801317 	ldw	r6,76(r4)
 4000760:	38c6703a 	and	r3,r7,r3
 4000764:	4250983a 	sll	r8,r8,r9
 4000768:	1986983a 	sll	r3,r3,r6
 400076c:	40cd883a 	add	r6,r8,r3
 4000770:	00000506 	br	4000788 <alt_up_pixel_buffer_dma_draw+0x54>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 4000774:	38c6703a 	and	r3,r7,r3
 4000778:	1885383a 	mul	r2,r3,r2
 400077c:	3210703a 	and	r8,r6,r8
 4000780:	4085883a 	add	r2,r8,r2
 4000784:	124c983a 	sll	r6,r2,r9
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4000788:	20c00e17 	ldw	r3,56(r4)
 400078c:	20800c17 	ldw	r2,48(r4)
 4000790:	01000044 	movi	r4,1
 4000794:	1900031e 	bne	r3,r4,40007a4 <alt_up_pixel_buffer_dma_draw+0x70>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 4000798:	308d883a 	add	r6,r6,r2
 400079c:	31400025 	stbio	r5,0(r6)
 40007a0:	00000606 	br	40007bc <alt_up_pixel_buffer_dma_draw+0x88>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 40007a4:	01000084 	movi	r4,2
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 40007a8:	308d883a 	add	r6,r6,r2
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 40007ac:	1900021e 	bne	r3,r4,40007b8 <alt_up_pixel_buffer_dma_draw+0x84>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 40007b0:	3140002d 	sthio	r5,0(r6)
 40007b4:	00000106 	br	40007bc <alt_up_pixel_buffer_dma_draw+0x88>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 40007b8:	31400035 	stwio	r5,0(r6)
	}

	return 0;
 40007bc:	0005883a 	mov	r2,zero
 40007c0:	f800283a 	ret
/* This function draws a pixel to the back buffer.
 */
{
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
		return -1;
 40007c4:	00bfffc4 	movi	r2,-1
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	}

	return 0;
}
 40007c8:	f800283a 	ret

040007cc <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 40007cc:	20800a17 	ldw	r2,40(r4)
 40007d0:	11400135 	stwio	r5,4(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 40007d4:	20800a17 	ldw	r2,40(r4)
 40007d8:	10800137 	ldwio	r2,4(r2)
 40007dc:	20800c15 	stw	r2,48(r4)
	return 0;
}
 40007e0:	0005883a 	mov	r2,zero
 40007e4:	f800283a 	ret

040007e8 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 40007e8:	20800c17 	ldw	r2,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 40007ec:	20c00a17 	ldw	r3,40(r4)
 40007f0:	01400044 	movi	r5,1
 40007f4:	19400035 	stwio	r5,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 40007f8:	20c00b17 	ldw	r3,44(r4)
	pixel_buffer->buffer_start_address = temp;
 40007fc:	20800b15 	stw	r2,44(r4)
	return 0;
}
 4000800:	0005883a 	mov	r2,zero
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 4000804:	20c00c15 	stw	r3,48(r4)
	pixel_buffer->buffer_start_address = temp;
	return 0;
}
 4000808:	f800283a 	ret

0400080c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 400080c:	20800a17 	ldw	r2,40(r4)
 4000810:	10800337 	ldwio	r2,12(r2)
}
 4000814:	1080004c 	andi	r2,r2,1
 4000818:	f800283a 	ret

0400081c <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 400081c:	00800044 	movi	r2,1
 4000820:	2880021e 	bne	r5,r2,400082c <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
 4000824:	20c00c17 	ldw	r3,48(r4)
 4000828:	00000106 	br	4000830 <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
 400082c:	20c00b17 	ldw	r3,44(r4)
	limit_x = pixel_buffer->x_resolution;
 4000830:	20800f17 	ldw	r2,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4000834:	21800e17 	ldw	r6,56(r4)
 4000838:	01400084 	movi	r5,2
 400083c:	1085883a 	add	r2,r2,r2
 4000840:	31400126 	beq	r6,r5,4000848 <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
	} else {
		limit_x = limit_x << 2;
 4000844:	1085883a 	add	r2,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4000848:	21800d17 	ldw	r6,52(r4)
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		limit_x = limit_x << 1;
	} else {
		limit_x = limit_x << 2;
	}	
	limit_y = pixel_buffer->y_resolution;
 400084c:	21401017 	ldw	r5,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4000850:	30000e1e 	bne	r6,zero,400088c <alt_up_pixel_buffer_dma_clear_screen+0x70>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 4000854:	21c01317 	ldw	r7,76(r4)
 4000858:	01000044 	movi	r4,1
 400085c:	21ce983a 	sll	r7,r4,r7
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 4000860:	31400926 	beq	r6,r5,4000888 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
 4000864:	1809883a 	mov	r4,r3
		{
			for (x = 0; x < limit_x; x = x + 4)
 4000868:	20d1c83a 	sub	r8,r4,r3
 400086c:	4080032e 	bgeu	r8,r2,400087c <alt_up_pixel_buffer_dma_clear_screen+0x60>
			{
				IOWR_32DIRECT(addr, x, 0);
 4000870:	20000035 	stwio	zero,0(r4)
 4000874:	21000104 	addi	r4,r4,4
 4000878:	003ffb06 	br	4000868 <__alt_mem_Onchip_Memory+0xfbff0868>
			}
			addr = addr + (1 << offset_y);
 400087c:	19c7883a 	add	r3,r3,r7
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 4000880:	31800044 	addi	r6,r6,1
 4000884:	003ff606 	br	4000860 <__alt_mem_Onchip_Memory+0xfbff0860>
 4000888:	f800283a 	ret
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 400088c:	1145383a 	mul	r2,r2,r5

		for (x = 0; x < limit_y; x = x + 4)
 4000890:	1809883a 	mov	r4,r3
 4000894:	20cbc83a 	sub	r5,r4,r3
 4000898:	2880032e 	bgeu	r5,r2,40008a8 <alt_up_pixel_buffer_dma_clear_screen+0x8c>
		{
			IOWR_32DIRECT(addr, x, 0);
 400089c:	20000035 	stwio	zero,0(r4)
 40008a0:	21000104 	addi	r4,r4,4
 40008a4:	003ffb06 	br	4000894 <__alt_mem_Onchip_Memory+0xfbff0894>
 40008a8:	f800283a 	ret

040008ac <alt_up_pixel_buffer_dma_draw_box>:
	}
}

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 40008ac:	d8800017 	ldw	r2,0(sp)
 40008b0:	db000117 	ldw	r12,4(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 40008b4:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
 40008b8:	2815883a 	mov	r10,r5
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
 40008bc:	3011883a 	mov	r8,r6
	register unsigned int b_y = y1;
 40008c0:	1017883a 	mov	r11,r2
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
 40008c4:	3940022e 	bgeu	r7,r5,40008d0 <alt_up_pixel_buffer_dma_draw_box+0x24>
 40008c8:	3815883a 	mov	r10,r7
 40008cc:	280f883a 	mov	r7,r5
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
 40008d0:	1180022e 	bgeu	r2,r6,40008dc <alt_up_pixel_buffer_dma_draw_box+0x30>
 40008d4:	1011883a 	mov	r8,r2
 40008d8:	3017883a 	mov	r11,r6
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 40008dc:	5240642e 	bgeu	r10,r9,4000a70 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
 40008e0:	20801017 	ldw	r2,64(r4)
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 40008e4:	4080622e 	bgeu	r8,r2,4000a70 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 40008e8:	3a400136 	bltu	r7,r9,40008f0 <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		r_x = limit_x - 1;
 40008ec:	49ffffc4 	addi	r7,r9,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 40008f0:	58800136 	bltu	r11,r2,40008f8 <alt_up_pixel_buffer_dma_draw_box+0x4c>
	{
		b_y = limit_y - 1;
 40008f4:	12ffffc4 	addi	r11,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 40008f8:	d8800217 	ldw	r2,8(sp)
 40008fc:	01400044 	movi	r5,1
 4000900:	1140021e 	bne	r2,r5,400090c <alt_up_pixel_buffer_dma_draw_box+0x60>
		addr = pixel_buffer->back_buffer_start_address;
 4000904:	20c00c17 	ldw	r3,48(r4)
 4000908:	00000106 	br	4000910 <alt_up_pixel_buffer_dma_draw_box+0x64>
	else
		addr = pixel_buffer->buffer_start_address;
 400090c:	20c00b17 	ldw	r3,44(r4)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4000910:	20800d17 	ldw	r2,52(r4)
 4000914:	21800e17 	ldw	r6,56(r4)
 4000918:	1000291e 	bne	r2,zero,40009c0 <alt_up_pixel_buffer_dma_draw_box+0x114>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 400091c:	21001317 	ldw	r4,76(r4)
		addr = addr + (t_y << offset_y);
 4000920:	4104983a 	sll	r2,r8,r4
 4000924:	10c5883a 	add	r2,r2,r3
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4000928:	31400b1e 	bne	r6,r5,4000958 <alt_up_pixel_buffer_dma_draw_box+0xac>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 400092c:	290a983a 	sll	r5,r5,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4000930:	5a004f36 	bltu	r11,r8,4000a70 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
 4000934:	5007883a 	mov	r3,r10
			{
				for (x = l_x; x <= r_x; x++)
 4000938:	38c00436 	bltu	r7,r3,400094c <alt_up_pixel_buffer_dma_draw_box+0xa0>
				{
					IOWR_8DIRECT(addr, x, local_color);
 400093c:	10c9883a 	add	r4,r2,r3
 4000940:	23000025 	stbio	r12,0(r4)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4000944:	18c00044 	addi	r3,r3,1
 4000948:	003ffb06 	br	4000938 <__alt_mem_Onchip_Memory+0xfbff0938>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 400094c:	1145883a 	add	r2,r2,r5
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4000950:	42000044 	addi	r8,r8,1
 4000954:	003ff606 	br	4000930 <__alt_mem_Onchip_Memory+0xfbff0930>
 4000958:	00c00044 	movi	r3,1
 400095c:	190a983a 	sll	r5,r3,r4
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4000960:	00c00084 	movi	r3,2
 4000964:	30c00d1e 	bne	r6,r3,400099c <alt_up_pixel_buffer_dma_draw_box+0xf0>
			for (y = t_y; y <= b_y; y++)
 4000968:	5a004136 	bltu	r11,r8,4000a70 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
 400096c:	5007883a 	mov	r3,r10
			{
				for (x = l_x; x <= r_x; x++)
 4000970:	38c00536 	bltu	r7,r3,4000988 <alt_up_pixel_buffer_dma_draw_box+0xdc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 4000974:	18c9883a 	add	r4,r3,r3
 4000978:	2089883a 	add	r4,r4,r2
 400097c:	2300002d 	sthio	r12,0(r4)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4000980:	18c00044 	addi	r3,r3,1
 4000984:	003ffa06 	br	4000970 <__alt_mem_Onchip_Memory+0xfbff0970>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 4000988:	1145883a 	add	r2,r2,r5
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 400098c:	42000044 	addi	r8,r8,1
 4000990:	003ff506 	br	4000968 <__alt_mem_Onchip_Memory+0xfbff0968>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 4000994:	1145883a 	add	r2,r2,r5
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4000998:	42000044 	addi	r8,r8,1
 400099c:	5a003436 	bltu	r11,r8,4000a70 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
 40009a0:	5009883a 	mov	r4,r10
			{
				for (x = l_x; x <= r_x; x++)
 40009a4:	393ffb36 	bltu	r7,r4,4000994 <__alt_mem_Onchip_Memory+0xfbff0994>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 40009a8:	2107883a 	add	r3,r4,r4
 40009ac:	18c7883a 	add	r3,r3,r3
 40009b0:	1887883a 	add	r3,r3,r2
 40009b4:	1b000035 	stwio	r12,0(r3)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 40009b8:	21000044 	addi	r4,r4,1
 40009bc:	003ff906 	br	40009a4 <__alt_mem_Onchip_Memory+0xfbff09a4>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 40009c0:	31400c1e 	bne	r6,r5,40009f4 <alt_up_pixel_buffer_dma_draw_box+0x148>
			addr = addr + t_y * limit_x;
 40009c4:	4245383a 	mul	r2,r8,r9
 40009c8:	10c5883a 	add	r2,r2,r3
			for (y = t_y; y <= b_y; y++)
 40009cc:	5a002836 	bltu	r11,r8,4000a70 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
 40009d0:	5007883a 	mov	r3,r10
			{
				for (x = l_x; x <= r_x; x++)
 40009d4:	38c00436 	bltu	r7,r3,40009e8 <alt_up_pixel_buffer_dma_draw_box+0x13c>
				{
					IOWR_8DIRECT(addr, x, local_color);
 40009d8:	10c9883a 	add	r4,r2,r3
 40009dc:	23000025 	stbio	r12,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 40009e0:	18c00044 	addi	r3,r3,1
 40009e4:	003ffb06 	br	40009d4 <__alt_mem_Onchip_Memory+0xfbff09d4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 40009e8:	1245883a 	add	r2,r2,r9
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 40009ec:	42000044 	addi	r8,r8,1
 40009f0:	003ff606 	br	40009cc <__alt_mem_Onchip_Memory+0xfbff09cc>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 40009f4:	00800084 	movi	r2,2
 40009f8:	4a53883a 	add	r9,r9,r9
 40009fc:	30800d1e 	bne	r6,r2,4000a34 <alt_up_pixel_buffer_dma_draw_box+0x188>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
 4000a00:	4245383a 	mul	r2,r8,r9
 4000a04:	10c5883a 	add	r2,r2,r3
			for (y = t_y; y <= b_y; y++)
 4000a08:	5a001936 	bltu	r11,r8,4000a70 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
 4000a0c:	5007883a 	mov	r3,r10
			{
				for (x = l_x; x <= r_x; x++)
 4000a10:	38c00536 	bltu	r7,r3,4000a28 <alt_up_pixel_buffer_dma_draw_box+0x17c>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 4000a14:	18c9883a 	add	r4,r3,r3
 4000a18:	2089883a 	add	r4,r4,r2
 4000a1c:	2300002d 	sthio	r12,0(r4)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4000a20:	18c00044 	addi	r3,r3,1
 4000a24:	003ffa06 	br	4000a10 <__alt_mem_Onchip_Memory+0xfbff0a10>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 4000a28:	1245883a 	add	r2,r2,r9
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4000a2c:	42000044 	addi	r8,r8,1
 4000a30:	003ff506 	br	4000a08 <__alt_mem_Onchip_Memory+0xfbff0a08>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 4000a34:	4a53883a 	add	r9,r9,r9
			addr = addr + t_y * limit_x;
 4000a38:	4245383a 	mul	r2,r8,r9
 4000a3c:	10c5883a 	add	r2,r2,r3
			for (y = t_y; y <= b_y; y++)
 4000a40:	5a000b36 	bltu	r11,r8,4000a70 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
 4000a44:	5009883a 	mov	r4,r10
			{
				for (x = l_x; x <= r_x; x++)
 4000a48:	39000636 	bltu	r7,r4,4000a64 <alt_up_pixel_buffer_dma_draw_box+0x1b8>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 4000a4c:	2107883a 	add	r3,r4,r4
 4000a50:	18c7883a 	add	r3,r3,r3
 4000a54:	1887883a 	add	r3,r3,r2
 4000a58:	1b000035 	stwio	r12,0(r3)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4000a5c:	21000044 	addi	r4,r4,1
 4000a60:	003ff906 	br	4000a48 <__alt_mem_Onchip_Memory+0xfbff0a48>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 4000a64:	1245883a 	add	r2,r2,r9
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4000a68:	42000044 	addi	r8,r8,1
 4000a6c:	003ff406 	br	4000a40 <__alt_mem_Onchip_Memory+0xfbff0a40>
 4000a70:	f800283a 	ret

04000a74 <alt_up_pixel_buffer_dma_draw_hline>:
	}
}

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 4000a74:	da400017 	ldw	r9,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 4000a78:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
 4000a7c:	2805883a 	mov	r2,r5
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
 4000a80:	3140022e 	bgeu	r6,r5,4000a8c <alt_up_pixel_buffer_dma_draw_hline+0x18>
 4000a84:	3005883a 	mov	r2,r6
 4000a88:	280d883a 	mov	r6,r5
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 4000a8c:	1200472e 	bgeu	r2,r8,4000bac <alt_up_pixel_buffer_dma_draw_hline+0x138>
 4000a90:	20c01017 	ldw	r3,64(r4)
 4000a94:	38c0452e 	bgeu	r7,r3,4000bac <alt_up_pixel_buffer_dma_draw_hline+0x138>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 4000a98:	32000136 	bltu	r6,r8,4000aa0 <alt_up_pixel_buffer_dma_draw_hline+0x2c>
	{
		r_x = limit_x - 1;
 4000a9c:	41bfffc4 	addi	r6,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4000aa0:	d8c00117 	ldw	r3,4(sp)
 4000aa4:	02800044 	movi	r10,1
 4000aa8:	1a80021e 	bne	r3,r10,4000ab4 <alt_up_pixel_buffer_dma_draw_hline+0x40>
		addr = pixel_buffer->back_buffer_start_address;
 4000aac:	20c00c17 	ldw	r3,48(r4)
 4000ab0:	00000106 	br	4000ab8 <alt_up_pixel_buffer_dma_draw_hline+0x44>
	else
		addr = pixel_buffer->buffer_start_address;
 4000ab4:	20c00b17 	ldw	r3,44(r4)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4000ab8:	22c00d17 	ldw	r11,52(r4)
 4000abc:	21400e17 	ldw	r5,56(r4)
 4000ac0:	58001b1e 	bne	r11,zero,4000b30 <alt_up_pixel_buffer_dma_draw_hline+0xbc>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
 4000ac4:	21001317 	ldw	r4,76(r4)
 4000ac8:	390e983a 	sll	r7,r7,r4
 4000acc:	38c7883a 	add	r3,r7,r3
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4000ad0:	2a80061e 	bne	r5,r10,4000aec <alt_up_pixel_buffer_dma_draw_hline+0x78>
			for (x = l_x; x <= r_x; x++)
 4000ad4:	30800436 	bltu	r6,r2,4000ae8 <alt_up_pixel_buffer_dma_draw_hline+0x74>
			{
				IOWR_8DIRECT(addr, x, local_color);
 4000ad8:	10c9883a 	add	r4,r2,r3
 4000adc:	22400025 	stbio	r9,0(r4)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 4000ae0:	10800044 	addi	r2,r2,1
 4000ae4:	003ffb06 	br	4000ad4 <__alt_mem_Onchip_Memory+0xfbff0ad4>
 4000ae8:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4000aec:	01000084 	movi	r4,2
 4000af0:	2900071e 	bne	r5,r4,4000b10 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
			for (x = l_x; x <= r_x; x++)
 4000af4:	30800536 	bltu	r6,r2,4000b0c <alt_up_pixel_buffer_dma_draw_hline+0x98>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 4000af8:	1089883a 	add	r4,r2,r2
 4000afc:	20c9883a 	add	r4,r4,r3
 4000b00:	2240002d 	sthio	r9,0(r4)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 4000b04:	10800044 	addi	r2,r2,1
 4000b08:	003ffa06 	br	4000af4 <__alt_mem_Onchip_Memory+0xfbff0af4>
 4000b0c:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 4000b10:	30800636 	bltu	r6,r2,4000b2c <alt_up_pixel_buffer_dma_draw_hline+0xb8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 4000b14:	1089883a 	add	r4,r2,r2
 4000b18:	2109883a 	add	r4,r4,r4
 4000b1c:	20c9883a 	add	r4,r4,r3
 4000b20:	22400035 	stwio	r9,0(r4)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 4000b24:	10800044 	addi	r2,r2,1
 4000b28:	003ff906 	br	4000b10 <__alt_mem_Onchip_Memory+0xfbff0b10>
 4000b2c:	f800283a 	ret
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4000b30:	2a80081e 	bne	r5,r10,4000b54 <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			addr = addr + line_y * limit_x;
 4000b34:	41cf383a 	mul	r7,r8,r7
 4000b38:	38c7883a 	add	r3,r7,r3
			for (x = l_x; x <= r_x; x++)
 4000b3c:	30800436 	bltu	r6,r2,4000b50 <alt_up_pixel_buffer_dma_draw_hline+0xdc>
			{
				IOWR_8DIRECT(addr, x, local_color);
 4000b40:	10c9883a 	add	r4,r2,r3
 4000b44:	22400025 	stbio	r9,0(r4)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 4000b48:	10800044 	addi	r2,r2,1
 4000b4c:	003ffb06 	br	4000b3c <__alt_mem_Onchip_Memory+0xfbff0b3c>
 4000b50:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4000b54:	01000084 	movi	r4,2
 4000b58:	4211883a 	add	r8,r8,r8
 4000b5c:	2900091e 	bne	r5,r4,4000b84 <alt_up_pixel_buffer_dma_draw_hline+0x110>
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
 4000b60:	41cf383a 	mul	r7,r8,r7
 4000b64:	38c7883a 	add	r3,r7,r3
			for (x = l_x; x <= r_x; x++)
 4000b68:	30800536 	bltu	r6,r2,4000b80 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 4000b6c:	1089883a 	add	r4,r2,r2
 4000b70:	20c9883a 	add	r4,r4,r3
 4000b74:	2240002d 	sthio	r9,0(r4)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 4000b78:	10800044 	addi	r2,r2,1
 4000b7c:	003ffa06 	br	4000b68 <__alt_mem_Onchip_Memory+0xfbff0b68>
 4000b80:	f800283a 	ret
			}
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
 4000b84:	4211883a 	add	r8,r8,r8
 4000b88:	41cf383a 	mul	r7,r8,r7
 4000b8c:	38c7883a 	add	r3,r7,r3
			for (x = l_x; x <= r_x; x++)
 4000b90:	30800636 	bltu	r6,r2,4000bac <alt_up_pixel_buffer_dma_draw_hline+0x138>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 4000b94:	1089883a 	add	r4,r2,r2
 4000b98:	2109883a 	add	r4,r4,r4
 4000b9c:	20c9883a 	add	r4,r4,r3
 4000ba0:	22400035 	stwio	r9,0(r4)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 4000ba4:	10800044 	addi	r2,r2,1
 4000ba8:	003ff906 	br	4000b90 <__alt_mem_Onchip_Memory+0xfbff0b90>
 4000bac:	f800283a 	ret

04000bb0 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 4000bb0:	da800017 	ldw	r10,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 4000bb4:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
 4000bb8:	3011883a 	mov	r8,r6
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
 4000bbc:	3980022e 	bgeu	r7,r6,4000bc8 <alt_up_pixel_buffer_dma_draw_vline+0x18>
 4000bc0:	3811883a 	mov	r8,r7
 4000bc4:	300f883a 	mov	r7,r6
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 4000bc8:	2a404f2e 	bgeu	r5,r9,4000d08 <alt_up_pixel_buffer_dma_draw_vline+0x158>
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
 4000bcc:	20801017 	ldw	r2,64(r4)
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 4000bd0:	40804d2e 	bgeu	r8,r2,4000d08 <alt_up_pixel_buffer_dma_draw_vline+0x158>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 4000bd4:	38800136 	bltu	r7,r2,4000bdc <alt_up_pixel_buffer_dma_draw_vline+0x2c>
	{
		b_y = limit_y - 1;
 4000bd8:	11ffffc4 	addi	r7,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4000bdc:	d8800117 	ldw	r2,4(sp)
 4000be0:	01800044 	movi	r6,1
 4000be4:	1180021e 	bne	r2,r6,4000bf0 <alt_up_pixel_buffer_dma_draw_vline+0x40>
		addr = pixel_buffer->back_buffer_start_address;
 4000be8:	20800c17 	ldw	r2,48(r4)
 4000bec:	00000106 	br	4000bf4 <alt_up_pixel_buffer_dma_draw_vline+0x44>
	else
		addr = pixel_buffer->buffer_start_address;
 4000bf0:	20800b17 	ldw	r2,44(r4)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4000bf4:	20c00d17 	ldw	r3,52(r4)
 4000bf8:	22c00e17 	ldw	r11,56(r4)
 4000bfc:	1800211e 	bne	r3,zero,4000c84 <alt_up_pixel_buffer_dma_draw_vline+0xd4>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4000c00:	21001317 	ldw	r4,76(r4)
		addr = addr + (t_y << offset_y);
 4000c04:	4106983a 	sll	r3,r8,r4
 4000c08:	1887883a 	add	r3,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4000c0c:	5980081e 	bne	r11,r6,4000c30 <alt_up_pixel_buffer_dma_draw_vline+0x80>
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
 4000c10:	310c983a 	sll	r6,r6,r4
 4000c14:	28c5883a 	add	r2,r5,r3
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4000c18:	3a000436 	bltu	r7,r8,4000c2c <alt_up_pixel_buffer_dma_draw_vline+0x7c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 4000c1c:	12800025 	stbio	r10,0(r2)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4000c20:	42000044 	addi	r8,r8,1
 4000c24:	1185883a 	add	r2,r2,r6
 4000c28:	003ffb06 	br	4000c18 <__alt_mem_Onchip_Memory+0xfbff0c18>
 4000c2c:	f800283a 	ret
 4000c30:	00800044 	movi	r2,1
 4000c34:	110c983a 	sll	r6,r2,r4
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4000c38:	01000084 	movi	r4,2
 4000c3c:	2945883a 	add	r2,r5,r5
 4000c40:	59000326 	beq	r11,r4,4000c50 <alt_up_pixel_buffer_dma_draw_vline+0xa0>
 4000c44:	1085883a 	add	r2,r2,r2
 4000c48:	10c5883a 	add	r2,r2,r3
 4000c4c:	00000706 	br	4000c6c <alt_up_pixel_buffer_dma_draw_vline+0xbc>
 4000c50:	10c5883a 	add	r2,r2,r3
			for (y = t_y; y <= b_y; y++)
 4000c54:	3a000436 	bltu	r7,r8,4000c68 <alt_up_pixel_buffer_dma_draw_vline+0xb8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 4000c58:	1280002d 	sthio	r10,0(r2)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4000c5c:	42000044 	addi	r8,r8,1
 4000c60:	1185883a 	add	r2,r2,r6
 4000c64:	003ffb06 	br	4000c54 <__alt_mem_Onchip_Memory+0xfbff0c54>
 4000c68:	f800283a 	ret
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4000c6c:	3a000436 	bltu	r7,r8,4000c80 <alt_up_pixel_buffer_dma_draw_vline+0xd0>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 4000c70:	12800035 	stwio	r10,0(r2)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4000c74:	42000044 	addi	r8,r8,1
 4000c78:	1185883a 	add	r2,r2,r6
 4000c7c:	003ffb06 	br	4000c6c <__alt_mem_Onchip_Memory+0xfbff0c6c>
 4000c80:	f800283a 	ret
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4000c84:	5980091e 	bne	r11,r6,4000cac <alt_up_pixel_buffer_dma_draw_vline+0xfc>
 4000c88:	4247383a 	mul	r3,r8,r9
 4000c8c:	194b883a 	add	r5,r3,r5
 4000c90:	2885883a 	add	r2,r5,r2
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4000c94:	3a000436 	bltu	r7,r8,4000ca8 <alt_up_pixel_buffer_dma_draw_vline+0xf8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 4000c98:	12800025 	stbio	r10,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4000c9c:	42000044 	addi	r8,r8,1
 4000ca0:	1245883a 	add	r2,r2,r9
 4000ca4:	003ffb06 	br	4000c94 <__alt_mem_Onchip_Memory+0xfbff0c94>
 4000ca8:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4000cac:	00c00084 	movi	r3,2
 4000cb0:	294b883a 	add	r5,r5,r5
 4000cb4:	4a53883a 	add	r9,r9,r9
 4000cb8:	58c0091e 	bne	r11,r3,4000ce0 <alt_up_pixel_buffer_dma_draw_vline+0x130>
 4000cbc:	4247383a 	mul	r3,r8,r9
 4000cc0:	194b883a 	add	r5,r3,r5
 4000cc4:	2885883a 	add	r2,r5,r2
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4000cc8:	3a000436 	bltu	r7,r8,4000cdc <alt_up_pixel_buffer_dma_draw_vline+0x12c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 4000ccc:	1280002d 	sthio	r10,0(r2)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4000cd0:	42000044 	addi	r8,r8,1
 4000cd4:	1245883a 	add	r2,r2,r9
 4000cd8:	003ffb06 	br	4000cc8 <__alt_mem_Onchip_Memory+0xfbff0cc8>
 4000cdc:	f800283a 	ret
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 4000ce0:	4a53883a 	add	r9,r9,r9
 4000ce4:	4247383a 	mul	r3,r8,r9
 4000ce8:	294b883a 	add	r5,r5,r5
 4000cec:	194b883a 	add	r5,r3,r5
 4000cf0:	2885883a 	add	r2,r5,r2
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4000cf4:	3a000436 	bltu	r7,r8,4000d08 <alt_up_pixel_buffer_dma_draw_vline+0x158>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 4000cf8:	12800035 	stwio	r10,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4000cfc:	42000044 	addi	r8,r8,1
 4000d00:	1245883a 	add	r2,r2,r9
 4000d04:	003ffb06 	br	4000cf4 <__alt_mem_Onchip_Memory+0xfbff0cf4>
 4000d08:	f800283a 	ret

04000d0c <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 4000d0c:	defff604 	addi	sp,sp,-40
 4000d10:	dc400315 	stw	r17,12(sp)
 4000d14:	dc000215 	stw	r16,8(sp)
 4000d18:	dc400c17 	ldw	r17,48(sp)
 4000d1c:	dc000b17 	ldw	r16,44(sp)
 4000d20:	dd400715 	stw	r21,28(sp)
 4000d24:	dcc00515 	stw	r19,20(sp)
 4000d28:	dd400a17 	ldw	r21,40(sp)
 4000d2c:	3827883a 	mov	r19,r7
 4000d30:	dd000615 	stw	r20,24(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 4000d34:	300f883a 	mov	r7,r6
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 4000d38:	3029883a 	mov	r20,r6
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 4000d3c:	dc400115 	stw	r17,4(sp)
 4000d40:	980d883a 	mov	r6,r19
 4000d44:	dc000015 	stw	r16,0(sp)
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 4000d48:	dfc00915 	stw	ra,36(sp)
 4000d4c:	dd800815 	stw	r22,32(sp)
 4000d50:	dc800415 	stw	r18,16(sp)
 4000d54:	282d883a 	mov	r22,r5
 4000d58:	2025883a 	mov	r18,r4
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 4000d5c:	4000a740 	call	4000a74 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 4000d60:	a80f883a 	mov	r7,r21
 4000d64:	980d883a 	mov	r6,r19
 4000d68:	b00b883a 	mov	r5,r22
 4000d6c:	9009883a 	mov	r4,r18
 4000d70:	dc400115 	stw	r17,4(sp)
 4000d74:	dc000015 	stw	r16,0(sp)
 4000d78:	4000a740 	call	4000a74 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 4000d7c:	a80f883a 	mov	r7,r21
 4000d80:	a00d883a 	mov	r6,r20
 4000d84:	b00b883a 	mov	r5,r22
 4000d88:	9009883a 	mov	r4,r18
 4000d8c:	dc400115 	stw	r17,4(sp)
 4000d90:	dc000015 	stw	r16,0(sp)
 4000d94:	4000bb00 	call	4000bb0 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 4000d98:	a80f883a 	mov	r7,r21
 4000d9c:	a00d883a 	mov	r6,r20
 4000da0:	980b883a 	mov	r5,r19
 4000da4:	9009883a 	mov	r4,r18
 4000da8:	dc400b15 	stw	r17,44(sp)
 4000dac:	dc000a15 	stw	r16,40(sp)
}
 4000db0:	dfc00917 	ldw	ra,36(sp)
 4000db4:	dd800817 	ldw	r22,32(sp)
 4000db8:	dd400717 	ldw	r21,28(sp)
 4000dbc:	dd000617 	ldw	r20,24(sp)
 4000dc0:	dcc00517 	ldw	r19,20(sp)
 4000dc4:	dc800417 	ldw	r18,16(sp)
 4000dc8:	dc400317 	ldw	r17,12(sp)
 4000dcc:	dc000217 	ldw	r16,8(sp)
 4000dd0:	dec00a04 	addi	sp,sp,40
void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 4000dd4:	4000bb01 	jmpi	4000bb0 <alt_up_pixel_buffer_dma_draw_vline>

04000dd8 <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 4000dd8:	d8c00117 	ldw	r3,4(sp)
 4000ddc:	d8800017 	ldw	r2,0(sp)
 4000de0:	29cb383a 	mul	r5,r5,r7
	if (mode == 0)
 4000de4:	1800041e 	bne	r3,zero,4000df8 <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 4000de8:	298d883a 	add	r6,r5,r6
 4000dec:	310d883a 	add	r6,r6,r4
 4000df0:	30800025 	stbio	r2,0(r6)
 4000df4:	f800283a 	ret
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 4000df8:	298d883a 	add	r6,r5,r6
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 4000dfc:	01c00044 	movi	r7,1
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 4000e00:	318d883a 	add	r6,r6,r6
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 4000e04:	19c0031e 	bne	r3,r7,4000e14 <helper_plot_pixel+0x3c>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 4000e08:	310d883a 	add	r6,r6,r4
 4000e0c:	3080002d 	sthio	r2,0(r6)
 4000e10:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 4000e14:	318d883a 	add	r6,r6,r6
 4000e18:	310d883a 	add	r6,r6,r4
 4000e1c:	30800035 	stwio	r2,0(r6)
 4000e20:	f800283a 	ret

04000e24 <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 4000e24:	defff304 	addi	sp,sp,-52
 4000e28:	d8800d17 	ldw	r2,52(sp)
 4000e2c:	dcc00615 	stw	r19,24(sp)
 4000e30:	dc800515 	stw	r18,20(sp)
 4000e34:	dc400415 	stw	r17,16(sp)
 4000e38:	dfc00c15 	stw	ra,48(sp)
 4000e3c:	df000b15 	stw	fp,44(sp)
 4000e40:	ddc00a15 	stw	r23,40(sp)
 4000e44:	dd800915 	stw	r22,36(sp)
 4000e48:	dd400815 	stw	r21,32(sp)
 4000e4c:	dd000715 	stw	r20,28(sp)
 4000e50:	dc000315 	stw	r16,12(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 4000e54:	1187c83a 	sub	r3,r2,r6
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 4000e58:	2823883a 	mov	r17,r5
 4000e5c:	3025883a 	mov	r18,r6
 4000e60:	3827883a 	mov	r19,r7
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 4000e64:	1800010e 	bge	r3,zero,4000e6c <alt_up_pixel_buffer_dma_draw_line+0x48>
 4000e68:	00c7c83a 	sub	r3,zero,r3
 4000e6c:	9c4bc83a 	sub	r5,r19,r17
 4000e70:	2800010e 	bge	r5,zero,4000e78 <alt_up_pixel_buffer_dma_draw_line+0x54>
 4000e74:	014bc83a 	sub	r5,zero,r5
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 4000e78:	25000e17 	ldw	r20,56(r4)
 4000e7c:	05800044 	movi	r22,1
 4000e80:	a5800426 	beq	r20,r22,4000e94 <alt_up_pixel_buffer_dma_draw_line+0x70>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 4000e84:	a50000a0 	cmpeqi	r20,r20,2
 4000e88:	01800084 	movi	r6,2
 4000e8c:	3529c83a 	sub	r20,r6,r20
 4000e90:	00000106 	br	4000e98 <alt_up_pixel_buffer_dma_draw_line+0x74>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 4000e94:	0029883a 	mov	r20,zero
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 4000e98:	21800d17 	ldw	r6,52(r4)
 4000e9c:	3000041e 	bne	r6,zero,4000eb0 <alt_up_pixel_buffer_dma_draw_line+0x8c>
 4000ea0:	21801317 	ldw	r6,76(r4)
 4000ea4:	350dc83a 	sub	r6,r6,r20
 4000ea8:	b1ac983a 	sll	r22,r22,r6
 4000eac:	00000106 	br	4000eb4 <alt_up_pixel_buffer_dma_draw_line+0x90>
 4000eb0:	25800f17 	ldw	r22,60(r4)

	if (backbuffer == 1)
 4000eb4:	d9c00f17 	ldw	r7,60(sp)
 4000eb8:	01800044 	movi	r6,1
 4000ebc:	3980021e 	bne	r7,r6,4000ec8 <alt_up_pixel_buffer_dma_draw_line+0xa4>
		buffer_start = pixel_buffer->back_buffer_start_address;
 4000ec0:	22000c17 	ldw	r8,48(r4)
 4000ec4:	00000106 	br	4000ecc <alt_up_pixel_buffer_dma_draw_line+0xa8>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 4000ec8:	22000b17 	ldw	r8,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
 4000ecc:	28c0060e 	bge	r5,r3,4000ee8 <alt_up_pixel_buffer_dma_draw_line+0xc4>
 4000ed0:	9809883a 	mov	r4,r19
		error = x_0;
		x_0 = y_0;
		y_0 = error;
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
 4000ed4:	1027883a 	mov	r19,r2
		y_1 = error;
 4000ed8:	2005883a 	mov	r2,r4
 4000edc:	8809883a 	mov	r4,r17

	/* Preprocessing inputs */
	if (steep > 0) {
		// Swap x_0 and y_0
		error = x_0;
		x_0 = y_0;
 4000ee0:	9023883a 	mov	r17,r18
		y_0 = error;
 4000ee4:	2025883a 	mov	r18,r4
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
 4000ee8:	9c40060e 	bge	r19,r17,4000f04 <alt_up_pixel_buffer_dma_draw_line+0xe0>
 4000eec:	9009883a 	mov	r4,r18
		error = x_0;
		x_0 = x_1;
		x_1 = error;
		// Swap y_0 and y_1
		error = y_0;
		y_0 = y_1;
 4000ef0:	1025883a 	mov	r18,r2
		y_1 = error;
 4000ef4:	2005883a 	mov	r2,r4
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
 4000ef8:	8809883a 	mov	r4,r17
 4000efc:	9823883a 	mov	r17,r19
 4000f00:	2027883a 	mov	r19,r4
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
 4000f04:	14afc83a 	sub	r23,r2,r18
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 4000f08:	9c79c83a 	sub	fp,r19,r17
	deltay = ABS(y_1 - y_0);
 4000f0c:	b800010e 	bge	r23,zero,4000f14 <alt_up_pixel_buffer_dma_draw_line+0xf0>
 4000f10:	05efc83a 	sub	r23,zero,r23
	error = -(deltax / 2); 
 4000f14:	e020d7fa 	srli	r16,fp,31
 4000f18:	8721883a 	add	r16,r16,fp
 4000f1c:	8021d07a 	srai	r16,r16,1
 4000f20:	0421c83a 	sub	r16,zero,r16
	y = y_0;
	if (y_0 < y_1)
 4000f24:	90800216 	blt	r18,r2,4000f30 <alt_up_pixel_buffer_dma_draw_line+0x10c>
		ystep = 1;
	else
		ystep = -1;
 4000f28:	057fffc4 	movi	r21,-1
 4000f2c:	00000106 	br	4000f34 <alt_up_pixel_buffer_dma_draw_line+0x110>
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
	error = -(deltax / 2); 
	y = y_0;
	if (y_0 < y_1)
		ystep = 1;
 4000f30:	05400044 	movi	r21,1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 4000f34:	28c0200e 	bge	r5,r3,4000fb8 <alt_up_pixel_buffer_dma_draw_line+0x194>
	{
		for (x=x_0; x <= x_1; x++) {
 4000f38:	9c402016 	blt	r19,r17,4000fbc <alt_up_pixel_buffer_dma_draw_line+0x198>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 4000f3c:	d8800e17 	ldw	r2,56(sp)
 4000f40:	4009883a 	mov	r4,r8
 4000f44:	dd000115 	stw	r20,4(sp)
 4000f48:	d8800015 	stw	r2,0(sp)
 4000f4c:	880f883a 	mov	r7,r17
 4000f50:	900d883a 	mov	r6,r18
 4000f54:	b00b883a 	mov	r5,r22
 4000f58:	da000215 	stw	r8,8(sp)
			error = error + deltay;
 4000f5c:	85e1883a 	add	r16,r16,r23
	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 4000f60:	4000dd80 	call	4000dd8 <helper_plot_pixel>
			error = error + deltay;
			if (error > 0) {
 4000f64:	da000217 	ldw	r8,8(sp)
 4000f68:	0400020e 	bge	zero,r16,4000f74 <alt_up_pixel_buffer_dma_draw_line+0x150>
				y = y + ystep;
 4000f6c:	9565883a 	add	r18,r18,r21
				error = error - deltax;
 4000f70:	8721c83a 	sub	r16,r16,fp

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 4000f74:	8c400044 	addi	r17,r17,1
 4000f78:	003fef06 	br	4000f38 <__alt_mem_Onchip_Memory+0xfbff0f38>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 4000f7c:	d8800e17 	ldw	r2,56(sp)
 4000f80:	4009883a 	mov	r4,r8
 4000f84:	dd000115 	stw	r20,4(sp)
 4000f88:	d8800015 	stw	r2,0(sp)
 4000f8c:	900f883a 	mov	r7,r18
 4000f90:	880d883a 	mov	r6,r17
 4000f94:	b00b883a 	mov	r5,r22
 4000f98:	da000215 	stw	r8,8(sp)
			error = error + deltay;
 4000f9c:	85e1883a 	add	r16,r16,r23
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 4000fa0:	4000dd80 	call	4000dd8 <helper_plot_pixel>
			error = error + deltay;
			if (error > 0) {
 4000fa4:	da000217 	ldw	r8,8(sp)
 4000fa8:	0400020e 	bge	zero,r16,4000fb4 <alt_up_pixel_buffer_dma_draw_line+0x190>
				y = y + ystep;
 4000fac:	9565883a 	add	r18,r18,r21
				error = error - deltax;
 4000fb0:	8721c83a 	sub	r16,r16,fp
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 4000fb4:	8c400044 	addi	r17,r17,1
 4000fb8:	9c7ff00e 	bge	r19,r17,4000f7c <__alt_mem_Onchip_Memory+0xfbff0f7c>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 4000fbc:	dfc00c17 	ldw	ra,48(sp)
 4000fc0:	df000b17 	ldw	fp,44(sp)
 4000fc4:	ddc00a17 	ldw	r23,40(sp)
 4000fc8:	dd800917 	ldw	r22,36(sp)
 4000fcc:	dd400817 	ldw	r21,32(sp)
 4000fd0:	dd000717 	ldw	r20,28(sp)
 4000fd4:	dcc00617 	ldw	r19,24(sp)
 4000fd8:	dc800517 	ldw	r18,20(sp)
 4000fdc:	dc400417 	ldw	r17,16(sp)
 4000fe0:	dc000317 	ldw	r16,12(sp)
 4000fe4:	dec00d04 	addi	sp,sp,52
 4000fe8:	f800283a 	ret

04000fec <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4000fec:	0005883a 	mov	r2,zero
 4000ff0:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4000ff4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4000ff8:	10800804 	addi	r2,r2,32
 4000ffc:	10fffd1e 	bne	r2,r3,4000ff4 <__alt_mem_Onchip_Memory+0xfbff0ff4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4001000:	f800283a 	ret

04001004 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 4001004:	3005883a 	mov	r2,r6
 4001008:	f800283a 	ret

0400100c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400100c:	20000226 	beq	r4,zero,4001018 <alt_dev_llist_insert+0xc>
 4001010:	20800217 	ldw	r2,8(r4)
 4001014:	1000101e 	bne	r2,zero,4001058 <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 4001018:	d0a00717 	ldw	r2,-32740(gp)
 400101c:	10000926 	beq	r2,zero,4001044 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4001020:	deffff04 	addi	sp,sp,-4
 4001024:	dfc00015 	stw	ra,0(sp)
 4001028:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 400102c:	00c00584 	movi	r3,22
 4001030:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 4001034:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 4001038:	dfc00017 	ldw	ra,0(sp)
 400103c:	dec00104 	addi	sp,sp,4
 4001040:	f800283a 	ret
 4001044:	d0a07304 	addi	r2,gp,-32308
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 4001048:	00c00584 	movi	r3,22
 400104c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 4001050:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 4001054:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
 4001058:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400105c:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
 4001060:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
 4001064:	28800017 	ldw	r2,0(r5)
 4001068:	11000115 	stw	r4,4(r2)
  list->next           = entry;
 400106c:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
 4001070:	0005883a 	mov	r2,zero
 4001074:	f800283a 	ret

04001078 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4001078:	defffb04 	addi	sp,sp,-20
 400107c:	dcc00315 	stw	r19,12(sp)
 4001080:	dc800215 	stw	r18,8(sp)
 4001084:	dc400115 	stw	r17,4(sp)
 4001088:	dc000015 	stw	r16,0(sp)
 400108c:	dfc00415 	stw	ra,16(sp)
 4001090:	2027883a 	mov	r19,r4
 4001094:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
 4001098:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
 400109c:	40011a00 	call	40011a0 <strlen>
 40010a0:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40010a4:	84400726 	beq	r16,r17,40010c4 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 40010a8:	81000217 	ldw	r4,8(r16)
 40010ac:	900d883a 	mov	r6,r18
 40010b0:	980b883a 	mov	r5,r19
 40010b4:	40011380 	call	4001138 <memcmp>
 40010b8:	10000426 	beq	r2,zero,40010cc <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 40010bc:	84000017 	ldw	r16,0(r16)
 40010c0:	003ff806 	br	40010a4 <__alt_mem_Onchip_Memory+0xfbff10a4>
  }
  
  /* No match found */
  
  return NULL;
 40010c4:	0005883a 	mov	r2,zero
 40010c8:	00000106 	br	40010d0 <alt_find_dev+0x58>
 40010cc:	8005883a 	mov	r2,r16
}
 40010d0:	dfc00417 	ldw	ra,16(sp)
 40010d4:	dcc00317 	ldw	r19,12(sp)
 40010d8:	dc800217 	ldw	r18,8(sp)
 40010dc:	dc400117 	ldw	r17,4(sp)
 40010e0:	dc000017 	ldw	r16,0(sp)
 40010e4:	dec00504 	addi	sp,sp,20
 40010e8:	f800283a 	ret

040010ec <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 40010ec:	01440004 	movi	r5,4096
 40010f0:	0009883a 	mov	r4,zero
 40010f4:	40011001 	jmpi	4001100 <alt_icache_flush>

040010f8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 40010f8:	000170fa 	wrctl	ienable,zero
 40010fc:	f800283a 	ret

04001100 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 4001100:	00840004 	movi	r2,4096
 4001104:	1140012e 	bgeu	r2,r5,400110c <alt_icache_flush+0xc>
 4001108:	100b883a 	mov	r5,r2
 400110c:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4001110:	2005883a 	mov	r2,r4
 4001114:	1140032e 	bgeu	r2,r5,4001124 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4001118:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400111c:	10800804 	addi	r2,r2,32
 4001120:	003ffc06 	br	4001114 <__alt_mem_Onchip_Memory+0xfbff1114>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4001124:	210007cc 	andi	r4,r4,31
 4001128:	20000126 	beq	r4,zero,4001130 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 400112c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4001130:	0000203a 	flushp
 4001134:	f800283a 	ret

04001138 <memcmp>:
 4001138:	218d883a 	add	r6,r4,r6
 400113c:	21800826 	beq	r4,r6,4001160 <memcmp+0x28>
 4001140:	20800003 	ldbu	r2,0(r4)
 4001144:	28c00003 	ldbu	r3,0(r5)
 4001148:	10c00226 	beq	r2,r3,4001154 <memcmp+0x1c>
 400114c:	10c5c83a 	sub	r2,r2,r3
 4001150:	f800283a 	ret
 4001154:	21000044 	addi	r4,r4,1
 4001158:	29400044 	addi	r5,r5,1
 400115c:	003ff706 	br	400113c <__alt_mem_Onchip_Memory+0xfbff113c>
 4001160:	0005883a 	mov	r2,zero
 4001164:	f800283a 	ret

04001168 <strcmp>:
 4001168:	20800003 	ldbu	r2,0(r4)
 400116c:	10c03fcc 	andi	r3,r2,255
 4001170:	18c0201c 	xori	r3,r3,128
 4001174:	18ffe004 	addi	r3,r3,-128
 4001178:	18000526 	beq	r3,zero,4001190 <strcmp+0x28>
 400117c:	29800007 	ldb	r6,0(r5)
 4001180:	1980031e 	bne	r3,r6,4001190 <strcmp+0x28>
 4001184:	21000044 	addi	r4,r4,1
 4001188:	29400044 	addi	r5,r5,1
 400118c:	003ff606 	br	4001168 <__alt_mem_Onchip_Memory+0xfbff1168>
 4001190:	28c00003 	ldbu	r3,0(r5)
 4001194:	10803fcc 	andi	r2,r2,255
 4001198:	10c5c83a 	sub	r2,r2,r3
 400119c:	f800283a 	ret

040011a0 <strlen>:
 40011a0:	2005883a 	mov	r2,r4
 40011a4:	10c00007 	ldb	r3,0(r2)
 40011a8:	18000226 	beq	r3,zero,40011b4 <strlen+0x14>
 40011ac:	10800044 	addi	r2,r2,1
 40011b0:	003ffc06 	br	40011a4 <__alt_mem_Onchip_Memory+0xfbff11a4>
 40011b4:	1105c83a 	sub	r2,r2,r4
 40011b8:	f800283a 	ret
