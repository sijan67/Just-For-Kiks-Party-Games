
party_remake.elf:     file format elf32-littlenios2
party_remake.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000000

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00001080 memsz 0x00001080 flags r-x
    LOAD off    0x00002080 vaddr 0x04001080 paddr 0x04001280 align 2**12
         filesz 0x00000200 memsz 0x00000200 flags rw-
    LOAD off    0x00002480 vaddr 0x04001480 paddr 0x04001480 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-
    LOAD off    0x00003000 vaddr 0x08020000 paddr 0x08020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08020000  08020000  00003000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  08020020  08020020  00003020  2**0
                  CONTENTS
  2 .text         0000101c  04000000  04000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000064  0400101c  0400101c  0000201c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000200  04001080  04001280  00002080  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  04001480  04001480  00002480  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  04001490  04001490  00003020  2**0
                  CONTENTS
  7 .Onchip_Memory 00000000  08020020  08020020  00003020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000368  00000000  00000000  00003048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00004f2e  00000000  00000000  000033b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001a6e  00000000  00000000  000082de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00001e21  00000000  00000000  00009d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000058c  00000000  00000000  0000bb70  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000014e1  00000000  00000000  0000c0fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000190a  00000000  00000000  0000d5dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0000eee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000002a8  00000000  00000000  0000ef18  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001075a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0001075d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00010760  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00010761  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000004  00000000  00000000  00010762  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  00010766  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000004  00000000  00000000  0001076a  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000004  00000000  00000000  0001076e  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000003b  00000000  00000000  00010772  2**0
                  CONTENTS, READONLY
 27 .jdi          0000448d  00000000  00000000  000107ad  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000772fc  00000000  00000000  00014c3a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08020000 l    d  .entry	00000000 .entry
08020020 l    d  .exceptions	00000000 .exceptions
04000000 l    d  .text	00000000 .text
0400101c l    d  .rodata	00000000 .rodata
04001080 l    d  .rwdata	00000000 .rwdata
04001480 l    d  .bss	00000000 .bss
04001490 l    d  .SDRAM	00000000 .SDRAM
08020020 l    d  .Onchip_Memory	00000000 .Onchip_Memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../party_remake_bsp//obj/HAL/src/crt0.o
04000048 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
040000f8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
04001080 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
040011d4 l     O .rwdata	00000030 Audio
040011a8 l     O .rwdata	0000002c WIFI_Serial_Port
04001160 l     O .rwdata	00000048 Char_Buffer
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04000e80 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
04000a64 g     F .text	0000002c alt_main
04001280 g       *ABS*	00000000 __flash_rwdata_start
040000ac g     F .text	0000004c printf
04000ddc g     F .text	0000006c alt_up_char_buffer_string
04000c98 g     F .text	00000070 alt_up_rs232_read_fd
04000d8c g     F .text	00000050 alt_up_char_buffer_draw
04000f74 g     F .text	00000008 altera_nios2_gen2_irq_init
08020000 g     F .entry	0000001c __reset
08020020 g       *ABS*	00000000 __flash_exceptions_start
04001480 g     O .bss	00000004 errno
04001488 g     O .bss	00000004 alt_argv
0400925c g       *ABS*	00000000 _gp
04001204 g     O .rwdata	00000030 alt_fd_list
04000ef4 g     F .text	00000074 alt_find_dev
04000e48 g     F .text	00000020 alt_up_char_buffer_clear
04000c4c g     F .text	0000004c alt_up_rs232_read_data
04000070 g     F .text	0000003c _printf_r
040008c8 g     F .text	00000064 .hidden __udivsi3
04000f7c g     F .text	00000038 alt_icache_flush
04001268 g     O .rwdata	00000004 alt_max_fd
04000c2c g     F .text	0000000c alt_up_rs232_check_parity
0400125c g     O .rwdata	00000004 _global_impure_ptr
04001490 g       *ABS*	00000000 __bss_end
04001234 g     O .rwdata	00000028 alt_dev_null
04000e68 g     F .text	00000018 alt_dcache_flush_all
04001280 g       *ABS*	00000000 __ram_rwdata_end
0400126c g     O .rwdata	00000008 alt_dev_list
04000a90 g     F .text	00000060 write
04001080 g       *ABS*	00000000 __ram_rodata_end
04000d08 g     F .text	00000028 alt_up_rs232_write_fd
04000000 g       *ABS*	00000000 __alt_mem_SDRAM
0400092c g     F .text	00000058 .hidden __umodsi3
04001490 g       *ABS*	00000000 end
04000d38 g     F .text	0000004c alt_up_char_buffer_init
08000000 g       *ABS*	00000000 __alt_stack_pointer
04000ba4 g     F .text	00000034 altera_avalon_jtag_uart_write
04000164 g     F .text	00000524 ___vfprintf_internal_r
04000000 g     F .text	0000004c _start
04000b10 g     F .text	00000094 alt_sys_init
04000c1c g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
04001080 g       *ABS*	00000000 __ram_rwdata_start
0400101c g       *ABS*	00000000 __ram_rodata_start
04000fb4 g     F .text	00000030 memcmp
04001490 g       *ABS*	00000000 __alt_stack_base
04000bf0 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
04000e88 g     F .text	0000006c alt_dev_llist_insert
040006a4 g     F .text	000000b8 __sfvwrite_small_dev
04001480 g       *ABS*	00000000 __bss_start
0400004c g     F .text	00000024 main
04001484 g     O .bss	00000004 alt_envp
04000d84 g     F .text	00000008 alt_up_char_buffer_open_dev
04001264 g     O .rwdata	00000004 JTAG
0400127c g     O .rwdata	00000004 alt_errno
040007d0 g     F .text	00000084 .hidden __divsi3
04000fe4 g     F .text	00000038 strcmp
0400101c g       *ABS*	00000000 __flash_rodata_start
04000d30 g     F .text	00000008 alt_up_rs232_open_dev
04000af0 g     F .text	00000020 alt_irq_init
04000778 g     F .text	00000058 _write_r
04001260 g     O .rwdata	00000004 _impure_ptr
0400148c g     O .bss	00000004 alt_argc
04001274 g     O .rwdata	00000008 alt_fs_list
04000bd8 g     F .text	00000018 alt_up_rs232_enable_read_interrupt
04000c38 g     F .text	00000014 alt_up_rs232_write_data
08020020 g       *ABS*	00000000 __ram_exceptions_start
04001280 g       *ABS*	00000000 _edata
04001490 g       *ABS*	00000000 _end
08020020 g       *ABS*	00000000 __ram_exceptions_end
08020000 g       *ABS*	00000000 __alt_mem_Onchip_Memory
04000854 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
0802001c g       .entry	00000000 _exit
0400075c g     F .text	0000001c strlen
04000f68 g     F .text	0000000c alt_icache_flush_all
04000688 g     F .text	0000001c __vfprintf_internal
04000c0c g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
04000984 g     F .text	000000e0 alt_load



Disassembly of section .entry:

08020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 802000c:	00bffd16 	blt	zero,r2,8020004 <__flash_exceptions_start+0xffffffe4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8020010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 8020014:	08400014 	ori	at,at,0
    jmp r1
 8020018:	0800683a 	jmp	at

0802001c <_exit>:
 802001c:	00000000 	call	0 <__alt_mem_SDRAM-0x4000000>

Disassembly of section .text:

04000000 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000000:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000004:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__flash_exceptions_start+0xfbfdffe4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000010:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000014:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000018:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 400001c:	d6a49714 	ori	gp,gp,37468
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000020:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000024:	10852014 	ori	r2,r2,5248

    movhi r3, %hi(__bss_end)
 4000028:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 400002c:	18c52414 	ori	r3,r3,5264

    beq r2, r3, 1f
 4000030:	10c00326 	beq	r2,r3,4000040 <_start+0x40>

0:
    stw zero, (r2)
 4000034:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000038:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400003c:	10fffd36 	bltu	r2,r3,4000034 <__flash_exceptions_start+0xfbfe0014>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000040:	40009840 	call	4000984 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000044:	4000a640 	call	4000a64 <alt_main>

04000048 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000048:	003fff06 	br	4000048 <__flash_exceptions_start+0xfbfe0028>

0400004c <main>:
    global_count++;
}
*/
#include <stdio.h>
int main() {
	printf("Test");
 400004c:	01010034 	movhi	r4,1024
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
    global_count++;
}
*/
#include <stdio.h>
int main() {
 4000050:	deffff04 	addi	sp,sp,-4
	printf("Test");
 4000054:	21040704 	addi	r4,r4,4124
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
    global_count++;
}
*/
#include <stdio.h>
int main() {
 4000058:	dfc00015 	stw	ra,0(sp)
	printf("Test");
 400005c:	40000ac0 	call	40000ac <printf>
	return 0;
}
 4000060:	0005883a 	mov	r2,zero
 4000064:	dfc00017 	ldw	ra,0(sp)
 4000068:	dec00104 	addi	sp,sp,4
 400006c:	f800283a 	ret

04000070 <_printf_r>:
 4000070:	defffd04 	addi	sp,sp,-12
 4000074:	dfc00015 	stw	ra,0(sp)
 4000078:	d9800115 	stw	r6,4(sp)
 400007c:	d9c00215 	stw	r7,8(sp)
 4000080:	20c00217 	ldw	r3,8(r4)
 4000084:	01810034 	movhi	r6,1024
 4000088:	3181a904 	addi	r6,r6,1700
 400008c:	19800115 	stw	r6,4(r3)
 4000090:	280d883a 	mov	r6,r5
 4000094:	21400217 	ldw	r5,8(r4)
 4000098:	d9c00104 	addi	r7,sp,4
 400009c:	40001640 	call	4000164 <___vfprintf_internal_r>
 40000a0:	dfc00017 	ldw	ra,0(sp)
 40000a4:	dec00304 	addi	sp,sp,12
 40000a8:	f800283a 	ret

040000ac <printf>:
 40000ac:	defffc04 	addi	sp,sp,-16
 40000b0:	dfc00015 	stw	ra,0(sp)
 40000b4:	d9400115 	stw	r5,4(sp)
 40000b8:	d9800215 	stw	r6,8(sp)
 40000bc:	d9c00315 	stw	r7,12(sp)
 40000c0:	00810034 	movhi	r2,1024
 40000c4:	10849804 	addi	r2,r2,4704
 40000c8:	10800017 	ldw	r2,0(r2)
 40000cc:	01410034 	movhi	r5,1024
 40000d0:	2941a904 	addi	r5,r5,1700
 40000d4:	10c00217 	ldw	r3,8(r2)
 40000d8:	d9800104 	addi	r6,sp,4
 40000dc:	19400115 	stw	r5,4(r3)
 40000e0:	200b883a 	mov	r5,r4
 40000e4:	11000217 	ldw	r4,8(r2)
 40000e8:	40006880 	call	4000688 <__vfprintf_internal>
 40000ec:	dfc00017 	ldw	ra,0(sp)
 40000f0:	dec00404 	addi	sp,sp,16
 40000f4:	f800283a 	ret

040000f8 <print_repeat>:
 40000f8:	defffb04 	addi	sp,sp,-20
 40000fc:	dc800315 	stw	r18,12(sp)
 4000100:	dc400215 	stw	r17,8(sp)
 4000104:	dc000115 	stw	r16,4(sp)
 4000108:	dfc00415 	stw	ra,16(sp)
 400010c:	2025883a 	mov	r18,r4
 4000110:	2823883a 	mov	r17,r5
 4000114:	d9800005 	stb	r6,0(sp)
 4000118:	3821883a 	mov	r16,r7
 400011c:	04000a0e 	bge	zero,r16,4000148 <print_repeat+0x50>
 4000120:	88800117 	ldw	r2,4(r17)
 4000124:	01c00044 	movi	r7,1
 4000128:	d80d883a 	mov	r6,sp
 400012c:	880b883a 	mov	r5,r17
 4000130:	9009883a 	mov	r4,r18
 4000134:	103ee83a 	callr	r2
 4000138:	843fffc4 	addi	r16,r16,-1
 400013c:	103ff726 	beq	r2,zero,400011c <__flash_exceptions_start+0xfbfe00fc>
 4000140:	00bfffc4 	movi	r2,-1
 4000144:	00000106 	br	400014c <print_repeat+0x54>
 4000148:	0005883a 	mov	r2,zero
 400014c:	dfc00417 	ldw	ra,16(sp)
 4000150:	dc800317 	ldw	r18,12(sp)
 4000154:	dc400217 	ldw	r17,8(sp)
 4000158:	dc000117 	ldw	r16,4(sp)
 400015c:	dec00504 	addi	sp,sp,20
 4000160:	f800283a 	ret

04000164 <___vfprintf_internal_r>:
 4000164:	deffe504 	addi	sp,sp,-108
 4000168:	d8c00804 	addi	r3,sp,32
 400016c:	df001915 	stw	fp,100(sp)
 4000170:	ddc01815 	stw	r23,96(sp)
 4000174:	dd801715 	stw	r22,92(sp)
 4000178:	dd401615 	stw	r21,88(sp)
 400017c:	dd001515 	stw	r20,84(sp)
 4000180:	dcc01415 	stw	r19,80(sp)
 4000184:	dc801315 	stw	r18,76(sp)
 4000188:	dc401215 	stw	r17,72(sp)
 400018c:	dc001115 	stw	r16,68(sp)
 4000190:	dfc01a15 	stw	ra,104(sp)
 4000194:	2027883a 	mov	r19,r4
 4000198:	2839883a 	mov	fp,r5
 400019c:	382d883a 	mov	r22,r7
 40001a0:	d9800f15 	stw	r6,60(sp)
 40001a4:	0021883a 	mov	r16,zero
 40001a8:	d8000e15 	stw	zero,56(sp)
 40001ac:	002f883a 	mov	r23,zero
 40001b0:	002b883a 	mov	r21,zero
 40001b4:	0025883a 	mov	r18,zero
 40001b8:	0023883a 	mov	r17,zero
 40001bc:	d8000c15 	stw	zero,48(sp)
 40001c0:	d8000b15 	stw	zero,44(sp)
 40001c4:	0029883a 	mov	r20,zero
 40001c8:	d8c00915 	stw	r3,36(sp)
 40001cc:	d8c00f17 	ldw	r3,60(sp)
 40001d0:	19000003 	ldbu	r4,0(r3)
 40001d4:	20803fcc 	andi	r2,r4,255
 40001d8:	1080201c 	xori	r2,r2,128
 40001dc:	10bfe004 	addi	r2,r2,-128
 40001e0:	10011c26 	beq	r2,zero,4000654 <___vfprintf_internal_r+0x4f0>
 40001e4:	00c00044 	movi	r3,1
 40001e8:	a0c01426 	beq	r20,r3,400023c <___vfprintf_internal_r+0xd8>
 40001ec:	1d000216 	blt	r3,r20,40001f8 <___vfprintf_internal_r+0x94>
 40001f0:	a0000626 	beq	r20,zero,400020c <___vfprintf_internal_r+0xa8>
 40001f4:	00011306 	br	4000644 <___vfprintf_internal_r+0x4e0>
 40001f8:	01400084 	movi	r5,2
 40001fc:	a1401d26 	beq	r20,r5,4000274 <___vfprintf_internal_r+0x110>
 4000200:	014000c4 	movi	r5,3
 4000204:	a1402926 	beq	r20,r5,40002ac <___vfprintf_internal_r+0x148>
 4000208:	00010e06 	br	4000644 <___vfprintf_internal_r+0x4e0>
 400020c:	01400944 	movi	r5,37
 4000210:	1140fb26 	beq	r2,r5,4000600 <___vfprintf_internal_r+0x49c>
 4000214:	e0800117 	ldw	r2,4(fp)
 4000218:	d9000005 	stb	r4,0(sp)
 400021c:	01c00044 	movi	r7,1
 4000220:	d80d883a 	mov	r6,sp
 4000224:	e00b883a 	mov	r5,fp
 4000228:	9809883a 	mov	r4,r19
 400022c:	103ee83a 	callr	r2
 4000230:	1000d61e 	bne	r2,zero,400058c <___vfprintf_internal_r+0x428>
 4000234:	84000044 	addi	r16,r16,1
 4000238:	00010206 	br	4000644 <___vfprintf_internal_r+0x4e0>
 400023c:	01400c04 	movi	r5,48
 4000240:	1140f826 	beq	r2,r5,4000624 <___vfprintf_internal_r+0x4c0>
 4000244:	01400944 	movi	r5,37
 4000248:	11400a1e 	bne	r2,r5,4000274 <___vfprintf_internal_r+0x110>
 400024c:	d8800005 	stb	r2,0(sp)
 4000250:	e0800117 	ldw	r2,4(fp)
 4000254:	a00f883a 	mov	r7,r20
 4000258:	d80d883a 	mov	r6,sp
 400025c:	e00b883a 	mov	r5,fp
 4000260:	9809883a 	mov	r4,r19
 4000264:	103ee83a 	callr	r2
 4000268:	1000c81e 	bne	r2,zero,400058c <___vfprintf_internal_r+0x428>
 400026c:	84000044 	addi	r16,r16,1
 4000270:	0000f306 	br	4000640 <___vfprintf_internal_r+0x4dc>
 4000274:	217ff404 	addi	r5,r4,-48
 4000278:	29403fcc 	andi	r5,r5,255
 400027c:	00c00244 	movi	r3,9
 4000280:	19400736 	bltu	r3,r5,40002a0 <___vfprintf_internal_r+0x13c>
 4000284:	00bfffc4 	movi	r2,-1
 4000288:	88800226 	beq	r17,r2,4000294 <___vfprintf_internal_r+0x130>
 400028c:	8c4002a4 	muli	r17,r17,10
 4000290:	00000106 	br	4000298 <___vfprintf_internal_r+0x134>
 4000294:	0023883a 	mov	r17,zero
 4000298:	2c63883a 	add	r17,r5,r17
 400029c:	0000e206 	br	4000628 <___vfprintf_internal_r+0x4c4>
 40002a0:	01400b84 	movi	r5,46
 40002a4:	1140e426 	beq	r2,r5,4000638 <___vfprintf_internal_r+0x4d4>
 40002a8:	05000084 	movi	r20,2
 40002ac:	213ff404 	addi	r4,r4,-48
 40002b0:	21003fcc 	andi	r4,r4,255
 40002b4:	00c00244 	movi	r3,9
 40002b8:	19000736 	bltu	r3,r4,40002d8 <___vfprintf_internal_r+0x174>
 40002bc:	00bfffc4 	movi	r2,-1
 40002c0:	90800226 	beq	r18,r2,40002cc <___vfprintf_internal_r+0x168>
 40002c4:	948002a4 	muli	r18,r18,10
 40002c8:	00000106 	br	40002d0 <___vfprintf_internal_r+0x16c>
 40002cc:	0025883a 	mov	r18,zero
 40002d0:	24a5883a 	add	r18,r4,r18
 40002d4:	0000db06 	br	4000644 <___vfprintf_internal_r+0x4e0>
 40002d8:	00c01b04 	movi	r3,108
 40002dc:	10c0d426 	beq	r2,r3,4000630 <___vfprintf_internal_r+0x4cc>
 40002e0:	013fffc4 	movi	r4,-1
 40002e4:	91000226 	beq	r18,r4,40002f0 <___vfprintf_internal_r+0x18c>
 40002e8:	d8000b15 	stw	zero,44(sp)
 40002ec:	00000106 	br	40002f4 <___vfprintf_internal_r+0x190>
 40002f0:	04800044 	movi	r18,1
 40002f4:	01001a44 	movi	r4,105
 40002f8:	11001626 	beq	r2,r4,4000354 <___vfprintf_internal_r+0x1f0>
 40002fc:	20800916 	blt	r4,r2,4000324 <___vfprintf_internal_r+0x1c0>
 4000300:	010018c4 	movi	r4,99
 4000304:	11008a26 	beq	r2,r4,4000530 <___vfprintf_internal_r+0x3cc>
 4000308:	01001904 	movi	r4,100
 400030c:	11001126 	beq	r2,r4,4000354 <___vfprintf_internal_r+0x1f0>
 4000310:	01001604 	movi	r4,88
 4000314:	1100ca1e 	bne	r2,r4,4000640 <___vfprintf_internal_r+0x4dc>
 4000318:	00c00044 	movi	r3,1
 400031c:	d8c00e15 	stw	r3,56(sp)
 4000320:	00001406 	br	4000374 <___vfprintf_internal_r+0x210>
 4000324:	01001cc4 	movi	r4,115
 4000328:	11009a26 	beq	r2,r4,4000594 <___vfprintf_internal_r+0x430>
 400032c:	20800416 	blt	r4,r2,4000340 <___vfprintf_internal_r+0x1dc>
 4000330:	01001bc4 	movi	r4,111
 4000334:	1100c21e 	bne	r2,r4,4000640 <___vfprintf_internal_r+0x4dc>
 4000338:	05400204 	movi	r21,8
 400033c:	00000e06 	br	4000378 <___vfprintf_internal_r+0x214>
 4000340:	01001d44 	movi	r4,117
 4000344:	11000c26 	beq	r2,r4,4000378 <___vfprintf_internal_r+0x214>
 4000348:	01001e04 	movi	r4,120
 400034c:	11000926 	beq	r2,r4,4000374 <___vfprintf_internal_r+0x210>
 4000350:	0000bb06 	br	4000640 <___vfprintf_internal_r+0x4dc>
 4000354:	b5000104 	addi	r20,r22,4
 4000358:	b8000726 	beq	r23,zero,4000378 <___vfprintf_internal_r+0x214>
 400035c:	dd000d15 	stw	r20,52(sp)
 4000360:	b5800017 	ldw	r22,0(r22)
 4000364:	b000080e 	bge	r22,zero,4000388 <___vfprintf_internal_r+0x224>
 4000368:	05adc83a 	sub	r22,zero,r22
 400036c:	02800044 	movi	r10,1
 4000370:	00000606 	br	400038c <___vfprintf_internal_r+0x228>
 4000374:	05400404 	movi	r21,16
 4000378:	b0c00104 	addi	r3,r22,4
 400037c:	d8c00d15 	stw	r3,52(sp)
 4000380:	b5800017 	ldw	r22,0(r22)
 4000384:	002f883a 	mov	r23,zero
 4000388:	0015883a 	mov	r10,zero
 400038c:	d829883a 	mov	r20,sp
 4000390:	b0001426 	beq	r22,zero,40003e4 <___vfprintf_internal_r+0x280>
 4000394:	b009883a 	mov	r4,r22
 4000398:	a80b883a 	mov	r5,r21
 400039c:	da801015 	stw	r10,64(sp)
 40003a0:	40008c80 	call	40008c8 <__udivsi3>
 40003a4:	1549383a 	mul	r4,r2,r21
 40003a8:	00c00244 	movi	r3,9
 40003ac:	da801017 	ldw	r10,64(sp)
 40003b0:	b12dc83a 	sub	r22,r22,r4
 40003b4:	1d800216 	blt	r3,r22,40003c0 <___vfprintf_internal_r+0x25c>
 40003b8:	b5800c04 	addi	r22,r22,48
 40003bc:	00000506 	br	40003d4 <___vfprintf_internal_r+0x270>
 40003c0:	d8c00e17 	ldw	r3,56(sp)
 40003c4:	18000226 	beq	r3,zero,40003d0 <___vfprintf_internal_r+0x26c>
 40003c8:	b5800dc4 	addi	r22,r22,55
 40003cc:	00000106 	br	40003d4 <___vfprintf_internal_r+0x270>
 40003d0:	b58015c4 	addi	r22,r22,87
 40003d4:	a5800005 	stb	r22,0(r20)
 40003d8:	a5000044 	addi	r20,r20,1
 40003dc:	102d883a 	mov	r22,r2
 40003e0:	003feb06 	br	4000390 <__flash_exceptions_start+0xfbfe0370>
 40003e4:	a6c7c83a 	sub	r3,r20,sp
 40003e8:	d8c00a15 	stw	r3,40(sp)
 40003ec:	90c5c83a 	sub	r2,r18,r3
 40003f0:	00800a0e 	bge	zero,r2,400041c <___vfprintf_internal_r+0x2b8>
 40003f4:	a085883a 	add	r2,r20,r2
 40003f8:	01400c04 	movi	r5,48
 40003fc:	d8c00917 	ldw	r3,36(sp)
 4000400:	a009883a 	mov	r4,r20
 4000404:	a0c0032e 	bgeu	r20,r3,4000414 <___vfprintf_internal_r+0x2b0>
 4000408:	a5000044 	addi	r20,r20,1
 400040c:	21400005 	stb	r5,0(r4)
 4000410:	a0bffa1e 	bne	r20,r2,40003fc <__flash_exceptions_start+0xfbfe03dc>
 4000414:	a6c7c83a 	sub	r3,r20,sp
 4000418:	d8c00a15 	stw	r3,40(sp)
 400041c:	d8c00a17 	ldw	r3,40(sp)
 4000420:	50d3883a 	add	r9,r10,r3
 4000424:	d8c00b17 	ldw	r3,44(sp)
 4000428:	8a6dc83a 	sub	r22,r17,r9
 400042c:	18001726 	beq	r3,zero,400048c <___vfprintf_internal_r+0x328>
 4000430:	50000a26 	beq	r10,zero,400045c <___vfprintf_internal_r+0x2f8>
 4000434:	00800b44 	movi	r2,45
 4000438:	d8800805 	stb	r2,32(sp)
 400043c:	e0800117 	ldw	r2,4(fp)
 4000440:	01c00044 	movi	r7,1
 4000444:	d9800804 	addi	r6,sp,32
 4000448:	e00b883a 	mov	r5,fp
 400044c:	9809883a 	mov	r4,r19
 4000450:	103ee83a 	callr	r2
 4000454:	10004d1e 	bne	r2,zero,400058c <___vfprintf_internal_r+0x428>
 4000458:	84000044 	addi	r16,r16,1
 400045c:	0580070e 	bge	zero,r22,400047c <___vfprintf_internal_r+0x318>
 4000460:	b00f883a 	mov	r7,r22
 4000464:	01800c04 	movi	r6,48
 4000468:	e00b883a 	mov	r5,fp
 400046c:	9809883a 	mov	r4,r19
 4000470:	40000f80 	call	40000f8 <print_repeat>
 4000474:	1000451e 	bne	r2,zero,400058c <___vfprintf_internal_r+0x428>
 4000478:	85a1883a 	add	r16,r16,r22
 400047c:	d8c00a17 	ldw	r3,40(sp)
 4000480:	a013883a 	mov	r9,r20
 4000484:	1d2dc83a 	sub	r22,r3,r20
 4000488:	00002206 	br	4000514 <___vfprintf_internal_r+0x3b0>
 400048c:	0580090e 	bge	zero,r22,40004b4 <___vfprintf_internal_r+0x350>
 4000490:	b00f883a 	mov	r7,r22
 4000494:	01800804 	movi	r6,32
 4000498:	e00b883a 	mov	r5,fp
 400049c:	9809883a 	mov	r4,r19
 40004a0:	da801015 	stw	r10,64(sp)
 40004a4:	40000f80 	call	40000f8 <print_repeat>
 40004a8:	da801017 	ldw	r10,64(sp)
 40004ac:	1000371e 	bne	r2,zero,400058c <___vfprintf_internal_r+0x428>
 40004b0:	85a1883a 	add	r16,r16,r22
 40004b4:	503ff126 	beq	r10,zero,400047c <__flash_exceptions_start+0xfbfe045c>
 40004b8:	00800b44 	movi	r2,45
 40004bc:	d8800805 	stb	r2,32(sp)
 40004c0:	e0800117 	ldw	r2,4(fp)
 40004c4:	01c00044 	movi	r7,1
 40004c8:	d9800804 	addi	r6,sp,32
 40004cc:	e00b883a 	mov	r5,fp
 40004d0:	9809883a 	mov	r4,r19
 40004d4:	103ee83a 	callr	r2
 40004d8:	10002c1e 	bne	r2,zero,400058c <___vfprintf_internal_r+0x428>
 40004dc:	84000044 	addi	r16,r16,1
 40004e0:	003fe606 	br	400047c <__flash_exceptions_start+0xfbfe045c>
 40004e4:	4a7fffc4 	addi	r9,r9,-1
 40004e8:	48800003 	ldbu	r2,0(r9)
 40004ec:	01c00044 	movi	r7,1
 40004f0:	d9800804 	addi	r6,sp,32
 40004f4:	d8800805 	stb	r2,32(sp)
 40004f8:	e0800117 	ldw	r2,4(fp)
 40004fc:	e00b883a 	mov	r5,fp
 4000500:	da401015 	stw	r9,64(sp)
 4000504:	9809883a 	mov	r4,r19
 4000508:	103ee83a 	callr	r2
 400050c:	da401017 	ldw	r9,64(sp)
 4000510:	10001e1e 	bne	r2,zero,400058c <___vfprintf_internal_r+0x428>
 4000514:	8245c83a 	sub	r2,r16,r9
 4000518:	4d89883a 	add	r4,r9,r22
 400051c:	a085883a 	add	r2,r20,r2
 4000520:	013ff016 	blt	zero,r4,40004e4 <__flash_exceptions_start+0xfbfe04c4>
 4000524:	1021883a 	mov	r16,r2
 4000528:	dd800d17 	ldw	r22,52(sp)
 400052c:	00004406 	br	4000640 <___vfprintf_internal_r+0x4dc>
 4000530:	00800044 	movi	r2,1
 4000534:	1440080e 	bge	r2,r17,4000558 <___vfprintf_internal_r+0x3f4>
 4000538:	8d3fffc4 	addi	r20,r17,-1
 400053c:	a00f883a 	mov	r7,r20
 4000540:	01800804 	movi	r6,32
 4000544:	e00b883a 	mov	r5,fp
 4000548:	9809883a 	mov	r4,r19
 400054c:	40000f80 	call	40000f8 <print_repeat>
 4000550:	10000e1e 	bne	r2,zero,400058c <___vfprintf_internal_r+0x428>
 4000554:	8521883a 	add	r16,r16,r20
 4000558:	b0800017 	ldw	r2,0(r22)
 400055c:	01c00044 	movi	r7,1
 4000560:	d80d883a 	mov	r6,sp
 4000564:	d8800005 	stb	r2,0(sp)
 4000568:	e0800117 	ldw	r2,4(fp)
 400056c:	e00b883a 	mov	r5,fp
 4000570:	9809883a 	mov	r4,r19
 4000574:	b5000104 	addi	r20,r22,4
 4000578:	103ee83a 	callr	r2
 400057c:	1000031e 	bne	r2,zero,400058c <___vfprintf_internal_r+0x428>
 4000580:	84000044 	addi	r16,r16,1
 4000584:	a02d883a 	mov	r22,r20
 4000588:	00002d06 	br	4000640 <___vfprintf_internal_r+0x4dc>
 400058c:	00bfffc4 	movi	r2,-1
 4000590:	00003106 	br	4000658 <___vfprintf_internal_r+0x4f4>
 4000594:	b5000017 	ldw	r20,0(r22)
 4000598:	b0c00104 	addi	r3,r22,4
 400059c:	d8c00a15 	stw	r3,40(sp)
 40005a0:	a009883a 	mov	r4,r20
 40005a4:	400075c0 	call	400075c <strlen>
 40005a8:	8893c83a 	sub	r9,r17,r2
 40005ac:	102d883a 	mov	r22,r2
 40005b0:	0240090e 	bge	zero,r9,40005d8 <___vfprintf_internal_r+0x474>
 40005b4:	480f883a 	mov	r7,r9
 40005b8:	01800804 	movi	r6,32
 40005bc:	e00b883a 	mov	r5,fp
 40005c0:	9809883a 	mov	r4,r19
 40005c4:	da401015 	stw	r9,64(sp)
 40005c8:	40000f80 	call	40000f8 <print_repeat>
 40005cc:	da401017 	ldw	r9,64(sp)
 40005d0:	103fee1e 	bne	r2,zero,400058c <__flash_exceptions_start+0xfbfe056c>
 40005d4:	8261883a 	add	r16,r16,r9
 40005d8:	e0800117 	ldw	r2,4(fp)
 40005dc:	b00f883a 	mov	r7,r22
 40005e0:	a00d883a 	mov	r6,r20
 40005e4:	e00b883a 	mov	r5,fp
 40005e8:	9809883a 	mov	r4,r19
 40005ec:	103ee83a 	callr	r2
 40005f0:	103fe61e 	bne	r2,zero,400058c <__flash_exceptions_start+0xfbfe056c>
 40005f4:	85a1883a 	add	r16,r16,r22
 40005f8:	dd800a17 	ldw	r22,40(sp)
 40005fc:	00001006 	br	4000640 <___vfprintf_internal_r+0x4dc>
 4000600:	05c00044 	movi	r23,1
 4000604:	04bfffc4 	movi	r18,-1
 4000608:	d8000e15 	stw	zero,56(sp)
 400060c:	05400284 	movi	r21,10
 4000610:	9023883a 	mov	r17,r18
 4000614:	d8000c15 	stw	zero,48(sp)
 4000618:	d8000b15 	stw	zero,44(sp)
 400061c:	b829883a 	mov	r20,r23
 4000620:	00000806 	br	4000644 <___vfprintf_internal_r+0x4e0>
 4000624:	dd000b15 	stw	r20,44(sp)
 4000628:	05000084 	movi	r20,2
 400062c:	00000506 	br	4000644 <___vfprintf_internal_r+0x4e0>
 4000630:	00c00044 	movi	r3,1
 4000634:	d8c00c15 	stw	r3,48(sp)
 4000638:	050000c4 	movi	r20,3
 400063c:	00000106 	br	4000644 <___vfprintf_internal_r+0x4e0>
 4000640:	0029883a 	mov	r20,zero
 4000644:	d8c00f17 	ldw	r3,60(sp)
 4000648:	18c00044 	addi	r3,r3,1
 400064c:	d8c00f15 	stw	r3,60(sp)
 4000650:	003ede06 	br	40001cc <__flash_exceptions_start+0xfbfe01ac>
 4000654:	8005883a 	mov	r2,r16
 4000658:	dfc01a17 	ldw	ra,104(sp)
 400065c:	df001917 	ldw	fp,100(sp)
 4000660:	ddc01817 	ldw	r23,96(sp)
 4000664:	dd801717 	ldw	r22,92(sp)
 4000668:	dd401617 	ldw	r21,88(sp)
 400066c:	dd001517 	ldw	r20,84(sp)
 4000670:	dcc01417 	ldw	r19,80(sp)
 4000674:	dc801317 	ldw	r18,76(sp)
 4000678:	dc401217 	ldw	r17,72(sp)
 400067c:	dc001117 	ldw	r16,68(sp)
 4000680:	dec01b04 	addi	sp,sp,108
 4000684:	f800283a 	ret

04000688 <__vfprintf_internal>:
 4000688:	00810034 	movhi	r2,1024
 400068c:	10849804 	addi	r2,r2,4704
 4000690:	300f883a 	mov	r7,r6
 4000694:	280d883a 	mov	r6,r5
 4000698:	200b883a 	mov	r5,r4
 400069c:	11000017 	ldw	r4,0(r2)
 40006a0:	40001641 	jmpi	4000164 <___vfprintf_internal_r>

040006a4 <__sfvwrite_small_dev>:
 40006a4:	2880000b 	ldhu	r2,0(r5)
 40006a8:	1080020c 	andi	r2,r2,8
 40006ac:	10002126 	beq	r2,zero,4000734 <__sfvwrite_small_dev+0x90>
 40006b0:	2880008f 	ldh	r2,2(r5)
 40006b4:	defffa04 	addi	sp,sp,-24
 40006b8:	dc000015 	stw	r16,0(sp)
 40006bc:	dfc00515 	stw	ra,20(sp)
 40006c0:	dd000415 	stw	r20,16(sp)
 40006c4:	dcc00315 	stw	r19,12(sp)
 40006c8:	dc800215 	stw	r18,8(sp)
 40006cc:	dc400115 	stw	r17,4(sp)
 40006d0:	2821883a 	mov	r16,r5
 40006d4:	10001216 	blt	r2,zero,4000720 <__sfvwrite_small_dev+0x7c>
 40006d8:	2027883a 	mov	r19,r4
 40006dc:	3025883a 	mov	r18,r6
 40006e0:	3823883a 	mov	r17,r7
 40006e4:	05010004 	movi	r20,1024
 40006e8:	04400b0e 	bge	zero,r17,4000718 <__sfvwrite_small_dev+0x74>
 40006ec:	880f883a 	mov	r7,r17
 40006f0:	a440010e 	bge	r20,r17,40006f8 <__sfvwrite_small_dev+0x54>
 40006f4:	01c10004 	movi	r7,1024
 40006f8:	8140008f 	ldh	r5,2(r16)
 40006fc:	900d883a 	mov	r6,r18
 4000700:	9809883a 	mov	r4,r19
 4000704:	40007780 	call	4000778 <_write_r>
 4000708:	0080050e 	bge	zero,r2,4000720 <__sfvwrite_small_dev+0x7c>
 400070c:	88a3c83a 	sub	r17,r17,r2
 4000710:	90a5883a 	add	r18,r18,r2
 4000714:	003ff406 	br	40006e8 <__flash_exceptions_start+0xfbfe06c8>
 4000718:	0005883a 	mov	r2,zero
 400071c:	00000706 	br	400073c <__sfvwrite_small_dev+0x98>
 4000720:	8080000b 	ldhu	r2,0(r16)
 4000724:	10801014 	ori	r2,r2,64
 4000728:	8080000d 	sth	r2,0(r16)
 400072c:	00bfffc4 	movi	r2,-1
 4000730:	00000206 	br	400073c <__sfvwrite_small_dev+0x98>
 4000734:	00bfffc4 	movi	r2,-1
 4000738:	f800283a 	ret
 400073c:	dfc00517 	ldw	ra,20(sp)
 4000740:	dd000417 	ldw	r20,16(sp)
 4000744:	dcc00317 	ldw	r19,12(sp)
 4000748:	dc800217 	ldw	r18,8(sp)
 400074c:	dc400117 	ldw	r17,4(sp)
 4000750:	dc000017 	ldw	r16,0(sp)
 4000754:	dec00604 	addi	sp,sp,24
 4000758:	f800283a 	ret

0400075c <strlen>:
 400075c:	2005883a 	mov	r2,r4
 4000760:	10c00007 	ldb	r3,0(r2)
 4000764:	18000226 	beq	r3,zero,4000770 <strlen+0x14>
 4000768:	10800044 	addi	r2,r2,1
 400076c:	003ffc06 	br	4000760 <__flash_exceptions_start+0xfbfe0740>
 4000770:	1105c83a 	sub	r2,r2,r4
 4000774:	f800283a 	ret

04000778 <_write_r>:
 4000778:	defffd04 	addi	sp,sp,-12
 400077c:	dc000015 	stw	r16,0(sp)
 4000780:	04010034 	movhi	r16,1024
 4000784:	dc400115 	stw	r17,4(sp)
 4000788:	84052004 	addi	r16,r16,5248
 400078c:	2023883a 	mov	r17,r4
 4000790:	2809883a 	mov	r4,r5
 4000794:	300b883a 	mov	r5,r6
 4000798:	380d883a 	mov	r6,r7
 400079c:	dfc00215 	stw	ra,8(sp)
 40007a0:	80000015 	stw	zero,0(r16)
 40007a4:	4000a900 	call	4000a90 <write>
 40007a8:	00ffffc4 	movi	r3,-1
 40007ac:	10c0031e 	bne	r2,r3,40007bc <_write_r+0x44>
 40007b0:	80c00017 	ldw	r3,0(r16)
 40007b4:	18000126 	beq	r3,zero,40007bc <_write_r+0x44>
 40007b8:	88c00015 	stw	r3,0(r17)
 40007bc:	dfc00217 	ldw	ra,8(sp)
 40007c0:	dc400117 	ldw	r17,4(sp)
 40007c4:	dc000017 	ldw	r16,0(sp)
 40007c8:	dec00304 	addi	sp,sp,12
 40007cc:	f800283a 	ret

040007d0 <__divsi3>:
 40007d0:	20001b16 	blt	r4,zero,4000840 <__divsi3+0x70>
 40007d4:	000f883a 	mov	r7,zero
 40007d8:	28001616 	blt	r5,zero,4000834 <__divsi3+0x64>
 40007dc:	200d883a 	mov	r6,r4
 40007e0:	29001a2e 	bgeu	r5,r4,400084c <__divsi3+0x7c>
 40007e4:	00800804 	movi	r2,32
 40007e8:	00c00044 	movi	r3,1
 40007ec:	00000106 	br	40007f4 <__divsi3+0x24>
 40007f0:	10000d26 	beq	r2,zero,4000828 <__divsi3+0x58>
 40007f4:	294b883a 	add	r5,r5,r5
 40007f8:	10bfffc4 	addi	r2,r2,-1
 40007fc:	18c7883a 	add	r3,r3,r3
 4000800:	293ffb36 	bltu	r5,r4,40007f0 <__flash_exceptions_start+0xfbfe07d0>
 4000804:	0005883a 	mov	r2,zero
 4000808:	18000726 	beq	r3,zero,4000828 <__divsi3+0x58>
 400080c:	0005883a 	mov	r2,zero
 4000810:	31400236 	bltu	r6,r5,400081c <__divsi3+0x4c>
 4000814:	314dc83a 	sub	r6,r6,r5
 4000818:	10c4b03a 	or	r2,r2,r3
 400081c:	1806d07a 	srli	r3,r3,1
 4000820:	280ad07a 	srli	r5,r5,1
 4000824:	183ffa1e 	bne	r3,zero,4000810 <__flash_exceptions_start+0xfbfe07f0>
 4000828:	38000126 	beq	r7,zero,4000830 <__divsi3+0x60>
 400082c:	0085c83a 	sub	r2,zero,r2
 4000830:	f800283a 	ret
 4000834:	014bc83a 	sub	r5,zero,r5
 4000838:	39c0005c 	xori	r7,r7,1
 400083c:	003fe706 	br	40007dc <__flash_exceptions_start+0xfbfe07bc>
 4000840:	0109c83a 	sub	r4,zero,r4
 4000844:	01c00044 	movi	r7,1
 4000848:	003fe306 	br	40007d8 <__flash_exceptions_start+0xfbfe07b8>
 400084c:	00c00044 	movi	r3,1
 4000850:	003fee06 	br	400080c <__flash_exceptions_start+0xfbfe07ec>

04000854 <__modsi3>:
 4000854:	20001716 	blt	r4,zero,40008b4 <__modsi3+0x60>
 4000858:	000f883a 	mov	r7,zero
 400085c:	2005883a 	mov	r2,r4
 4000860:	28001216 	blt	r5,zero,40008ac <__modsi3+0x58>
 4000864:	2900162e 	bgeu	r5,r4,40008c0 <__modsi3+0x6c>
 4000868:	01800804 	movi	r6,32
 400086c:	00c00044 	movi	r3,1
 4000870:	00000106 	br	4000878 <__modsi3+0x24>
 4000874:	30000a26 	beq	r6,zero,40008a0 <__modsi3+0x4c>
 4000878:	294b883a 	add	r5,r5,r5
 400087c:	31bfffc4 	addi	r6,r6,-1
 4000880:	18c7883a 	add	r3,r3,r3
 4000884:	293ffb36 	bltu	r5,r4,4000874 <__flash_exceptions_start+0xfbfe0854>
 4000888:	18000526 	beq	r3,zero,40008a0 <__modsi3+0x4c>
 400088c:	1806d07a 	srli	r3,r3,1
 4000890:	11400136 	bltu	r2,r5,4000898 <__modsi3+0x44>
 4000894:	1145c83a 	sub	r2,r2,r5
 4000898:	280ad07a 	srli	r5,r5,1
 400089c:	183ffb1e 	bne	r3,zero,400088c <__flash_exceptions_start+0xfbfe086c>
 40008a0:	38000126 	beq	r7,zero,40008a8 <__modsi3+0x54>
 40008a4:	0085c83a 	sub	r2,zero,r2
 40008a8:	f800283a 	ret
 40008ac:	014bc83a 	sub	r5,zero,r5
 40008b0:	003fec06 	br	4000864 <__flash_exceptions_start+0xfbfe0844>
 40008b4:	0109c83a 	sub	r4,zero,r4
 40008b8:	01c00044 	movi	r7,1
 40008bc:	003fe706 	br	400085c <__flash_exceptions_start+0xfbfe083c>
 40008c0:	00c00044 	movi	r3,1
 40008c4:	003ff106 	br	400088c <__flash_exceptions_start+0xfbfe086c>

040008c8 <__udivsi3>:
 40008c8:	200d883a 	mov	r6,r4
 40008cc:	2900152e 	bgeu	r5,r4,4000924 <__udivsi3+0x5c>
 40008d0:	28001416 	blt	r5,zero,4000924 <__udivsi3+0x5c>
 40008d4:	00800804 	movi	r2,32
 40008d8:	00c00044 	movi	r3,1
 40008dc:	00000206 	br	40008e8 <__udivsi3+0x20>
 40008e0:	10000e26 	beq	r2,zero,400091c <__udivsi3+0x54>
 40008e4:	28000516 	blt	r5,zero,40008fc <__udivsi3+0x34>
 40008e8:	294b883a 	add	r5,r5,r5
 40008ec:	10bfffc4 	addi	r2,r2,-1
 40008f0:	18c7883a 	add	r3,r3,r3
 40008f4:	293ffa36 	bltu	r5,r4,40008e0 <__flash_exceptions_start+0xfbfe08c0>
 40008f8:	18000826 	beq	r3,zero,400091c <__udivsi3+0x54>
 40008fc:	0005883a 	mov	r2,zero
 4000900:	31400236 	bltu	r6,r5,400090c <__udivsi3+0x44>
 4000904:	314dc83a 	sub	r6,r6,r5
 4000908:	10c4b03a 	or	r2,r2,r3
 400090c:	1806d07a 	srli	r3,r3,1
 4000910:	280ad07a 	srli	r5,r5,1
 4000914:	183ffa1e 	bne	r3,zero,4000900 <__flash_exceptions_start+0xfbfe08e0>
 4000918:	f800283a 	ret
 400091c:	0005883a 	mov	r2,zero
 4000920:	f800283a 	ret
 4000924:	00c00044 	movi	r3,1
 4000928:	003ff406 	br	40008fc <__flash_exceptions_start+0xfbfe08dc>

0400092c <__umodsi3>:
 400092c:	2005883a 	mov	r2,r4
 4000930:	2900122e 	bgeu	r5,r4,400097c <__umodsi3+0x50>
 4000934:	28001116 	blt	r5,zero,400097c <__umodsi3+0x50>
 4000938:	01800804 	movi	r6,32
 400093c:	00c00044 	movi	r3,1
 4000940:	00000206 	br	400094c <__umodsi3+0x20>
 4000944:	30000c26 	beq	r6,zero,4000978 <__umodsi3+0x4c>
 4000948:	28000516 	blt	r5,zero,4000960 <__umodsi3+0x34>
 400094c:	294b883a 	add	r5,r5,r5
 4000950:	31bfffc4 	addi	r6,r6,-1
 4000954:	18c7883a 	add	r3,r3,r3
 4000958:	293ffa36 	bltu	r5,r4,4000944 <__flash_exceptions_start+0xfbfe0924>
 400095c:	18000626 	beq	r3,zero,4000978 <__umodsi3+0x4c>
 4000960:	1806d07a 	srli	r3,r3,1
 4000964:	11400136 	bltu	r2,r5,400096c <__umodsi3+0x40>
 4000968:	1145c83a 	sub	r2,r2,r5
 400096c:	280ad07a 	srli	r5,r5,1
 4000970:	183ffb1e 	bne	r3,zero,4000960 <__flash_exceptions_start+0xfbfe0940>
 4000974:	f800283a 	ret
 4000978:	f800283a 	ret
 400097c:	00c00044 	movi	r3,1
 4000980:	003ff706 	br	4000960 <__flash_exceptions_start+0xfbfe0940>

04000984 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4000984:	deffff04 	addi	sp,sp,-4
 4000988:	01010034 	movhi	r4,1024
 400098c:	01410034 	movhi	r5,1024
 4000990:	dfc00015 	stw	ra,0(sp)
 4000994:	21042004 	addi	r4,r4,4224
 4000998:	2944a004 	addi	r5,r5,4736

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 400099c:	2140061e 	bne	r4,r5,40009b8 <alt_load+0x34>
 40009a0:	010200b4 	movhi	r4,2050
 40009a4:	014200b4 	movhi	r5,2050
 40009a8:	21000804 	addi	r4,r4,32
 40009ac:	29400804 	addi	r5,r5,32
 40009b0:	2140121e 	bne	r4,r5,40009fc <alt_load+0x78>
 40009b4:	00000b06 	br	40009e4 <alt_load+0x60>
 40009b8:	00c10034 	movhi	r3,1024
 40009bc:	18c4a004 	addi	r3,r3,4736
 40009c0:	1907c83a 	sub	r3,r3,r4
 40009c4:	0005883a 	mov	r2,zero
  {
    while( to != end )
 40009c8:	10fff526 	beq	r2,r3,40009a0 <__flash_exceptions_start+0xfbfe0980>
    {
      *to++ = *from++;
 40009cc:	114f883a 	add	r7,r2,r5
 40009d0:	39c00017 	ldw	r7,0(r7)
 40009d4:	110d883a 	add	r6,r2,r4
 40009d8:	10800104 	addi	r2,r2,4
 40009dc:	31c00015 	stw	r7,0(r6)
 40009e0:	003ff906 	br	40009c8 <__flash_exceptions_start+0xfbfe09a8>
 40009e4:	01010034 	movhi	r4,1024
 40009e8:	01410034 	movhi	r5,1024
 40009ec:	21040704 	addi	r4,r4,4124
 40009f0:	29440704 	addi	r5,r5,4124

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 40009f4:	2140101e 	bne	r4,r5,4000a38 <alt_load+0xb4>
 40009f8:	00000b06 	br	4000a28 <alt_load+0xa4>
 40009fc:	00c200b4 	movhi	r3,2050
 4000a00:	18c00804 	addi	r3,r3,32
 4000a04:	1907c83a 	sub	r3,r3,r4
 4000a08:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4000a0c:	10fff526 	beq	r2,r3,40009e4 <__flash_exceptions_start+0xfbfe09c4>
    {
      *to++ = *from++;
 4000a10:	114f883a 	add	r7,r2,r5
 4000a14:	39c00017 	ldw	r7,0(r7)
 4000a18:	110d883a 	add	r6,r2,r4
 4000a1c:	10800104 	addi	r2,r2,4
 4000a20:	31c00015 	stw	r7,0(r6)
 4000a24:	003ff906 	br	4000a0c <__flash_exceptions_start+0xfbfe09ec>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4000a28:	4000e680 	call	4000e68 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 4000a2c:	dfc00017 	ldw	ra,0(sp)
 4000a30:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 4000a34:	4000f681 	jmpi	4000f68 <alt_icache_flush_all>
 4000a38:	00c10034 	movhi	r3,1024
 4000a3c:	18c42004 	addi	r3,r3,4224
 4000a40:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4000a44:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4000a48:	18bff726 	beq	r3,r2,4000a28 <__flash_exceptions_start+0xfbfe0a08>
    {
      *to++ = *from++;
 4000a4c:	114f883a 	add	r7,r2,r5
 4000a50:	39c00017 	ldw	r7,0(r7)
 4000a54:	110d883a 	add	r6,r2,r4
 4000a58:	10800104 	addi	r2,r2,4
 4000a5c:	31c00015 	stw	r7,0(r6)
 4000a60:	003ff906 	br	4000a48 <__flash_exceptions_start+0xfbfe0a28>

04000a64 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4000a64:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4000a68:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4000a6c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4000a70:	4000af00 	call	4000af0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4000a74:	4000b100 	call	4000b10 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 4000a78:	d1a08a17 	ldw	r6,-32216(gp)
 4000a7c:	d1608b17 	ldw	r5,-32212(gp)
 4000a80:	d1208c17 	ldw	r4,-32208(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 4000a84:	dfc00017 	ldw	ra,0(sp)
 4000a88:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 4000a8c:	400004c1 	jmpi	400004c <main>

04000a90 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 4000a90:	00800044 	movi	r2,1
 4000a94:	20800226 	beq	r4,r2,4000aa0 <write+0x10>
 4000a98:	00800084 	movi	r2,2
 4000a9c:	2080041e 	bne	r4,r2,4000ab0 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 4000aa0:	01010034 	movhi	r4,1024
 4000aa4:	000f883a 	mov	r7,zero
 4000aa8:	21049904 	addi	r4,r4,4708
 4000aac:	4000ba41 	jmpi	4000ba4 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 4000ab0:	d0a00817 	ldw	r2,-32736(gp)
 4000ab4:	10000926 	beq	r2,zero,4000adc <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4000ab8:	deffff04 	addi	sp,sp,-4
 4000abc:	dfc00015 	stw	ra,0(sp)
 4000ac0:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 4000ac4:	00c01444 	movi	r3,81
 4000ac8:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 4000acc:	00bfffc4 	movi	r2,-1
 4000ad0:	dfc00017 	ldw	ra,0(sp)
 4000ad4:	dec00104 	addi	sp,sp,4
 4000ad8:	f800283a 	ret
 4000adc:	d0a08904 	addi	r2,gp,-32220
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 4000ae0:	00c01444 	movi	r3,81
 4000ae4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 4000ae8:	00bfffc4 	movi	r2,-1
 4000aec:	f800283a 	ret

04000af0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4000af0:	deffff04 	addi	sp,sp,-4
 4000af4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
 4000af8:	4000f740 	call	4000f74 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4000afc:	00800044 	movi	r2,1
 4000b00:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4000b04:	dfc00017 	ldw	ra,0(sp)
 4000b08:	dec00104 	addi	sp,sp,4
 4000b0c:	f800283a 	ret

04000b10 <alt_sys_init>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4000b10:	01010034 	movhi	r4,1024
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4000b14:	deffff04 	addi	sp,sp,-4
 4000b18:	d1600404 	addi	r5,gp,-32752
 4000b1c:	21047504 	addi	r4,r4,4564
 4000b20:	dfc00015 	stw	ra,0(sp)
 4000b24:	4000e880 	call	4000e88 <alt_dev_llist_insert>
 4000b28:	01010034 	movhi	r4,1024
 4000b2c:	d1600404 	addi	r5,gp,-32752
 4000b30:	21046a04 	addi	r4,r4,4520
 4000b34:	4000e880 	call	4000e88 <alt_dev_llist_insert>
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    ALTERA_UP_AVALON_RS232_INIT ( WIFI_SERIAL_PORT, WIFI_Serial_Port);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_BUFFER, Char_Buffer);
 4000b38:	00810034 	movhi	r2,1024
 4000b3c:	10845804 	addi	r2,r2,4448
 4000b40:	10c00a17 	ldw	r3,40(r2)
 4000b44:	01401004 	movi	r5,64
 4000b48:	18c00117 	ldw	r3,4(r3)
 4000b4c:	193fffcc 	andi	r4,r3,65535
 4000b50:	1806d43a 	srli	r3,r3,16
 4000b54:	11000c15 	stw	r4,48(r2)
 4000b58:	10c00d15 	stw	r3,52(r2)
 4000b5c:	29000436 	bltu	r5,r4,4000b70 <alt_sys_init+0x60>
 4000b60:	01000fc4 	movi	r4,63
 4000b64:	11000f15 	stw	r4,60(r2)
 4000b68:	01000184 	movi	r4,6
 4000b6c:	11001015 	stw	r4,64(r2)
 4000b70:	01000804 	movi	r4,32
 4000b74:	20c00236 	bltu	r4,r3,4000b80 <alt_sys_init+0x70>
 4000b78:	00c007c4 	movi	r3,31
 4000b7c:	10c01115 	stw	r3,68(r2)
 4000b80:	01010034 	movhi	r4,1024
 4000b84:	21045804 	addi	r4,r4,4448
 4000b88:	4000d380 	call	4000d38 <alt_up_char_buffer_init>
 4000b8c:	01010034 	movhi	r4,1024
 4000b90:	d1600404 	addi	r5,gp,-32752
 4000b94:	21045804 	addi	r4,r4,4448
}
 4000b98:	dfc00017 	ldw	ra,0(sp)
 4000b9c:	dec00104 	addi	sp,sp,4
 4000ba0:	4000e881 	jmpi	4000e88 <alt_dev_llist_insert>

04000ba4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 4000ba4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4000ba8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 4000bac:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4000bb0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 4000bb4:	2980072e 	bgeu	r5,r6,4000bd4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4000bb8:	38c00037 	ldwio	r3,0(r7)
 4000bbc:	18ffffec 	andhi	r3,r3,65535
 4000bc0:	183ffc26 	beq	r3,zero,4000bb4 <__flash_exceptions_start+0xfbfe0b94>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 4000bc4:	28c00007 	ldb	r3,0(r5)
 4000bc8:	20c00035 	stwio	r3,0(r4)
 4000bcc:	29400044 	addi	r5,r5,1
 4000bd0:	003ff806 	br	4000bb4 <__flash_exceptions_start+0xfbfe0b94>

  return count;
}
 4000bd4:	f800283a 	ret

04000bd8 <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 4000bd8:	20800a17 	ldw	r2,40(r4)
 4000bdc:	10800104 	addi	r2,r2,4
 4000be0:	10c00037 	ldwio	r3,0(r2)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 4000be4:	18c00054 	ori	r3,r3,1
 4000be8:	10c00035 	stwio	r3,0(r2)
 4000bec:	f800283a 	ret

04000bf0 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 4000bf0:	20800a17 	ldw	r2,40(r4)
 4000bf4:	10800104 	addi	r2,r2,4
 4000bf8:	11000037 	ldwio	r4,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 4000bfc:	00ffff84 	movi	r3,-2
 4000c00:	20c6703a 	and	r3,r4,r3
 4000c04:	10c00035 	stwio	r3,0(r2)
 4000c08:	f800283a 	ret

04000c0c <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 4000c0c:	20800a17 	ldw	r2,40(r4)
 4000c10:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
 4000c14:	10bfffcc 	andi	r2,r2,65535
 4000c18:	f800283a 	ret

04000c1c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 4000c1c:	20800a17 	ldw	r2,40(r4)
 4000c20:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
 4000c24:	1004d43a 	srli	r2,r2,16
 4000c28:	f800283a 	ret

04000c2c <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
	return (parity_error ? -1 : 0);
 4000c2c:	200495ba 	slli	r2,r4,22
}
 4000c30:	1005d7fa 	srai	r2,r2,31
 4000c34:	f800283a 	ret

04000c38 <alt_up_rs232_write_data>:
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 4000c38:	20800a17 	ldw	r2,40(r4)
 4000c3c:	29403fcc 	andi	r5,r5,255
 4000c40:	11400035 	stwio	r5,0(r2)
	return 0;
}
 4000c44:	0005883a 	mov	r2,zero
 4000c48:	f800283a 	ret

04000c4c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 4000c4c:	20800a17 	ldw	r2,40(r4)
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
	return 0;
}

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 4000c50:	defffd04 	addi	sp,sp,-12
 4000c54:	dc400115 	stw	r17,4(sp)
 4000c58:	3023883a 	mov	r17,r6
 4000c5c:	dfc00215 	stw	ra,8(sp)
 4000c60:	dc000015 	stw	r16,0(sp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 4000c64:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 4000c68:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 4000c6c:	8009883a 	mov	r4,r16
 4000c70:	4000c2c0 	call	4000c2c <alt_up_rs232_check_parity>
 4000c74:	88800005 	stb	r2,0(r17)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 4000c78:	80a0000c 	andi	r2,r16,32768
 4000c7c:	1004d3fa 	srli	r2,r2,15
}
 4000c80:	10bfffc4 	addi	r2,r2,-1
 4000c84:	dfc00217 	ldw	ra,8(sp)
 4000c88:	dc400117 	ldw	r17,4(sp)
 4000c8c:	dc000017 	ldw	r16,0(sp)
 4000c90:	dec00304 	addi	sp,sp,12
 4000c94:	f800283a 	ret

04000c98 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 4000c98:	defff904 	addi	sp,sp,-28
 4000c9c:	dcc00415 	stw	r19,16(sp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 4000ca0:	24c00017 	ldw	r19,0(r4)
	*parity_error = alt_up_rs232_check_parity(data_reg);
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
}

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 4000ca4:	dc800315 	stw	r18,12(sp)
 4000ca8:	dc000115 	stw	r16,4(sp)
 4000cac:	dfc00615 	stw	ra,24(sp)
 4000cb0:	dd000515 	stw	r20,20(sp)
 4000cb4:	dc400215 	stw	r17,8(sp)
 4000cb8:	2821883a 	mov	r16,r5
 4000cbc:	29a5883a 	add	r18,r5,r6
 4000cc0:	2c23c83a 	sub	r17,r5,r16
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 4000cc4:	2c800726 	beq	r5,r18,4000ce4 <alt_up_rs232_read_fd+0x4c>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
 4000cc8:	d80d883a 	mov	r6,sp
 4000ccc:	9809883a 	mov	r4,r19
 4000cd0:	2d000044 	addi	r20,r5,1
 4000cd4:	4000c4c0 	call	4000c4c <alt_up_rs232_read_data>
 4000cd8:	1000021e 	bne	r2,zero,4000ce4 <alt_up_rs232_read_fd+0x4c>
 4000cdc:	a00b883a 	mov	r5,r20
 4000ce0:	003ff706 	br	4000cc0 <__flash_exceptions_start+0xfbfe0ca0>
			count++;
		else
			break;
	}
	return count;
}
 4000ce4:	8805883a 	mov	r2,r17
 4000ce8:	dfc00617 	ldw	ra,24(sp)
 4000cec:	dd000517 	ldw	r20,20(sp)
 4000cf0:	dcc00417 	ldw	r19,16(sp)
 4000cf4:	dc800317 	ldw	r18,12(sp)
 4000cf8:	dc400217 	ldw	r17,8(sp)
 4000cfc:	dc000117 	ldw	r16,4(sp)
 4000d00:	dec00704 	addi	sp,sp,28
 4000d04:	f800283a 	ret

04000d08 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 4000d08:	21000017 	ldw	r4,0(r4)
	}
	return count;
}

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 4000d0c:	3005883a 	mov	r2,r6
 4000d10:	2987883a 	add	r3,r5,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 4000d14:	28c00526 	beq	r5,r3,4000d2c <alt_up_rs232_write_fd+0x24>
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 4000d18:	29c00003 	ldbu	r7,0(r5)
 4000d1c:	21800a17 	ldw	r6,40(r4)
 4000d20:	31c00035 	stwio	r7,0(r6)
	while(len--)
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
		{
			count++;
			ptr++;
 4000d24:	29400044 	addi	r5,r5,1
 4000d28:	003ffa06 	br	4000d14 <__flash_exceptions_start+0xfbfe0cf4>
		}
		else
			break;
	}
	return count;
}
 4000d2c:	f800283a 	ret

04000d30 <alt_up_rs232_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 4000d30:	d1600404 	addi	r5,gp,-32752
 4000d34:	4000ef41 	jmpi	4000ef4 <alt_find_dev>

04000d38 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 4000d38:	defffe04 	addi	sp,sp,-8
 4000d3c:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
 4000d40:	24000217 	ldw	r16,8(r4)
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 4000d44:	dfc00115 	stw	ra,4(sp)
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 4000d48:	80800007 	ldb	r2,0(r16)
 4000d4c:	10000926 	beq	r2,zero,4000d74 <alt_up_char_buffer_init+0x3c>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 4000d50:	01410034 	movhi	r5,1024
 4000d54:	29440d04 	addi	r5,r5,4148
 4000d58:	8009883a 	mov	r4,r16
 4000d5c:	4000fe40 	call	4000fe4 <strcmp>
 4000d60:	1000021e 	bne	r2,zero,4000d6c <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
 4000d64:	80000005 	stb	zero,0(r16)
			break;
 4000d68:	00000206 	br	4000d74 <alt_up_char_buffer_init+0x3c>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 4000d6c:	84000044 	addi	r16,r16,1
 4000d70:	003ff506 	br	4000d48 <__flash_exceptions_start+0xfbfe0d28>
			break;
		}
	}
	
	return;
}
 4000d74:	dfc00117 	ldw	ra,4(sp)
 4000d78:	dc000017 	ldw	r16,0(sp)
 4000d7c:	dec00204 	addi	sp,sp,8
 4000d80:	f800283a 	ret

04000d84 <alt_up_char_buffer_open_dev>:
alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 4000d84:	d1600404 	addi	r5,gp,-32752
 4000d88:	4000ef41 	jmpi	4000ef4 <alt_find_dev>

04000d8c <alt_up_char_buffer_draw>:
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 4000d8c:	20800c17 	ldw	r2,48(r4)
 4000d90:	3080102e 	bgeu	r6,r2,4000dd4 <alt_up_char_buffer_draw+0x48>
 4000d94:	20800d17 	ldw	r2,52(r4)
 4000d98:	38800e2e 	bgeu	r7,r2,4000dd4 <alt_up_char_buffer_draw+0x48>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 4000d9c:	20800f17 	ldw	r2,60(r4)
 4000da0:	3084703a 	and	r2,r6,r2
 4000da4:	21800e17 	ldw	r6,56(r4)
 4000da8:	1186983a 	sll	r3,r2,r6
 4000dac:	20801117 	ldw	r2,68(r4)
 4000db0:	21801017 	ldw	r6,64(r4)
 4000db4:	388e703a 	and	r7,r7,r2
 4000db8:	398e983a 	sll	r7,r7,r6
 4000dbc:	20800b17 	ldw	r2,44(r4)
 4000dc0:	19ccb03a 	or	r6,r3,r7
 4000dc4:	308d883a 	add	r6,r6,r2
 4000dc8:	31400025 	stbio	r5,0(r6)

	return 0;
 4000dcc:	0005883a 	mov	r2,zero
 4000dd0:	f800283a 	ret

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
 4000dd4:	00bfffc4 	movi	r2,-1
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);

	return 0;
}
 4000dd8:	f800283a 	ret

04000ddc <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 4000ddc:	20800c17 	ldw	r2,48(r4)
 4000de0:	30800236 	bltu	r6,r2,4000dec <alt_up_char_buffer_string+0x10>
		return -1;
 4000de4:	00bfffc4 	movi	r2,-1
 4000de8:	f800283a 	ret
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 4000dec:	20800d17 	ldw	r2,52(r4)
 4000df0:	38bffc2e 	bgeu	r7,r2,4000de4 <__flash_exceptions_start+0xfbfe0dc4>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
 4000df4:	20801017 	ldw	r2,64(r4)
 4000df8:	388e983a 	sll	r7,r7,r2
 4000dfc:	398f883a 	add	r7,r7,r6
 4000e00:	394fc83a 	sub	r7,r7,r5

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
 4000e04:	314dc83a 	sub	r6,r6,r5
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 4000e08:	28c00003 	ldbu	r3,0(r5)
 4000e0c:	29d3883a 	add	r9,r5,r7
 4000e10:	1a003fcc 	andi	r8,r3,255
 4000e14:	4200201c 	xori	r8,r8,128
 4000e18:	423fe004 	addi	r8,r8,-128
 4000e1c:	40000826 	beq	r8,zero,4000e40 <alt_up_char_buffer_string+0x64>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 4000e20:	20800b17 	ldw	r2,44(r4)
 4000e24:	4885883a 	add	r2,r9,r2
 4000e28:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
 4000e2c:	20800c17 	ldw	r2,48(r4)
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
 4000e30:	29400044 	addi	r5,r5,1
		if (++x >= char_buffer->x_resolution)
 4000e34:	2987883a 	add	r3,r5,r6
 4000e38:	18bff336 	bltu	r3,r2,4000e08 <__flash_exceptions_start+0xfbfe0de8>
 4000e3c:	003fe906 	br	4000de4 <__flash_exceptions_start+0xfbfe0dc4>
			return -1;
		++offset;
	}
	return 0;
 4000e40:	0005883a 	mov	r2,zero
}
 4000e44:	f800283a 	ret

04000e48 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 4000e48:	20800a17 	ldw	r2,40(r4)
 4000e4c:	00c00044 	movi	r3,1
 4000e50:	10c000a5 	stbio	r3,2(r2)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 4000e54:	20800a17 	ldw	r2,40(r4)
 4000e58:	108000a3 	ldbuio	r2,2(r2)
 4000e5c:	1080004c 	andi	r2,r2,1
 4000e60:	103ffc1e 	bne	r2,zero,4000e54 <__flash_exceptions_start+0xfbfe0e34>
	return 0;
}
 4000e64:	f800283a 	ret

04000e68 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4000e68:	0005883a 	mov	r2,zero
 4000e6c:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4000e70:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4000e74:	10800804 	addi	r2,r2,32
 4000e78:	10fffd1e 	bne	r2,r3,4000e70 <__flash_exceptions_start+0xfbfe0e50>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4000e7c:	f800283a 	ret

04000e80 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 4000e80:	3005883a 	mov	r2,r6
 4000e84:	f800283a 	ret

04000e88 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4000e88:	20000226 	beq	r4,zero,4000e94 <alt_dev_llist_insert+0xc>
 4000e8c:	20800217 	ldw	r2,8(r4)
 4000e90:	1000101e 	bne	r2,zero,4000ed4 <alt_dev_llist_insert+0x4c>
 4000e94:	d0a00817 	ldw	r2,-32736(gp)
 4000e98:	10000926 	beq	r2,zero,4000ec0 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4000e9c:	deffff04 	addi	sp,sp,-4
 4000ea0:	dfc00015 	stw	ra,0(sp)
 4000ea4:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 4000ea8:	00c00584 	movi	r3,22
 4000eac:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 4000eb0:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 4000eb4:	dfc00017 	ldw	ra,0(sp)
 4000eb8:	dec00104 	addi	sp,sp,4
 4000ebc:	f800283a 	ret
 4000ec0:	d0a08904 	addi	r2,gp,-32220
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 4000ec4:	00c00584 	movi	r3,22
 4000ec8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 4000ecc:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 4000ed0:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
 4000ed4:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4000ed8:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
 4000edc:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
 4000ee0:	28800017 	ldw	r2,0(r5)
 4000ee4:	11000115 	stw	r4,4(r2)
  list->next           = entry;
 4000ee8:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
 4000eec:	0005883a 	mov	r2,zero
 4000ef0:	f800283a 	ret

04000ef4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4000ef4:	defffb04 	addi	sp,sp,-20
 4000ef8:	dcc00315 	stw	r19,12(sp)
 4000efc:	dc800215 	stw	r18,8(sp)
 4000f00:	dc400115 	stw	r17,4(sp)
 4000f04:	dc000015 	stw	r16,0(sp)
 4000f08:	dfc00415 	stw	ra,16(sp)
 4000f0c:	2027883a 	mov	r19,r4
 4000f10:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
 4000f14:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
 4000f18:	400075c0 	call	400075c <strlen>
 4000f1c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4000f20:	84400726 	beq	r16,r17,4000f40 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4000f24:	81000217 	ldw	r4,8(r16)
 4000f28:	900d883a 	mov	r6,r18
 4000f2c:	980b883a 	mov	r5,r19
 4000f30:	4000fb40 	call	4000fb4 <memcmp>
 4000f34:	10000426 	beq	r2,zero,4000f48 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 4000f38:	84000017 	ldw	r16,0(r16)
 4000f3c:	003ff806 	br	4000f20 <__flash_exceptions_start+0xfbfe0f00>
  }
  
  /* No match found */
  
  return NULL;
 4000f40:	0005883a 	mov	r2,zero
 4000f44:	00000106 	br	4000f4c <alt_find_dev+0x58>
 4000f48:	8005883a 	mov	r2,r16
}
 4000f4c:	dfc00417 	ldw	ra,16(sp)
 4000f50:	dcc00317 	ldw	r19,12(sp)
 4000f54:	dc800217 	ldw	r18,8(sp)
 4000f58:	dc400117 	ldw	r17,4(sp)
 4000f5c:	dc000017 	ldw	r16,0(sp)
 4000f60:	dec00504 	addi	sp,sp,20
 4000f64:	f800283a 	ret

04000f68 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4000f68:	01440004 	movi	r5,4096
 4000f6c:	0009883a 	mov	r4,zero
 4000f70:	4000f7c1 	jmpi	4000f7c <alt_icache_flush>

04000f74 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 4000f74:	000170fa 	wrctl	ienable,zero
 4000f78:	f800283a 	ret

04000f7c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 4000f7c:	00840004 	movi	r2,4096
 4000f80:	1140012e 	bgeu	r2,r5,4000f88 <alt_icache_flush+0xc>
 4000f84:	100b883a 	mov	r5,r2
 4000f88:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4000f8c:	2005883a 	mov	r2,r4
 4000f90:	1140032e 	bgeu	r2,r5,4000fa0 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4000f94:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4000f98:	10800804 	addi	r2,r2,32
 4000f9c:	003ffc06 	br	4000f90 <__flash_exceptions_start+0xfbfe0f70>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4000fa0:	210007cc 	andi	r4,r4,31
 4000fa4:	20000126 	beq	r4,zero,4000fac <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4000fa8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4000fac:	0000203a 	flushp
 4000fb0:	f800283a 	ret

04000fb4 <memcmp>:
 4000fb4:	218d883a 	add	r6,r4,r6
 4000fb8:	21800826 	beq	r4,r6,4000fdc <memcmp+0x28>
 4000fbc:	20800003 	ldbu	r2,0(r4)
 4000fc0:	28c00003 	ldbu	r3,0(r5)
 4000fc4:	10c00226 	beq	r2,r3,4000fd0 <memcmp+0x1c>
 4000fc8:	10c5c83a 	sub	r2,r2,r3
 4000fcc:	f800283a 	ret
 4000fd0:	21000044 	addi	r4,r4,1
 4000fd4:	29400044 	addi	r5,r5,1
 4000fd8:	003ff706 	br	4000fb8 <__flash_exceptions_start+0xfbfe0f98>
 4000fdc:	0005883a 	mov	r2,zero
 4000fe0:	f800283a 	ret

04000fe4 <strcmp>:
 4000fe4:	20800003 	ldbu	r2,0(r4)
 4000fe8:	10c03fcc 	andi	r3,r2,255
 4000fec:	18c0201c 	xori	r3,r3,128
 4000ff0:	18ffe004 	addi	r3,r3,-128
 4000ff4:	18000526 	beq	r3,zero,400100c <strcmp+0x28>
 4000ff8:	29800007 	ldb	r6,0(r5)
 4000ffc:	1980031e 	bne	r3,r6,400100c <strcmp+0x28>
 4001000:	21000044 	addi	r4,r4,1
 4001004:	29400044 	addi	r5,r5,1
 4001008:	003ff606 	br	4000fe4 <__flash_exceptions_start+0xfbfe0fc4>
 400100c:	28c00003 	ldbu	r3,0(r5)
 4001010:	10803fcc 	andi	r2,r2,255
 4001014:	10c5c83a 	sub	r2,r2,r3
 4001018:	f800283a 	ret
