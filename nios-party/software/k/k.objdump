
k.elf:     file format elf32-littlenios2
k.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000020

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00000720 memsz 0x00000720 flags r-x
    LOAD off    0x00001740 vaddr 0x04000740 paddr 0x04000894 align 2**12
         filesz 0x00000154 memsz 0x00000154 flags rw-
    LOAD off    0x000019e8 vaddr 0x040009e8 paddr 0x040009e8 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  04000020  04000020  00001894  2**0
                  CONTENTS
  2 .text         000006a8  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000078  040006c8  040006c8  000016c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000154  04000740  04000894  00001740  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  040009e8  040009e8  000019e8  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  040009f8  040009f8  00001894  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000278  00000000  00000000  000018b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00002221  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000dff  00000000  00000000  00003d51  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000106e  00000000  00000000  00004b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002f8  00000000  00000000  00005bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000be0  00000000  00000000  00005eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000057b  00000000  00000000  00006a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00007014  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000110  00000000  00000000  00007048  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000826a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000826d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00008270  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00008271  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00008272  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00008276  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0000827a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  0000827e  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003b  00000000  00000000  00008282  2**0
                  CONTENTS, READONLY
 26 .jdi          0000448d  00000000  00000000  000082bd  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00061a91  00000000  00000000  0000c74a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000020 l    d  .text	00000000 .text
040006c8 l    d  .rodata	00000000 .rodata
04000740 l    d  .rwdata	00000000 .rwdata
040009e8 l    d  .bss	00000000 .bss
040009f8 l    d  .SDRAM	00000000 .SDRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../k_bsp//obj/HAL/src/crt0.o
04000068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
040007d8 l     O .rwdata	00000048 Char_Buffer
04000784 l     O .rwdata	00000054 Pixel_Buffer
04000740 l     O .rwdata	00000044 RGB_Resampler
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04000510 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
04000164 g     F .text	0000002c alt_main
04000894 g       *ABS*	00000000 __flash_rwdata_start
0400046c g     F .text	0000006c alt_up_char_buffer_string
0400041c g     F .text	00000050 alt_up_char_buffer_draw
04000190 g     F .text	00000038 alt_putstr
04000604 g     F .text	00000008 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000001c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
040009f4 g     O .bss	00000004 errno
040009ec g     O .bss	00000004 alt_argv
04008878 g       *ABS*	00000000 _gp
04000820 g     O .rwdata	00000030 alt_fd_list
04000584 g     F .text	00000074 alt_find_dev
040004d8 g     F .text	00000020 alt_up_char_buffer_clear
0400060c g     F .text	00000038 alt_icache_flush
0400087c g     O .rwdata	00000004 alt_max_fd
040009f8 g       *ABS*	00000000 __bss_end
04000850 g     O .rwdata	00000028 alt_dev_null
040004f8 g     F .text	00000018 alt_dcache_flush_all
04000894 g       *ABS*	00000000 __ram_rwdata_end
04000880 g     O .rwdata	00000008 alt_dev_list
04000740 g       *ABS*	00000000 __ram_rodata_end
04000000 g       *ABS*	00000000 __alt_mem_SDRAM
040009f8 g       *ABS*	00000000 end
040003c8 g     F .text	0000004c alt_up_char_buffer_init
08000000 g       *ABS*	00000000 __alt_stack_pointer
04000394 g     F .text	00000034 altera_avalon_jtag_uart_write
04000020 g     F .text	0000004c _start
040001e8 g     F .text	000001ac alt_sys_init
04000740 g       *ABS*	00000000 __ram_rwdata_start
040006c8 g       *ABS*	00000000 __ram_rodata_start
04000644 g     F .text	00000030 memcmp
040009f8 g       *ABS*	00000000 __alt_stack_base
04000518 g     F .text	0000006c alt_dev_llist_insert
040009e8 g       *ABS*	00000000 __bss_start
0400006c g     F .text	00000018 main
040009e8 g     O .bss	00000004 alt_envp
04000414 g     F .text	00000008 alt_up_char_buffer_open_dev
04000878 g     O .rwdata	00000004 JTAG
04000890 g     O .rwdata	00000004 alt_errno
04000674 g     F .text	00000038 strcmp
040006c8 g       *ABS*	00000000 __flash_rodata_start
040001c8 g     F .text	00000020 alt_irq_init
040009f0 g     O .bss	00000004 alt_argc
04000888 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04000894 g       *ABS*	00000000 _edata
040009f8 g       *ABS*	00000000 _end
04000020 g       *ABS*	00000000 __ram_exceptions_end
08000000 g       *ABS*	00000000 __alt_data_end
0400001c g       .entry	00000000 _exit
040006ac g     F .text	0000001c strlen
040005f8 g     F .text	0000000c alt_icache_flush_all
04000084 g     F .text	000000e0 alt_load



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08400814 	ori	at,at,32
    jmp r1
 4000018:	0800683a 	jmp	at

0400001c <_exit>:
 400001c:	00000000 	call	0 <__reset-0x4000000>

Disassembly of section .text:

04000020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 4000028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 400002c:	00bffd16 	blt	zero,r2,4000024 <__alt_data_end+0xfc000024>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000030:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000034:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000038:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 400003c:	d6a21e14 	ori	gp,gp,34936
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000040:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000044:	10827a14 	ori	r2,r2,2536

    movhi r3, %hi(__bss_end)
 4000048:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 400004c:	18c27e14 	ori	r3,r3,2552

    beq r2, r3, 1f
 4000050:	10c00326 	beq	r2,r3,4000060 <_start+0x40>

0:
    stw zero, (r2)
 4000054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400005c:	10fffd36 	bltu	r2,r3,4000054 <__alt_data_end+0xfc000054>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000060:	40000840 	call	4000084 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000064:	40001640 	call	4000164 <alt_main>

04000068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000068:	003fff06 	br	4000068 <__alt_data_end+0xfc000068>

0400006c <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
 400006c:	01010034 	movhi	r4,1024
 */

#include "sys/alt_stdio.h"

int main()
{ 
 4000070:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
 4000074:	2101b204 	addi	r4,r4,1736
 */

#include "sys/alt_stdio.h"

int main()
{ 
 4000078:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
 400007c:	40001900 	call	4000190 <alt_putstr>
 4000080:	003fff06 	br	4000080 <__alt_data_end+0xfc000080>

04000084 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4000084:	deffff04 	addi	sp,sp,-4
 4000088:	01010034 	movhi	r4,1024
 400008c:	01410034 	movhi	r5,1024
 4000090:	dfc00015 	stw	ra,0(sp)
 4000094:	2101d004 	addi	r4,r4,1856
 4000098:	29422504 	addi	r5,r5,2196

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 400009c:	2140061e 	bne	r4,r5,40000b8 <alt_load+0x34>
 40000a0:	01010034 	movhi	r4,1024
 40000a4:	01410034 	movhi	r5,1024
 40000a8:	21000804 	addi	r4,r4,32
 40000ac:	29400804 	addi	r5,r5,32
 40000b0:	2140121e 	bne	r4,r5,40000fc <alt_load+0x78>
 40000b4:	00000b06 	br	40000e4 <alt_load+0x60>
 40000b8:	00c10034 	movhi	r3,1024
 40000bc:	18c22504 	addi	r3,r3,2196
 40000c0:	1907c83a 	sub	r3,r3,r4
 40000c4:	0005883a 	mov	r2,zero
  {
    while( to != end )
 40000c8:	10fff526 	beq	r2,r3,40000a0 <__alt_data_end+0xfc0000a0>
    {
      *to++ = *from++;
 40000cc:	114f883a 	add	r7,r2,r5
 40000d0:	39c00017 	ldw	r7,0(r7)
 40000d4:	110d883a 	add	r6,r2,r4
 40000d8:	10800104 	addi	r2,r2,4
 40000dc:	31c00015 	stw	r7,0(r6)
 40000e0:	003ff906 	br	40000c8 <__alt_data_end+0xfc0000c8>
 40000e4:	01010034 	movhi	r4,1024
 40000e8:	01410034 	movhi	r5,1024
 40000ec:	2101b204 	addi	r4,r4,1736
 40000f0:	2941b204 	addi	r5,r5,1736

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 40000f4:	2140101e 	bne	r4,r5,4000138 <alt_load+0xb4>
 40000f8:	00000b06 	br	4000128 <alt_load+0xa4>
 40000fc:	00c10034 	movhi	r3,1024
 4000100:	18c00804 	addi	r3,r3,32
 4000104:	1907c83a 	sub	r3,r3,r4
 4000108:	0005883a 	mov	r2,zero
  {
    while( to != end )
 400010c:	10fff526 	beq	r2,r3,40000e4 <__alt_data_end+0xfc0000e4>
    {
      *to++ = *from++;
 4000110:	114f883a 	add	r7,r2,r5
 4000114:	39c00017 	ldw	r7,0(r7)
 4000118:	110d883a 	add	r6,r2,r4
 400011c:	10800104 	addi	r2,r2,4
 4000120:	31c00015 	stw	r7,0(r6)
 4000124:	003ff906 	br	400010c <__alt_data_end+0xfc00010c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4000128:	40004f80 	call	40004f8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 400012c:	dfc00017 	ldw	ra,0(sp)
 4000130:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 4000134:	40005f81 	jmpi	40005f8 <alt_icache_flush_all>
 4000138:	00c10034 	movhi	r3,1024
 400013c:	18c1d004 	addi	r3,r3,1856
 4000140:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4000144:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4000148:	18bff726 	beq	r3,r2,4000128 <__alt_data_end+0xfc000128>
    {
      *to++ = *from++;
 400014c:	114f883a 	add	r7,r2,r5
 4000150:	39c00017 	ldw	r7,0(r7)
 4000154:	110d883a 	add	r6,r2,r4
 4000158:	10800104 	addi	r2,r2,4
 400015c:	31c00015 	stw	r7,0(r6)
 4000160:	003ff906 	br	4000148 <__alt_data_end+0xfc000148>

04000164 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4000164:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4000168:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400016c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4000170:	40001c80 	call	40001c8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4000174:	40001e80 	call	40001e8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 4000178:	d1a05c17 	ldw	r6,-32400(gp)
 400017c:	d1605d17 	ldw	r5,-32396(gp)
 4000180:	d1205e17 	ldw	r4,-32392(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 4000184:	dfc00017 	ldw	ra,0(sp)
 4000188:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 400018c:	400006c1 	jmpi	400006c <main>

04000190 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 4000190:	defffe04 	addi	sp,sp,-8
 4000194:	dc000015 	stw	r16,0(sp)
 4000198:	dfc00115 	stw	ra,4(sp)
 400019c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 40001a0:	40006ac0 	call	40006ac <strlen>
 40001a4:	01010034 	movhi	r4,1024
 40001a8:	000f883a 	mov	r7,zero
 40001ac:	100d883a 	mov	r6,r2
 40001b0:	800b883a 	mov	r5,r16
 40001b4:	21021e04 	addi	r4,r4,2168
#else
    return fputs(str, stdout);
#endif
#endif
}
 40001b8:	dfc00117 	ldw	ra,4(sp)
 40001bc:	dc000017 	ldw	r16,0(sp)
 40001c0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 40001c4:	40003941 	jmpi	4000394 <altera_avalon_jtag_uart_write>

040001c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 40001c8:	deffff04 	addi	sp,sp,-4
 40001cc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
 40001d0:	40006040 	call	4000604 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 40001d4:	00800044 	movi	r2,1
 40001d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 40001dc:	dfc00017 	ldw	ra,0(sp)
 40001e0:	dec00104 	addi	sp,sp,4
 40001e4:	f800283a 	ret

040001e8 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_BUFFER, Char_Buffer);
 40001e8:	00810034 	movhi	r2,1024
 40001ec:	1081f604 	addi	r2,r2,2008
 40001f0:	10c00a17 	ldw	r3,40(r2)
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40001f4:	deffff04 	addi	sp,sp,-4
 40001f8:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_BUFFER, Char_Buffer);
 40001fc:	18c00117 	ldw	r3,4(r3)
 4000200:	01401004 	movi	r5,64
 4000204:	193fffcc 	andi	r4,r3,65535
 4000208:	1806d43a 	srli	r3,r3,16
 400020c:	11000c15 	stw	r4,48(r2)
 4000210:	10c00d15 	stw	r3,52(r2)
 4000214:	29000436 	bltu	r5,r4,4000228 <alt_sys_init+0x40>
 4000218:	01000fc4 	movi	r4,63
 400021c:	11000f15 	stw	r4,60(r2)
 4000220:	01000184 	movi	r4,6
 4000224:	11001015 	stw	r4,64(r2)
 4000228:	01000804 	movi	r4,32
 400022c:	20c00236 	bltu	r4,r3,4000238 <alt_sys_init+0x50>
 4000230:	00c007c4 	movi	r3,31
 4000234:	10c01115 	stw	r3,68(r2)
 4000238:	01010034 	movhi	r4,1024
 400023c:	2101f604 	addi	r4,r4,2008
 4000240:	40003c80 	call	40003c8 <alt_up_char_buffer_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4000244:	01010034 	movhi	r4,1024
 4000248:	d1600204 	addi	r5,gp,-32760
 400024c:	2101f604 	addi	r4,r4,2008
 4000250:	40005180 	call	4000518 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER, Pixel_Buffer);
 4000254:	00810034 	movhi	r2,1024
 4000258:	1081e104 	addi	r2,r2,1924
 400025c:	10c00a17 	ldw	r3,40(r2)
 4000260:	01c00044 	movi	r7,1
 4000264:	19000017 	ldw	r4,0(r3)
 4000268:	11000b15 	stw	r4,44(r2)
 400026c:	19000117 	ldw	r4,4(r3)
 4000270:	11000c15 	stw	r4,48(r2)
 4000274:	19000204 	addi	r4,r3,8
 4000278:	2140000b 	ldhu	r5,0(r4)
 400027c:	18c00304 	addi	r3,r3,12
 4000280:	11400f15 	stw	r5,60(r2)
 4000284:	21000017 	ldw	r4,0(r4)
 4000288:	2008d43a 	srli	r4,r4,16
 400028c:	11001015 	stw	r4,64(r2)
 4000290:	19000017 	ldw	r4,0(r3)
 4000294:	2009d07a 	srai	r4,r4,1
 4000298:	2100004c 	andi	r4,r4,1
 400029c:	11000d15 	stw	r4,52(r2)
 40002a0:	19000017 	ldw	r4,0(r3)
 40002a4:	2009d13a 	srai	r4,r4,4
 40002a8:	210003cc 	andi	r4,r4,15
 40002ac:	11000e15 	stw	r4,56(r2)
 40002b0:	19400017 	ldw	r5,0(r3)
 40002b4:	2807d43a 	srai	r3,r5,16
 40002b8:	280cd63a 	srli	r6,r5,24
 40002bc:	21c0021e 	bne	r4,r7,40002c8 <alt_sys_init+0xe0>
 40002c0:	10001115 	stw	zero,68(r2)
 40002c4:	00000506 	br	40002dc <alt_sys_init+0xf4>
 40002c8:	01400084 	movi	r5,2
 40002cc:	2140021e 	bne	r4,r5,40002d8 <alt_sys_init+0xf0>
 40002d0:	11c01115 	stw	r7,68(r2)
 40002d4:	00000106 	br	40002dc <alt_sys_init+0xf4>
 40002d8:	11401115 	stw	r5,68(r2)
 40002dc:	18c03fcc 	andi	r3,r3,255
 40002e0:	01400804 	movi	r5,32
 40002e4:	28cfc83a 	sub	r7,r5,r3
 40002e8:	013fffc4 	movi	r4,-1
 40002ec:	21ced83a 	srl	r7,r4,r7
 40002f0:	298bc83a 	sub	r5,r5,r6
 40002f4:	2148d83a 	srl	r4,r4,r5
 40002f8:	11c01215 	stw	r7,72(r2)
 40002fc:	11c01117 	ldw	r7,68(r2)
 4000300:	11001415 	stw	r4,80(r2)
 4000304:	01010034 	movhi	r4,1024
 4000308:	38c7883a 	add	r3,r7,r3
 400030c:	d1600204 	addi	r5,gp,-32760
 4000310:	2101e104 	addi	r4,r4,1924
 4000314:	10c01315 	stw	r3,76(r2)
 4000318:	40005180 	call	4000518 <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( RGB_RESAMPLER, RGB_Resampler);
 400031c:	01010034 	movhi	r4,1024
 4000320:	2101d004 	addi	r4,r4,1856
 4000324:	20800a17 	ldw	r2,40(r4)
 4000328:	d1600204 	addi	r5,gp,-32760
 400032c:	10c00017 	ldw	r3,0(r2)
 4000330:	18c003cc 	andi	r3,r3,15
 4000334:	20c00b15 	stw	r3,44(r4)
 4000338:	10c00017 	ldw	r3,0(r2)
 400033c:	1807d13a 	srai	r3,r3,4
 4000340:	18c0004c 	andi	r3,r3,1
 4000344:	20c00c15 	stw	r3,48(r4)
 4000348:	10c00017 	ldw	r3,0(r2)
 400034c:	1807d17a 	srai	r3,r3,5
 4000350:	18c0004c 	andi	r3,r3,1
 4000354:	20c00d15 	stw	r3,52(r4)
 4000358:	10c00017 	ldw	r3,0(r2)
 400035c:	1807d43a 	srai	r3,r3,16
 4000360:	18c003cc 	andi	r3,r3,15
 4000364:	20c00e15 	stw	r3,56(r4)
 4000368:	10c00017 	ldw	r3,0(r2)
 400036c:	1807d53a 	srai	r3,r3,20
 4000370:	18c0004c 	andi	r3,r3,1
 4000374:	20c00f15 	stw	r3,60(r4)
 4000378:	10800017 	ldw	r2,0(r2)
 400037c:	1005d57a 	srai	r2,r2,21
 4000380:	1080004c 	andi	r2,r2,1
 4000384:	20801015 	stw	r2,64(r4)
}
 4000388:	dfc00017 	ldw	ra,0(sp)
 400038c:	dec00104 	addi	sp,sp,4
 4000390:	40005181 	jmpi	4000518 <alt_dev_llist_insert>

04000394 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 4000394:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4000398:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 400039c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 40003a0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 40003a4:	2980072e 	bgeu	r5,r6,40003c4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 40003a8:	38c00037 	ldwio	r3,0(r7)
 40003ac:	18ffffec 	andhi	r3,r3,65535
 40003b0:	183ffc26 	beq	r3,zero,40003a4 <__alt_data_end+0xfc0003a4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 40003b4:	28c00007 	ldb	r3,0(r5)
 40003b8:	20c00035 	stwio	r3,0(r4)
 40003bc:	29400044 	addi	r5,r5,1
 40003c0:	003ff806 	br	40003a4 <__alt_data_end+0xfc0003a4>

  return count;
}
 40003c4:	f800283a 	ret

040003c8 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 40003c8:	defffe04 	addi	sp,sp,-8
 40003cc:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
 40003d0:	24000217 	ldw	r16,8(r4)
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 40003d4:	dfc00115 	stw	ra,4(sp)
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 40003d8:	80800007 	ldb	r2,0(r16)
 40003dc:	10000926 	beq	r2,zero,4000404 <alt_up_char_buffer_init+0x3c>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 40003e0:	01410034 	movhi	r5,1024
 40003e4:	2941c604 	addi	r5,r5,1816
 40003e8:	8009883a 	mov	r4,r16
 40003ec:	40006740 	call	4000674 <strcmp>
 40003f0:	1000021e 	bne	r2,zero,40003fc <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
 40003f4:	80000005 	stb	zero,0(r16)
			break;
 40003f8:	00000206 	br	4000404 <alt_up_char_buffer_init+0x3c>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 40003fc:	84000044 	addi	r16,r16,1
 4000400:	003ff506 	br	40003d8 <__alt_data_end+0xfc0003d8>
			break;
		}
	}
	
	return;
}
 4000404:	dfc00117 	ldw	ra,4(sp)
 4000408:	dc000017 	ldw	r16,0(sp)
 400040c:	dec00204 	addi	sp,sp,8
 4000410:	f800283a 	ret

04000414 <alt_up_char_buffer_open_dev>:
alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 4000414:	d1600204 	addi	r5,gp,-32760
 4000418:	40005841 	jmpi	4000584 <alt_find_dev>

0400041c <alt_up_char_buffer_draw>:
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 400041c:	20800c17 	ldw	r2,48(r4)
 4000420:	3080102e 	bgeu	r6,r2,4000464 <alt_up_char_buffer_draw+0x48>
 4000424:	20800d17 	ldw	r2,52(r4)
 4000428:	38800e2e 	bgeu	r7,r2,4000464 <alt_up_char_buffer_draw+0x48>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 400042c:	20800f17 	ldw	r2,60(r4)
 4000430:	3084703a 	and	r2,r6,r2
 4000434:	21800e17 	ldw	r6,56(r4)
 4000438:	1186983a 	sll	r3,r2,r6
 400043c:	20801117 	ldw	r2,68(r4)
 4000440:	21801017 	ldw	r6,64(r4)
 4000444:	388e703a 	and	r7,r7,r2
 4000448:	398e983a 	sll	r7,r7,r6
 400044c:	20800b17 	ldw	r2,44(r4)
 4000450:	19ccb03a 	or	r6,r3,r7
 4000454:	308d883a 	add	r6,r6,r2
 4000458:	31400025 	stbio	r5,0(r6)

	return 0;
 400045c:	0005883a 	mov	r2,zero
 4000460:	f800283a 	ret

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
 4000464:	00bfffc4 	movi	r2,-1
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);

	return 0;
}
 4000468:	f800283a 	ret

0400046c <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 400046c:	20800c17 	ldw	r2,48(r4)
 4000470:	30800236 	bltu	r6,r2,400047c <alt_up_char_buffer_string+0x10>
		return -1;
 4000474:	00bfffc4 	movi	r2,-1
 4000478:	f800283a 	ret
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 400047c:	20800d17 	ldw	r2,52(r4)
 4000480:	38bffc2e 	bgeu	r7,r2,4000474 <__alt_data_end+0xfc000474>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
 4000484:	20801017 	ldw	r2,64(r4)
 4000488:	388e983a 	sll	r7,r7,r2
 400048c:	398f883a 	add	r7,r7,r6
 4000490:	394fc83a 	sub	r7,r7,r5

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
 4000494:	314dc83a 	sub	r6,r6,r5
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 4000498:	28c00003 	ldbu	r3,0(r5)
 400049c:	29d3883a 	add	r9,r5,r7
 40004a0:	1a003fcc 	andi	r8,r3,255
 40004a4:	4200201c 	xori	r8,r8,128
 40004a8:	423fe004 	addi	r8,r8,-128
 40004ac:	40000826 	beq	r8,zero,40004d0 <alt_up_char_buffer_string+0x64>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 40004b0:	20800b17 	ldw	r2,44(r4)
 40004b4:	4885883a 	add	r2,r9,r2
 40004b8:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
 40004bc:	20800c17 	ldw	r2,48(r4)
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
 40004c0:	29400044 	addi	r5,r5,1
		if (++x >= char_buffer->x_resolution)
 40004c4:	2987883a 	add	r3,r5,r6
 40004c8:	18bff336 	bltu	r3,r2,4000498 <__alt_data_end+0xfc000498>
 40004cc:	003fe906 	br	4000474 <__alt_data_end+0xfc000474>
			return -1;
		++offset;
	}
	return 0;
 40004d0:	0005883a 	mov	r2,zero
}
 40004d4:	f800283a 	ret

040004d8 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 40004d8:	20800a17 	ldw	r2,40(r4)
 40004dc:	00c00044 	movi	r3,1
 40004e0:	10c000a5 	stbio	r3,2(r2)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 40004e4:	20800a17 	ldw	r2,40(r4)
 40004e8:	108000a3 	ldbuio	r2,2(r2)
 40004ec:	1080004c 	andi	r2,r2,1
 40004f0:	103ffc1e 	bne	r2,zero,40004e4 <__alt_data_end+0xfc0004e4>
	return 0;
}
 40004f4:	f800283a 	ret

040004f8 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 40004f8:	0005883a 	mov	r2,zero
 40004fc:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4000500:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4000504:	10800804 	addi	r2,r2,32
 4000508:	10fffd1e 	bne	r2,r3,4000500 <__alt_data_end+0xfc000500>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 400050c:	f800283a 	ret

04000510 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 4000510:	3005883a 	mov	r2,r6
 4000514:	f800283a 	ret

04000518 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4000518:	20000226 	beq	r4,zero,4000524 <alt_dev_llist_insert+0xc>
 400051c:	20800217 	ldw	r2,8(r4)
 4000520:	1000101e 	bne	r2,zero,4000564 <alt_dev_llist_insert+0x4c>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 4000524:	d0a00617 	ldw	r2,-32744(gp)
 4000528:	10000926 	beq	r2,zero,4000550 <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 400052c:	deffff04 	addi	sp,sp,-4
 4000530:	dfc00015 	stw	ra,0(sp)
 4000534:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 4000538:	00c00584 	movi	r3,22
 400053c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 4000540:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 4000544:	dfc00017 	ldw	ra,0(sp)
 4000548:	dec00104 	addi	sp,sp,4
 400054c:	f800283a 	ret
 4000550:	d0a05f04 	addi	r2,gp,-32388
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 4000554:	00c00584 	movi	r3,22
 4000558:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 400055c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 4000560:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
 4000564:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4000568:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
 400056c:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
 4000570:	28800017 	ldw	r2,0(r5)
 4000574:	11000115 	stw	r4,4(r2)
  list->next           = entry;
 4000578:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
 400057c:	0005883a 	mov	r2,zero
 4000580:	f800283a 	ret

04000584 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4000584:	defffb04 	addi	sp,sp,-20
 4000588:	dcc00315 	stw	r19,12(sp)
 400058c:	dc800215 	stw	r18,8(sp)
 4000590:	dc400115 	stw	r17,4(sp)
 4000594:	dc000015 	stw	r16,0(sp)
 4000598:	dfc00415 	stw	ra,16(sp)
 400059c:	2027883a 	mov	r19,r4
 40005a0:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
 40005a4:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
 40005a8:	40006ac0 	call	40006ac <strlen>
 40005ac:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40005b0:	84400726 	beq	r16,r17,40005d0 <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 40005b4:	81000217 	ldw	r4,8(r16)
 40005b8:	900d883a 	mov	r6,r18
 40005bc:	980b883a 	mov	r5,r19
 40005c0:	40006440 	call	4000644 <memcmp>
 40005c4:	10000426 	beq	r2,zero,40005d8 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 40005c8:	84000017 	ldw	r16,0(r16)
 40005cc:	003ff806 	br	40005b0 <__alt_data_end+0xfc0005b0>
  }
  
  /* No match found */
  
  return NULL;
 40005d0:	0005883a 	mov	r2,zero
 40005d4:	00000106 	br	40005dc <alt_find_dev+0x58>
 40005d8:	8005883a 	mov	r2,r16
}
 40005dc:	dfc00417 	ldw	ra,16(sp)
 40005e0:	dcc00317 	ldw	r19,12(sp)
 40005e4:	dc800217 	ldw	r18,8(sp)
 40005e8:	dc400117 	ldw	r17,4(sp)
 40005ec:	dc000017 	ldw	r16,0(sp)
 40005f0:	dec00504 	addi	sp,sp,20
 40005f4:	f800283a 	ret

040005f8 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 40005f8:	01440004 	movi	r5,4096
 40005fc:	0009883a 	mov	r4,zero
 4000600:	400060c1 	jmpi	400060c <alt_icache_flush>

04000604 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 4000604:	000170fa 	wrctl	ienable,zero
 4000608:	f800283a 	ret

0400060c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 400060c:	00840004 	movi	r2,4096
 4000610:	1140012e 	bgeu	r2,r5,4000618 <alt_icache_flush+0xc>
 4000614:	100b883a 	mov	r5,r2
 4000618:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400061c:	2005883a 	mov	r2,r4
 4000620:	1140032e 	bgeu	r2,r5,4000630 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4000624:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4000628:	10800804 	addi	r2,r2,32
 400062c:	003ffc06 	br	4000620 <__alt_data_end+0xfc000620>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4000630:	210007cc 	andi	r4,r4,31
 4000634:	20000126 	beq	r4,zero,400063c <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4000638:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 400063c:	0000203a 	flushp
 4000640:	f800283a 	ret

04000644 <memcmp>:
 4000644:	218d883a 	add	r6,r4,r6
 4000648:	21800826 	beq	r4,r6,400066c <memcmp+0x28>
 400064c:	20800003 	ldbu	r2,0(r4)
 4000650:	28c00003 	ldbu	r3,0(r5)
 4000654:	10c00226 	beq	r2,r3,4000660 <memcmp+0x1c>
 4000658:	10c5c83a 	sub	r2,r2,r3
 400065c:	f800283a 	ret
 4000660:	21000044 	addi	r4,r4,1
 4000664:	29400044 	addi	r5,r5,1
 4000668:	003ff706 	br	4000648 <__alt_data_end+0xfc000648>
 400066c:	0005883a 	mov	r2,zero
 4000670:	f800283a 	ret

04000674 <strcmp>:
 4000674:	20800003 	ldbu	r2,0(r4)
 4000678:	10c03fcc 	andi	r3,r2,255
 400067c:	18c0201c 	xori	r3,r3,128
 4000680:	18ffe004 	addi	r3,r3,-128
 4000684:	18000526 	beq	r3,zero,400069c <strcmp+0x28>
 4000688:	29800007 	ldb	r6,0(r5)
 400068c:	1980031e 	bne	r3,r6,400069c <strcmp+0x28>
 4000690:	21000044 	addi	r4,r4,1
 4000694:	29400044 	addi	r5,r5,1
 4000698:	003ff606 	br	4000674 <__alt_data_end+0xfc000674>
 400069c:	28c00003 	ldbu	r3,0(r5)
 40006a0:	10803fcc 	andi	r2,r2,255
 40006a4:	10c5c83a 	sub	r2,r2,r3
 40006a8:	f800283a 	ret

040006ac <strlen>:
 40006ac:	2005883a 	mov	r2,r4
 40006b0:	10c00007 	ldb	r3,0(r2)
 40006b4:	18000226 	beq	r3,zero,40006c0 <strlen+0x14>
 40006b8:	10800044 	addi	r2,r2,1
 40006bc:	003ffc06 	br	40006b0 <__alt_data_end+0xfc0006b0>
 40006c0:	1105c83a 	sub	r2,r2,r4
 40006c4:	f800283a 	ret
