
party.elf:     file format elf32-littlenios2
party.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000020

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x000014c8 memsz 0x000014c8 flags r-x
    LOAD off    0x000024e8 vaddr 0x040014e8 paddr 0x04001754 align 2**12
         filesz 0x0000026c memsz 0x0000026c flags rw-
    LOAD off    0x000029c0 vaddr 0x040019c0 paddr 0x040019c0 align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  04000020  04000020  00002754  2**0
                  CONTENTS
  2 .text         00001328  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001a0  04001348  04001348  00002348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000026c  040014e8  04001754  000024e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000018  040019c0  040019c0  000029c0  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  040019d8  040019d8  00002754  2**0
                  CONTENTS
  7 .Onchip_Memory 00000000  08010000  08010000  00002754  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00002754  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000378  00000000  00000000  00002778  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000517f  00000000  00000000  00002af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001a13  00000000  00000000  00007c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002108  00000000  00000000  00009682  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000584  00000000  00000000  0000b78c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000013e8  00000000  00000000  0000bd10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001cda  00000000  00000000  0000d0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0000edd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000168  00000000  00000000  0000ee08  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000105be  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000105c1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000105c4  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000105c5  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000004  00000000  00000000  000105c6  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  000105ca  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000004  00000000  00000000  000105ce  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000004  00000000  00000000  000105d2  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000003b  00000000  00000000  000105d6  2**0
                  CONTENTS, READONLY
 27 .jdi          0000448d  00000000  00000000  00010611  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00074932  00000000  00000000  00014a9e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000020 l    d  .text	00000000 .text
04001348 l    d  .rodata	00000000 .rodata
040014e8 l    d  .rwdata	00000000 .rwdata
040019c0 l    d  .bss	00000000 .bss
040019d8 l    d  .SDRAM	00000000 .SDRAM
08010000 l    d  .Onchip_Memory	00000000 .Onchip_Memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../party_bsp//obj/HAL/src/crt0.o
04000068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
040014e8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400059c l     F .text	00000008 alt_dev_reg
040016a8 l     O .rwdata	00000030 Audio
04001660 l     O .rwdata	00000048 Char_Buffer
0400160c l     O .rwdata	00000054 Pixel_Buffer
040015c8 l     O .rwdata	00000044 RGB_Resampler
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
040011ac l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strcmp.c
040004d8 g     F .text	0000002c alt_main
04000d58 g     F .text	0000015c alt_up_pixel_buffer_dma_draw_vline
04000238 g     F .text	00000080 _puts_r
04001754 g       *ABS*	00000000 __flash_rwdata_start
04000848 g     F .text	0000006c alt_up_char_buffer_string
040007f8 g     F .text	00000050 alt_up_char_buffer_draw
04000504 g     F .text	00000038 alt_putstr
040008dc g     F .text	00000098 alt_up_pixel_buffer_dma_draw
040012a0 g     F .text	00000008 altera_nios2_gen2_irq_init
040008d4 g     F .text	00000008 alt_up_pixel_buffer_dma_open_dev
04000000 g     F .entry	0000001c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
040019c8 g     O .bss	00000004 errno
040019c0 g     O .bss	00000004 char_buffer
040019d0 g     O .bss	00000004 alt_argv
04009730 g       *ABS*	00000000 _gp
04000974 g     F .text	0000001c alt_up_pixel_buffer_dma_change_back_buffer_address
040016d8 g     O .rwdata	00000030 alt_fd_list
04001220 g     F .text	00000074 alt_find_dev
040001f0 g     F .text	00000028 memcpy
040008b4 g     F .text	00000020 alt_up_char_buffer_clear
040002b8 g     F .text	00000014 puts
040009b4 g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
04000c1c g     F .text	0000013c alt_up_pixel_buffer_dma_draw_hline
040012a8 g     F .text	00000038 alt_icache_flush
04000f80 g     F .text	0000004c helper_plot_pixel
0400173c g     O .rwdata	00000004 alt_max_fd
040009c4 g     F .text	00000090 alt_up_pixel_buffer_dma_clear_screen
04001730 g     O .rwdata	00000004 _global_impure_ptr
040019d8 g       *ABS*	00000000 __bss_end
04000a54 g     F .text	000001c8 alt_up_pixel_buffer_dma_draw_box
04001708 g     O .rwdata	00000028 alt_dev_null
04001194 g     F .text	00000018 alt_dcache_flush_all
04000eb4 g     F .text	000000cc alt_up_pixel_buffer_dma_draw_rectangle
04001754 g       *ABS*	00000000 __ram_rwdata_end
04001740 g     O .rwdata	00000008 alt_dev_list
0400053c g     F .text	00000060 write
04000fcc g     F .text	000001c8 alt_up_pixel_buffer_dma_draw_line
040014e8 g       *ABS*	00000000 __ram_rodata_end
04000000 g       *ABS*	00000000 __alt_mem_SDRAM
040019d8 g       *ABS*	00000000 end
040007a4 g     F .text	0000004c alt_up_char_buffer_init
08000000 g       *ABS*	00000000 __alt_stack_pointer
04000770 g     F .text	00000034 altera_avalon_jtag_uart_write
04000020 g     F .text	0000004c _start
040005c4 g     F .text	000001ac alt_sys_init
040014e8 g       *ABS*	00000000 __ram_rwdata_start
04001348 g       *ABS*	00000000 __ram_rodata_start
040012e0 g     F .text	00000030 memcmp
040019d8 g       *ABS*	00000000 __alt_stack_base
040011b4 g     F .text	0000006c alt_dev_llist_insert
040002e8 g     F .text	000000b8 __sfvwrite_small_dev
040019c0 g       *ABS*	00000000 __bss_start
04000218 g     F .text	00000020 memset
0400006c g     F .text	00000184 main
040019cc g     O .bss	00000004 alt_envp
04000990 g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
040007f0 g     F .text	00000008 alt_up_char_buffer_open_dev
04001738 g     O .rwdata	00000004 JTAG
04001750 g     O .rwdata	00000004 alt_errno
04001310 g     F .text	00000038 strcmp
04001348 g       *ABS*	00000000 __flash_rodata_start
040005a4 g     F .text	00000020 alt_irq_init
040019c4 g     O .bss	00000004 pixel_buffer
040003a0 g     F .text	00000058 _write_r
04001734 g     O .rwdata	00000004 _impure_ptr
040019d4 g     O .bss	00000004 alt_argc
04001748 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04001754 g       *ABS*	00000000 _edata
040019d8 g       *ABS*	00000000 _end
04000020 g       *ABS*	00000000 __ram_exceptions_end
08010000 g       *ABS*	00000000 __alt_mem_Onchip_Memory
08000000 g       *ABS*	00000000 __alt_data_end
0400001c g       .entry	00000000 _exit
040002cc g     F .text	0000001c strlen
04001294 g     F .text	0000000c alt_icache_flush_all
040003f8 g     F .text	000000e0 alt_load



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_mem_Onchip_Memory+0xfbff0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08400814 	ori	at,at,32
    jmp r1
 4000018:	0800683a 	jmp	at

0400001c <_exit>:
 400001c:	00000000 	call	0 <__alt_mem_SDRAM-0x4000000>

Disassembly of section .text:

04000020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000020:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 4000028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 400002c:	00bffd16 	blt	zero,r2,4000024 <__alt_mem_Onchip_Memory+0xfbff0024>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000030:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000034:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000038:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 400003c:	d6a5cc14 	ori	gp,gp,38704
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000040:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000044:	10867014 	ori	r2,r2,6592

    movhi r3, %hi(__bss_end)
 4000048:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 400004c:	18c67614 	ori	r3,r3,6616

    beq r2, r3, 1f
 4000050:	10c00326 	beq	r2,r3,4000060 <_start+0x40>

0:
    stw zero, (r2)
 4000054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400005c:	10fffd36 	bltu	r2,r3,4000054 <__alt_mem_Onchip_Memory+0xfbff0054>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000060:	40003f80 	call	40003f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000064:	40004d80 	call	40004d8 <alt_main>

04000068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000068:	003fff06 	br	4000068 <__alt_mem_Onchip_Memory+0xfbff0068>

0400006c <main>:
alt_up_pixel_buffer_dma_dev* pixel_buffer;
alt_up_char_buffer_dev* char_buffer;

int main()
{
  alt_putstr("Hello from Nios II!\n");
 400006c:	01010034 	movhi	r4,1024

alt_up_pixel_buffer_dma_dev* pixel_buffer;
alt_up_char_buffer_dev* char_buffer;

int main()
{
 4000070:	deffe804 	addi	sp,sp,-96
  alt_putstr("Hello from Nios II!\n");
 4000074:	2104d204 	addi	r4,r4,4936

alt_up_pixel_buffer_dma_dev* pixel_buffer;
alt_up_char_buffer_dev* char_buffer;

int main()
{
 4000078:	dfc01715 	stw	ra,92(sp)
  alt_putstr("Hello from Nios II!\n");
 400007c:	40005040 	call	4000504 <alt_putstr>

  pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/Pixel_Buffer");
 4000080:	01010034 	movhi	r4,1024
 4000084:	2104d804 	addi	r4,r4,4960
 4000088:	40008d40 	call	40008d4 <alt_up_pixel_buffer_dma_open_dev>
 400008c:	d0a0a515 	stw	r2,-32108(gp)
    if(pixel_buffer == NULL) {
 4000090:	1000031e 	bne	r2,zero,40000a0 <main+0x34>
  	alt_putstr("Error: could not open pixel buffer device\n");
 4000094:	01010034 	movhi	r4,1024
 4000098:	2104dd04 	addi	r4,r4,4980
 400009c:	00000206 	br	40000a8 <main+0x3c>
    } else {
  	alt_putstr("Opened pixel buffer device\n");
 40000a0:	01010034 	movhi	r4,1024
 40000a4:	2104e804 	addi	r4,r4,5024
 40000a8:	40005040 	call	4000504 <alt_putstr>
    //usleep(1000000);
/*
    alt_up_char_buffer_clear(char_buffer);
    usleep(1000000);
    */
    alt_putstr("Displaying Colour\n");
 40000ac:	01010034 	movhi	r4,1024
 40000b0:	2104ef04 	addi	r4,r4,5052
 40000b4:	40005040 	call	4000504 <alt_putstr>
    alt_up_pixel_buffer_dma_draw_box (pixel_buffer, 150, 100, 199, 149, 0x07E0, 0);
 40000b8:	0081f804 	movi	r2,2016
 40000bc:	d120a517 	ldw	r4,-32108(gp)
 40000c0:	d8800115 	stw	r2,4(sp)
 40000c4:	00802544 	movi	r2,149
 40000c8:	d8800015 	stw	r2,0(sp)
 40000cc:	01c031c4 	movi	r7,199
 40000d0:	01801904 	movi	r6,100
 40000d4:	01402584 	movi	r5,150
 40000d8:	d8000215 	stw	zero,8(sp)
 40000dc:	4000a540 	call	4000a54 <alt_up_pixel_buffer_dma_draw_box>

    char_buffer = alt_up_char_buffer_open_dev("/dev/Char_Buffer");
 40000e0:	01010034 	movhi	r4,1024
 40000e4:	2104f404 	addi	r4,r4,5072
 40000e8:	40007f00 	call	40007f0 <alt_up_char_buffer_open_dev>
 40000ec:	d0a0a415 	stw	r2,-32112(gp)

      if(char_buffer == NULL) {
 40000f0:	1000031e 	bne	r2,zero,4000100 <main+0x94>
    	alt_putstr("Error: could not open char buffer device\n");
 40000f4:	01010034 	movhi	r4,1024
 40000f8:	2104f904 	addi	r4,r4,5092
 40000fc:	00000206 	br	4000108 <main+0x9c>
      } else {
    	alt_putstr("Opened Char buffer device\n");
 4000100:	01010034 	movhi	r4,1024
 4000104:	21050404 	addi	r4,r4,5136
 4000108:	40005040 	call	4000504 <alt_putstr>
      }

      char text = 'X';
      char text_top_row[40] = "Question 1:\0";
 400010c:	01410034 	movhi	r5,1024
 4000110:	d9000d04 	addi	r4,sp,52
 4000114:	01800344 	movi	r6,13
 4000118:	29451004 	addi	r5,r5,5184
 400011c:	40001f00 	call	40001f0 <memcpy>
 4000120:	d9001044 	addi	r4,sp,65
 4000124:	018006c4 	movi	r6,27
 4000128:	000b883a 	mov	r5,zero
 400012c:	40002180 	call	4000218 <memset>
      char text_bottom_row[40] = "Character Buffer\0";
 4000130:	01410034 	movhi	r5,1024
 4000134:	d9000304 	addi	r4,sp,12
 4000138:	01800484 	movi	r6,18
 400013c:	29451a04 	addi	r5,r5,5224
 4000140:	40001f00 	call	40001f0 <memcpy>
 4000144:	01800584 	movi	r6,22
 4000148:	000b883a 	mov	r5,zero
 400014c:	d9000784 	addi	r4,sp,30
 4000150:	40002180 	call	4000218 <memset>
      /* output text message near the middle of the VGA monitor */
      alt_up_char_buffer_clear(char_buffer);
 4000154:	d120a417 	ldw	r4,-32112(gp)
 4000158:	40008b40 	call	40008b4 <alt_up_char_buffer_clear>
      alt_up_char_buffer_draw(char_buffer, text, 0, 0);
 400015c:	d120a417 	ldw	r4,-32112(gp)
 4000160:	000f883a 	mov	r7,zero
 4000164:	000d883a 	mov	r6,zero
 4000168:	01401604 	movi	r5,88
 400016c:	40007f80 	call	40007f8 <alt_up_char_buffer_draw>
      alt_up_char_buffer_draw(char_buffer, text, 0, 59);
 4000170:	d120a417 	ldw	r4,-32112(gp)
 4000174:	01c00ec4 	movi	r7,59
 4000178:	000d883a 	mov	r6,zero
 400017c:	01401604 	movi	r5,88
 4000180:	40007f80 	call	40007f8 <alt_up_char_buffer_draw>
      alt_up_char_buffer_draw(char_buffer, text, 79, 0);
 4000184:	d120a417 	ldw	r4,-32112(gp)
 4000188:	000f883a 	mov	r7,zero
 400018c:	018013c4 	movi	r6,79
 4000190:	01401604 	movi	r5,88
 4000194:	40007f80 	call	40007f8 <alt_up_char_buffer_draw>
      alt_up_char_buffer_draw(char_buffer, text, 79, 59);
 4000198:	d120a417 	ldw	r4,-32112(gp)
 400019c:	01c00ec4 	movi	r7,59
 40001a0:	018013c4 	movi	r6,79
 40001a4:	01401604 	movi	r5,88
 40001a8:	40007f80 	call	40007f8 <alt_up_char_buffer_draw>
      alt_up_char_buffer_string(char_buffer, text_top_row, 20,20);
 40001ac:	d120a417 	ldw	r4,-32112(gp)
 40001b0:	01c00504 	movi	r7,20
 40001b4:	380d883a 	mov	r6,r7
 40001b8:	d9400d04 	addi	r5,sp,52
 40001bc:	40008480 	call	4000848 <alt_up_char_buffer_string>
      alt_up_char_buffer_string(char_buffer, text_bottom_row, 40,40);
 40001c0:	d120a417 	ldw	r4,-32112(gp)
 40001c4:	01c00a04 	movi	r7,40
 40001c8:	380d883a 	mov	r6,r7
 40001cc:	d9400304 	addi	r5,sp,12
 40001d0:	40008480 	call	4000848 <alt_up_char_buffer_string>
      // end program message
      printf ("Program complete \n");
 40001d4:	01010034 	movhi	r4,1024
 40001d8:	21050b04 	addi	r4,r4,5164
 40001dc:	40002b80 	call	40002b8 <puts>




  return 0;
}
 40001e0:	0005883a 	mov	r2,zero
 40001e4:	dfc01717 	ldw	ra,92(sp)
 40001e8:	dec01804 	addi	sp,sp,96
 40001ec:	f800283a 	ret

040001f0 <memcpy>:
 40001f0:	2005883a 	mov	r2,r4
 40001f4:	2007883a 	mov	r3,r4
 40001f8:	218d883a 	add	r6,r4,r6
 40001fc:	19800526 	beq	r3,r6,4000214 <memcpy+0x24>
 4000200:	29000003 	ldbu	r4,0(r5)
 4000204:	18c00044 	addi	r3,r3,1
 4000208:	29400044 	addi	r5,r5,1
 400020c:	193fffc5 	stb	r4,-1(r3)
 4000210:	003ffa06 	br	40001fc <__alt_mem_Onchip_Memory+0xfbff01fc>
 4000214:	f800283a 	ret

04000218 <memset>:
 4000218:	2005883a 	mov	r2,r4
 400021c:	2007883a 	mov	r3,r4
 4000220:	218d883a 	add	r6,r4,r6
 4000224:	19800326 	beq	r3,r6,4000234 <memset+0x1c>
 4000228:	19400005 	stb	r5,0(r3)
 400022c:	18c00044 	addi	r3,r3,1
 4000230:	003ffc06 	br	4000224 <__alt_mem_Onchip_Memory+0xfbff0224>
 4000234:	f800283a 	ret

04000238 <_puts_r>:
 4000238:	defffd04 	addi	sp,sp,-12
 400023c:	dc000015 	stw	r16,0(sp)
 4000240:	2021883a 	mov	r16,r4
 4000244:	2809883a 	mov	r4,r5
 4000248:	dfc00215 	stw	ra,8(sp)
 400024c:	dc400115 	stw	r17,4(sp)
 4000250:	2823883a 	mov	r17,r5
 4000254:	40002cc0 	call	40002cc <strlen>
 4000258:	81400217 	ldw	r5,8(r16)
 400025c:	01010034 	movhi	r4,1024
 4000260:	2100ba04 	addi	r4,r4,744
 4000264:	29000115 	stw	r4,4(r5)
 4000268:	100f883a 	mov	r7,r2
 400026c:	880d883a 	mov	r6,r17
 4000270:	8009883a 	mov	r4,r16
 4000274:	40002e80 	call	40002e8 <__sfvwrite_small_dev>
 4000278:	00ffffc4 	movi	r3,-1
 400027c:	10c00926 	beq	r2,r3,40002a4 <_puts_r+0x6c>
 4000280:	81400217 	ldw	r5,8(r16)
 4000284:	01810034 	movhi	r6,1024
 4000288:	01c00044 	movi	r7,1
 400028c:	28800117 	ldw	r2,4(r5)
 4000290:	31850304 	addi	r6,r6,5132
 4000294:	8009883a 	mov	r4,r16
 4000298:	103ee83a 	callr	r2
 400029c:	10bfffe0 	cmpeqi	r2,r2,-1
 40002a0:	0085c83a 	sub	r2,zero,r2
 40002a4:	dfc00217 	ldw	ra,8(sp)
 40002a8:	dc400117 	ldw	r17,4(sp)
 40002ac:	dc000017 	ldw	r16,0(sp)
 40002b0:	dec00304 	addi	sp,sp,12
 40002b4:	f800283a 	ret

040002b8 <puts>:
 40002b8:	00810034 	movhi	r2,1024
 40002bc:	1085cd04 	addi	r2,r2,5940
 40002c0:	200b883a 	mov	r5,r4
 40002c4:	11000017 	ldw	r4,0(r2)
 40002c8:	40002381 	jmpi	4000238 <_puts_r>

040002cc <strlen>:
 40002cc:	2005883a 	mov	r2,r4
 40002d0:	10c00007 	ldb	r3,0(r2)
 40002d4:	18000226 	beq	r3,zero,40002e0 <strlen+0x14>
 40002d8:	10800044 	addi	r2,r2,1
 40002dc:	003ffc06 	br	40002d0 <__alt_mem_Onchip_Memory+0xfbff02d0>
 40002e0:	1105c83a 	sub	r2,r2,r4
 40002e4:	f800283a 	ret

040002e8 <__sfvwrite_small_dev>:
 40002e8:	2880000b 	ldhu	r2,0(r5)
 40002ec:	1080020c 	andi	r2,r2,8
 40002f0:	10002126 	beq	r2,zero,4000378 <__sfvwrite_small_dev+0x90>
 40002f4:	2880008f 	ldh	r2,2(r5)
 40002f8:	defffa04 	addi	sp,sp,-24
 40002fc:	dc000015 	stw	r16,0(sp)
 4000300:	dfc00515 	stw	ra,20(sp)
 4000304:	dd000415 	stw	r20,16(sp)
 4000308:	dcc00315 	stw	r19,12(sp)
 400030c:	dc800215 	stw	r18,8(sp)
 4000310:	dc400115 	stw	r17,4(sp)
 4000314:	2821883a 	mov	r16,r5
 4000318:	10001216 	blt	r2,zero,4000364 <__sfvwrite_small_dev+0x7c>
 400031c:	2027883a 	mov	r19,r4
 4000320:	3025883a 	mov	r18,r6
 4000324:	3823883a 	mov	r17,r7
 4000328:	05010004 	movi	r20,1024
 400032c:	04400b0e 	bge	zero,r17,400035c <__sfvwrite_small_dev+0x74>
 4000330:	880f883a 	mov	r7,r17
 4000334:	a440010e 	bge	r20,r17,400033c <__sfvwrite_small_dev+0x54>
 4000338:	01c10004 	movi	r7,1024
 400033c:	8140008f 	ldh	r5,2(r16)
 4000340:	900d883a 	mov	r6,r18
 4000344:	9809883a 	mov	r4,r19
 4000348:	40003a00 	call	40003a0 <_write_r>
 400034c:	0080050e 	bge	zero,r2,4000364 <__sfvwrite_small_dev+0x7c>
 4000350:	88a3c83a 	sub	r17,r17,r2
 4000354:	90a5883a 	add	r18,r18,r2
 4000358:	003ff406 	br	400032c <__alt_mem_Onchip_Memory+0xfbff032c>
 400035c:	0005883a 	mov	r2,zero
 4000360:	00000706 	br	4000380 <__sfvwrite_small_dev+0x98>
 4000364:	8080000b 	ldhu	r2,0(r16)
 4000368:	10801014 	ori	r2,r2,64
 400036c:	8080000d 	sth	r2,0(r16)
 4000370:	00bfffc4 	movi	r2,-1
 4000374:	00000206 	br	4000380 <__sfvwrite_small_dev+0x98>
 4000378:	00bfffc4 	movi	r2,-1
 400037c:	f800283a 	ret
 4000380:	dfc00517 	ldw	ra,20(sp)
 4000384:	dd000417 	ldw	r20,16(sp)
 4000388:	dcc00317 	ldw	r19,12(sp)
 400038c:	dc800217 	ldw	r18,8(sp)
 4000390:	dc400117 	ldw	r17,4(sp)
 4000394:	dc000017 	ldw	r16,0(sp)
 4000398:	dec00604 	addi	sp,sp,24
 400039c:	f800283a 	ret

040003a0 <_write_r>:
 40003a0:	defffd04 	addi	sp,sp,-12
 40003a4:	dc000015 	stw	r16,0(sp)
 40003a8:	04010034 	movhi	r16,1024
 40003ac:	dc400115 	stw	r17,4(sp)
 40003b0:	84067204 	addi	r16,r16,6600
 40003b4:	2023883a 	mov	r17,r4
 40003b8:	2809883a 	mov	r4,r5
 40003bc:	300b883a 	mov	r5,r6
 40003c0:	380d883a 	mov	r6,r7
 40003c4:	dfc00215 	stw	ra,8(sp)
 40003c8:	80000015 	stw	zero,0(r16)
 40003cc:	400053c0 	call	400053c <write>
 40003d0:	00ffffc4 	movi	r3,-1
 40003d4:	10c0031e 	bne	r2,r3,40003e4 <_write_r+0x44>
 40003d8:	80c00017 	ldw	r3,0(r16)
 40003dc:	18000126 	beq	r3,zero,40003e4 <_write_r+0x44>
 40003e0:	88c00015 	stw	r3,0(r17)
 40003e4:	dfc00217 	ldw	ra,8(sp)
 40003e8:	dc400117 	ldw	r17,4(sp)
 40003ec:	dc000017 	ldw	r16,0(sp)
 40003f0:	dec00304 	addi	sp,sp,12
 40003f4:	f800283a 	ret

040003f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40003f8:	deffff04 	addi	sp,sp,-4
 40003fc:	01010034 	movhi	r4,1024
 4000400:	01410034 	movhi	r5,1024
 4000404:	dfc00015 	stw	ra,0(sp)
 4000408:	21053a04 	addi	r4,r4,5352
 400040c:	2945d504 	addi	r5,r5,5972

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4000410:	2140061e 	bne	r4,r5,400042c <alt_load+0x34>
 4000414:	01010034 	movhi	r4,1024
 4000418:	01410034 	movhi	r5,1024
 400041c:	21000804 	addi	r4,r4,32
 4000420:	29400804 	addi	r5,r5,32
 4000424:	2140121e 	bne	r4,r5,4000470 <alt_load+0x78>
 4000428:	00000b06 	br	4000458 <alt_load+0x60>
 400042c:	00c10034 	movhi	r3,1024
 4000430:	18c5d504 	addi	r3,r3,5972
 4000434:	1907c83a 	sub	r3,r3,r4
 4000438:	0005883a 	mov	r2,zero
  {
    while( to != end )
 400043c:	10fff526 	beq	r2,r3,4000414 <__alt_mem_Onchip_Memory+0xfbff0414>
    {
      *to++ = *from++;
 4000440:	114f883a 	add	r7,r2,r5
 4000444:	39c00017 	ldw	r7,0(r7)
 4000448:	110d883a 	add	r6,r2,r4
 400044c:	10800104 	addi	r2,r2,4
 4000450:	31c00015 	stw	r7,0(r6)
 4000454:	003ff906 	br	400043c <__alt_mem_Onchip_Memory+0xfbff043c>
 4000458:	01010034 	movhi	r4,1024
 400045c:	01410034 	movhi	r5,1024
 4000460:	2104d204 	addi	r4,r4,4936
 4000464:	2944d204 	addi	r5,r5,4936

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4000468:	2140101e 	bne	r4,r5,40004ac <alt_load+0xb4>
 400046c:	00000b06 	br	400049c <alt_load+0xa4>
 4000470:	00c10034 	movhi	r3,1024
 4000474:	18c00804 	addi	r3,r3,32
 4000478:	1907c83a 	sub	r3,r3,r4
 400047c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 4000480:	10fff526 	beq	r2,r3,4000458 <__alt_mem_Onchip_Memory+0xfbff0458>
    {
      *to++ = *from++;
 4000484:	114f883a 	add	r7,r2,r5
 4000488:	39c00017 	ldw	r7,0(r7)
 400048c:	110d883a 	add	r6,r2,r4
 4000490:	10800104 	addi	r2,r2,4
 4000494:	31c00015 	stw	r7,0(r6)
 4000498:	003ff906 	br	4000480 <__alt_mem_Onchip_Memory+0xfbff0480>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400049c:	40011940 	call	4001194 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 40004a0:	dfc00017 	ldw	ra,0(sp)
 40004a4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 40004a8:	40012941 	jmpi	4001294 <alt_icache_flush_all>
 40004ac:	00c10034 	movhi	r3,1024
 40004b0:	18c53a04 	addi	r3,r3,5352
 40004b4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 40004b8:	0005883a 	mov	r2,zero
  {
    while( to != end )
 40004bc:	18bff726 	beq	r3,r2,400049c <__alt_mem_Onchip_Memory+0xfbff049c>
    {
      *to++ = *from++;
 40004c0:	114f883a 	add	r7,r2,r5
 40004c4:	39c00017 	ldw	r7,0(r7)
 40004c8:	110d883a 	add	r6,r2,r4
 40004cc:	10800104 	addi	r2,r2,4
 40004d0:	31c00015 	stw	r7,0(r6)
 40004d4:	003ff906 	br	40004bc <__alt_mem_Onchip_Memory+0xfbff04bc>

040004d8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40004d8:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40004dc:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40004e0:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40004e4:	40005a40 	call	40005a4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40004e8:	40005c40 	call	40005c4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 40004ec:	d1a0a717 	ldw	r6,-32100(gp)
 40004f0:	d160a817 	ldw	r5,-32096(gp)
 40004f4:	d120a917 	ldw	r4,-32092(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 40004f8:	dfc00017 	ldw	ra,0(sp)
 40004fc:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 4000500:	400006c1 	jmpi	400006c <main>

04000504 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 4000504:	defffe04 	addi	sp,sp,-8
 4000508:	dc000015 	stw	r16,0(sp)
 400050c:	dfc00115 	stw	ra,4(sp)
 4000510:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 4000514:	40002cc0 	call	40002cc <strlen>
 4000518:	01010034 	movhi	r4,1024
 400051c:	000f883a 	mov	r7,zero
 4000520:	100d883a 	mov	r6,r2
 4000524:	800b883a 	mov	r5,r16
 4000528:	2105ce04 	addi	r4,r4,5944
#else
    return fputs(str, stdout);
#endif
#endif
}
 400052c:	dfc00117 	ldw	ra,4(sp)
 4000530:	dc000017 	ldw	r16,0(sp)
 4000534:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 4000538:	40007701 	jmpi	4000770 <altera_avalon_jtag_uart_write>

0400053c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 400053c:	00800044 	movi	r2,1
 4000540:	20800226 	beq	r4,r2,400054c <write+0x10>
 4000544:	00800084 	movi	r2,2
 4000548:	2080041e 	bne	r4,r2,400055c <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 400054c:	01010034 	movhi	r4,1024
 4000550:	000f883a 	mov	r7,zero
 4000554:	2105ce04 	addi	r4,r4,5944
 4000558:	40007701 	jmpi	4000770 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 400055c:	d0a00817 	ldw	r2,-32736(gp)
 4000560:	10000926 	beq	r2,zero,4000588 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4000564:	deffff04 	addi	sp,sp,-4
 4000568:	dfc00015 	stw	ra,0(sp)
 400056c:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 4000570:	00c01444 	movi	r3,81
 4000574:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 4000578:	00bfffc4 	movi	r2,-1
 400057c:	dfc00017 	ldw	ra,0(sp)
 4000580:	dec00104 	addi	sp,sp,4
 4000584:	f800283a 	ret
 4000588:	d0a0a604 	addi	r2,gp,-32104
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 400058c:	00c01444 	movi	r3,81
 4000590:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 4000594:	00bfffc4 	movi	r2,-1
 4000598:	f800283a 	ret

0400059c <alt_dev_reg>:

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400059c:	d1600404 	addi	r5,gp,-32752
 40005a0:	40011b41 	jmpi	40011b4 <alt_dev_llist_insert>

040005a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 40005a4:	deffff04 	addi	sp,sp,-4
 40005a8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, CPU);
 40005ac:	40012a00 	call	40012a0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 40005b0:	00800044 	movi	r2,1
 40005b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 40005b8:	dfc00017 	ldw	ra,0(sp)
 40005bc:	dec00104 	addi	sp,sp,4
 40005c0:	f800283a 	ret

040005c4 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
 40005c4:	01010034 	movhi	r4,1024
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40005c8:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
 40005cc:	2105aa04 	addi	r4,r4,5800
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40005d0:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
 40005d4:	400059c0 	call	400059c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_BUFFER, Char_Buffer);
 40005d8:	00810034 	movhi	r2,1024
 40005dc:	10859804 	addi	r2,r2,5728
 40005e0:	10c00a17 	ldw	r3,40(r2)
 40005e4:	01401004 	movi	r5,64
 40005e8:	18c00117 	ldw	r3,4(r3)
 40005ec:	193fffcc 	andi	r4,r3,65535
 40005f0:	1806d43a 	srli	r3,r3,16
 40005f4:	11000c15 	stw	r4,48(r2)
 40005f8:	10c00d15 	stw	r3,52(r2)
 40005fc:	29000436 	bltu	r5,r4,4000610 <alt_sys_init+0x4c>
 4000600:	01000fc4 	movi	r4,63
 4000604:	11000f15 	stw	r4,60(r2)
 4000608:	01000184 	movi	r4,6
 400060c:	11001015 	stw	r4,64(r2)
 4000610:	01000804 	movi	r4,32
 4000614:	20c00236 	bltu	r4,r3,4000620 <alt_sys_init+0x5c>
 4000618:	00c007c4 	movi	r3,31
 400061c:	10c01115 	stw	r3,68(r2)
 4000620:	01010034 	movhi	r4,1024
 4000624:	21059804 	addi	r4,r4,5728
 4000628:	40007a40 	call	40007a4 <alt_up_char_buffer_init>
 400062c:	01010034 	movhi	r4,1024
 4000630:	21059804 	addi	r4,r4,5728
 4000634:	400059c0 	call	400059c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER, Pixel_Buffer);
 4000638:	00810034 	movhi	r2,1024
 400063c:	10858304 	addi	r2,r2,5644
 4000640:	10c00a17 	ldw	r3,40(r2)
 4000644:	01c00044 	movi	r7,1
 4000648:	19000017 	ldw	r4,0(r3)
 400064c:	11000b15 	stw	r4,44(r2)
 4000650:	19000117 	ldw	r4,4(r3)
 4000654:	11000c15 	stw	r4,48(r2)
 4000658:	19000204 	addi	r4,r3,8
 400065c:	2140000b 	ldhu	r5,0(r4)
 4000660:	18c00304 	addi	r3,r3,12
 4000664:	11400f15 	stw	r5,60(r2)
 4000668:	21000017 	ldw	r4,0(r4)
 400066c:	2008d43a 	srli	r4,r4,16
 4000670:	11001015 	stw	r4,64(r2)
 4000674:	19000017 	ldw	r4,0(r3)
 4000678:	2009d07a 	srai	r4,r4,1
 400067c:	2100004c 	andi	r4,r4,1
 4000680:	11000d15 	stw	r4,52(r2)
 4000684:	19000017 	ldw	r4,0(r3)
 4000688:	2009d13a 	srai	r4,r4,4
 400068c:	210003cc 	andi	r4,r4,15
 4000690:	11000e15 	stw	r4,56(r2)
 4000694:	19400017 	ldw	r5,0(r3)
 4000698:	2807d43a 	srai	r3,r5,16
 400069c:	280cd63a 	srli	r6,r5,24
 40006a0:	21c0021e 	bne	r4,r7,40006ac <alt_sys_init+0xe8>
 40006a4:	10001115 	stw	zero,68(r2)
 40006a8:	00000506 	br	40006c0 <alt_sys_init+0xfc>
 40006ac:	01400084 	movi	r5,2
 40006b0:	2140021e 	bne	r4,r5,40006bc <alt_sys_init+0xf8>
 40006b4:	11c01115 	stw	r7,68(r2)
 40006b8:	00000106 	br	40006c0 <alt_sys_init+0xfc>
 40006bc:	11401115 	stw	r5,68(r2)
 40006c0:	18c03fcc 	andi	r3,r3,255
 40006c4:	01400804 	movi	r5,32
 40006c8:	28cfc83a 	sub	r7,r5,r3
 40006cc:	013fffc4 	movi	r4,-1
 40006d0:	21ced83a 	srl	r7,r4,r7
 40006d4:	298bc83a 	sub	r5,r5,r6
 40006d8:	2148d83a 	srl	r4,r4,r5
 40006dc:	11c01215 	stw	r7,72(r2)
 40006e0:	11c01117 	ldw	r7,68(r2)
 40006e4:	11001415 	stw	r4,80(r2)
 40006e8:	01010034 	movhi	r4,1024
 40006ec:	38c7883a 	add	r3,r7,r3
 40006f0:	21058304 	addi	r4,r4,5644
 40006f4:	10c01315 	stw	r3,76(r2)
 40006f8:	400059c0 	call	400059c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( RGB_RESAMPLER, RGB_Resampler);
 40006fc:	01010034 	movhi	r4,1024
 4000700:	21057204 	addi	r4,r4,5576
 4000704:	20800a17 	ldw	r2,40(r4)
 4000708:	10c00017 	ldw	r3,0(r2)
 400070c:	18c003cc 	andi	r3,r3,15
 4000710:	20c00b15 	stw	r3,44(r4)
 4000714:	10c00017 	ldw	r3,0(r2)
 4000718:	1807d13a 	srai	r3,r3,4
 400071c:	18c0004c 	andi	r3,r3,1
 4000720:	20c00c15 	stw	r3,48(r4)
 4000724:	10c00017 	ldw	r3,0(r2)
 4000728:	1807d17a 	srai	r3,r3,5
 400072c:	18c0004c 	andi	r3,r3,1
 4000730:	20c00d15 	stw	r3,52(r4)
 4000734:	10c00017 	ldw	r3,0(r2)
 4000738:	1807d43a 	srai	r3,r3,16
 400073c:	18c003cc 	andi	r3,r3,15
 4000740:	20c00e15 	stw	r3,56(r4)
 4000744:	10c00017 	ldw	r3,0(r2)
 4000748:	1807d53a 	srai	r3,r3,20
 400074c:	18c0004c 	andi	r3,r3,1
 4000750:	20c00f15 	stw	r3,60(r4)
 4000754:	10800017 	ldw	r2,0(r2)
 4000758:	1005d57a 	srai	r2,r2,21
 400075c:	1080004c 	andi	r2,r2,1
 4000760:	20801015 	stw	r2,64(r4)
}
 4000764:	dfc00017 	ldw	ra,0(sp)
 4000768:	dec00104 	addi	sp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, JTAG);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( CHAR_BUFFER, Char_Buffer);
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( PIXEL_BUFFER, Pixel_Buffer);
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( RGB_RESAMPLER, RGB_Resampler);
 400076c:	400059c1 	jmpi	400059c <alt_dev_reg>

04000770 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 4000770:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4000774:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 4000778:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 400077c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 4000780:	2980072e 	bgeu	r5,r6,40007a0 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4000784:	38c00037 	ldwio	r3,0(r7)
 4000788:	18ffffec 	andhi	r3,r3,65535
 400078c:	183ffc26 	beq	r3,zero,4000780 <__alt_mem_Onchip_Memory+0xfbff0780>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 4000790:	28c00007 	ldb	r3,0(r5)
 4000794:	20c00035 	stwio	r3,0(r4)
 4000798:	29400044 	addi	r5,r5,1
 400079c:	003ff806 	br	4000780 <__alt_mem_Onchip_Memory+0xfbff0780>

  return count;
}
 40007a0:	f800283a 	ret

040007a4 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 40007a4:	defffe04 	addi	sp,sp,-8
 40007a8:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
 40007ac:	24000217 	ldw	r16,8(r4)
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 40007b0:	dfc00115 	stw	ra,4(sp)
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 40007b4:	80800007 	ldb	r2,0(r16)
 40007b8:	10000926 	beq	r2,zero,40007e0 <alt_up_char_buffer_init+0x3c>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 40007bc:	01410034 	movhi	r5,1024
 40007c0:	29452d04 	addi	r5,r5,5300
 40007c4:	8009883a 	mov	r4,r16
 40007c8:	40013100 	call	4001310 <strcmp>
 40007cc:	1000021e 	bne	r2,zero,40007d8 <alt_up_char_buffer_init+0x34>
			(*name) = '\0';
 40007d0:	80000005 	stb	zero,0(r16)
			break;
 40007d4:	00000206 	br	40007e0 <alt_up_char_buffer_init+0x3c>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 40007d8:	84000044 	addi	r16,r16,1
 40007dc:	003ff506 	br	40007b4 <__alt_mem_Onchip_Memory+0xfbff07b4>
			break;
		}
	}
	
	return;
}
 40007e0:	dfc00117 	ldw	ra,4(sp)
 40007e4:	dc000017 	ldw	r16,0(sp)
 40007e8:	dec00204 	addi	sp,sp,8
 40007ec:	f800283a 	ret

040007f0 <alt_up_char_buffer_open_dev>:
alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 40007f0:	d1600404 	addi	r5,gp,-32752
 40007f4:	40012201 	jmpi	4001220 <alt_find_dev>

040007f8 <alt_up_char_buffer_draw>:
}

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 40007f8:	20800c17 	ldw	r2,48(r4)
 40007fc:	3080102e 	bgeu	r6,r2,4000840 <alt_up_char_buffer_draw+0x48>
 4000800:	20800d17 	ldw	r2,52(r4)
 4000804:	38800e2e 	bgeu	r7,r2,4000840 <alt_up_char_buffer_draw+0x48>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 4000808:	20800f17 	ldw	r2,60(r4)
 400080c:	3084703a 	and	r2,r6,r2
 4000810:	21800e17 	ldw	r6,56(r4)
 4000814:	1186983a 	sll	r3,r2,r6
 4000818:	20801117 	ldw	r2,68(r4)
 400081c:	21801017 	ldw	r6,64(r4)
 4000820:	388e703a 	and	r7,r7,r2
 4000824:	398e983a 	sll	r7,r7,r6
 4000828:	20800b17 	ldw	r2,44(r4)
 400082c:	19ccb03a 	or	r6,r3,r7
 4000830:	308d883a 	add	r6,r6,r2
 4000834:	31400025 	stbio	r5,0(r6)

	return 0;
 4000838:	0005883a 	mov	r2,zero
 400083c:	f800283a 	ret

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
 4000840:	00bfffc4 	movi	r2,-1
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);

	return 0;
}
 4000844:	f800283a 	ret

04000848 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 4000848:	20800c17 	ldw	r2,48(r4)
 400084c:	30800236 	bltu	r6,r2,4000858 <alt_up_char_buffer_string+0x10>
		return -1;
 4000850:	00bfffc4 	movi	r2,-1
 4000854:	f800283a 	ret
}

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 4000858:	20800d17 	ldw	r2,52(r4)
 400085c:	38bffc2e 	bgeu	r7,r2,4000850 <__alt_mem_Onchip_Memory+0xfbff0850>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
 4000860:	20801017 	ldw	r2,64(r4)
 4000864:	388e983a 	sll	r7,r7,r2
 4000868:	398f883a 	add	r7,r7,r6
 400086c:	394fc83a 	sub	r7,r7,r5

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
 4000870:	314dc83a 	sub	r6,r6,r5
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 4000874:	28c00003 	ldbu	r3,0(r5)
 4000878:	29d3883a 	add	r9,r5,r7
 400087c:	1a003fcc 	andi	r8,r3,255
 4000880:	4200201c 	xori	r8,r8,128
 4000884:	423fe004 	addi	r8,r8,-128
 4000888:	40000826 	beq	r8,zero,40008ac <alt_up_char_buffer_string+0x64>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 400088c:	20800b17 	ldw	r2,44(r4)
 4000890:	4885883a 	add	r2,r9,r2
 4000894:	10c00025 	stbio	r3,0(r2)
		++ptr;
		if (++x >= char_buffer->x_resolution)
 4000898:	20800c17 	ldw	r2,48(r4)
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
 400089c:	29400044 	addi	r5,r5,1
		if (++x >= char_buffer->x_resolution)
 40008a0:	2987883a 	add	r3,r5,r6
 40008a4:	18bff336 	bltu	r3,r2,4000874 <__alt_mem_Onchip_Memory+0xfbff0874>
 40008a8:	003fe906 	br	4000850 <__alt_mem_Onchip_Memory+0xfbff0850>
			return -1;
		++offset;
	}
	return 0;
 40008ac:	0005883a 	mov	r2,zero
}
 40008b0:	f800283a 	ret

040008b4 <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 40008b4:	20800a17 	ldw	r2,40(r4)
 40008b8:	00c00044 	movi	r3,1
 40008bc:	10c000a5 	stbio	r3,2(r2)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 40008c0:	20800a17 	ldw	r2,40(r4)
 40008c4:	108000a3 	ldbuio	r2,2(r2)
 40008c8:	1080004c 	andi	r2,r2,1
 40008cc:	103ffc1e 	bne	r2,zero,40008c0 <__alt_mem_Onchip_Memory+0xfbff08c0>
	return 0;
}
 40008d0:	f800283a 	ret

040008d4 <alt_up_pixel_buffer_dma_open_dev>:
alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 40008d4:	d1600404 	addi	r5,gp,-32752
 40008d8:	40012201 	jmpi	4001220 <alt_find_dev>

040008dc <alt_up_pixel_buffer_dma_draw>:
int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 40008dc:	20800f17 	ldw	r2,60(r4)
 40008e0:	3080222e 	bgeu	r6,r2,400096c <alt_up_pixel_buffer_dma_draw+0x90>
 40008e4:	20c01017 	ldw	r3,64(r4)
 40008e8:	38c0202e 	bgeu	r7,r3,400096c <alt_up_pixel_buffer_dma_draw+0x90>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 40008ec:	22800d17 	ldw	r10,52(r4)
 40008f0:	22001217 	ldw	r8,72(r4)
 40008f4:	22401117 	ldw	r9,68(r4)
 40008f8:	20c01417 	ldw	r3,80(r4)
 40008fc:	5000071e 	bne	r10,zero,400091c <alt_up_pixel_buffer_dma_draw+0x40>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 4000900:	3210703a 	and	r8,r6,r8
 4000904:	21801317 	ldw	r6,76(r4)
 4000908:	38c6703a 	and	r3,r7,r3
 400090c:	4250983a 	sll	r8,r8,r9
 4000910:	1986983a 	sll	r3,r3,r6
 4000914:	40cd883a 	add	r6,r8,r3
 4000918:	00000506 	br	4000930 <alt_up_pixel_buffer_dma_draw+0x54>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 400091c:	38c6703a 	and	r3,r7,r3
 4000920:	1885383a 	mul	r2,r3,r2
 4000924:	3210703a 	and	r8,r6,r8
 4000928:	4085883a 	add	r2,r8,r2
 400092c:	124c983a 	sll	r6,r2,r9
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4000930:	20c00e17 	ldw	r3,56(r4)
 4000934:	20800c17 	ldw	r2,48(r4)
 4000938:	01000044 	movi	r4,1
 400093c:	1900031e 	bne	r3,r4,400094c <alt_up_pixel_buffer_dma_draw+0x70>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 4000940:	308d883a 	add	r6,r6,r2
 4000944:	31400025 	stbio	r5,0(r6)
 4000948:	00000606 	br	4000964 <alt_up_pixel_buffer_dma_draw+0x88>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 400094c:	01000084 	movi	r4,2
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 4000950:	308d883a 	add	r6,r6,r2
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4000954:	1900021e 	bne	r3,r4,4000960 <alt_up_pixel_buffer_dma_draw+0x84>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 4000958:	3140002d 	sthio	r5,0(r6)
 400095c:	00000106 	br	4000964 <alt_up_pixel_buffer_dma_draw+0x88>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 4000960:	31400035 	stwio	r5,0(r6)
	}

	return 0;
 4000964:	0005883a 	mov	r2,zero
 4000968:	f800283a 	ret
/* This function draws a pixel to the back buffer.
 */
{
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
		return -1;
 400096c:	00bfffc4 	movi	r2,-1
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	}

	return 0;
}
 4000970:	f800283a 	ret

04000974 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 4000974:	20800a17 	ldw	r2,40(r4)
 4000978:	11400135 	stwio	r5,4(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 400097c:	20800a17 	ldw	r2,40(r4)
 4000980:	10800137 	ldwio	r2,4(r2)
 4000984:	20800c15 	stw	r2,48(r4)
	return 0;
}
 4000988:	0005883a 	mov	r2,zero
 400098c:	f800283a 	ret

04000990 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 4000990:	20800c17 	ldw	r2,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 4000994:	20c00a17 	ldw	r3,40(r4)
 4000998:	01400044 	movi	r5,1
 400099c:	19400035 	stwio	r5,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 40009a0:	20c00b17 	ldw	r3,44(r4)
	pixel_buffer->buffer_start_address = temp;
 40009a4:	20800b15 	stw	r2,44(r4)
	return 0;
}
 40009a8:	0005883a 	mov	r2,zero
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 40009ac:	20c00c15 	stw	r3,48(r4)
	pixel_buffer->buffer_start_address = temp;
	return 0;
}
 40009b0:	f800283a 	ret

040009b4 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 40009b4:	20800a17 	ldw	r2,40(r4)
 40009b8:	10800337 	ldwio	r2,12(r2)
}
 40009bc:	1080004c 	andi	r2,r2,1
 40009c0:	f800283a 	ret

040009c4 <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 40009c4:	00800044 	movi	r2,1
 40009c8:	2880021e 	bne	r5,r2,40009d4 <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
 40009cc:	20c00c17 	ldw	r3,48(r4)
 40009d0:	00000106 	br	40009d8 <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
 40009d4:	20c00b17 	ldw	r3,44(r4)
	limit_x = pixel_buffer->x_resolution;
 40009d8:	20800f17 	ldw	r2,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 40009dc:	21800e17 	ldw	r6,56(r4)
 40009e0:	01400084 	movi	r5,2
 40009e4:	1085883a 	add	r2,r2,r2
 40009e8:	31400126 	beq	r6,r5,40009f0 <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
	} else {
		limit_x = limit_x << 2;
 40009ec:	1085883a 	add	r2,r2,r2
	}	
	limit_y = pixel_buffer->y_resolution;

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 40009f0:	21800d17 	ldw	r6,52(r4)
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		limit_x = limit_x << 1;
	} else {
		limit_x = limit_x << 2;
	}	
	limit_y = pixel_buffer->y_resolution;
 40009f4:	21401017 	ldw	r5,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 40009f8:	30000e1e 	bne	r6,zero,4000a34 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 40009fc:	21c01317 	ldw	r7,76(r4)
 4000a00:	01000044 	movi	r4,1
 4000a04:	21ce983a 	sll	r7,r4,r7
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 4000a08:	31400926 	beq	r6,r5,4000a30 <alt_up_pixel_buffer_dma_clear_screen+0x6c>
 4000a0c:	1809883a 	mov	r4,r3
		{
			for (x = 0; x < limit_x; x = x + 4)
 4000a10:	20d1c83a 	sub	r8,r4,r3
 4000a14:	4080032e 	bgeu	r8,r2,4000a24 <alt_up_pixel_buffer_dma_clear_screen+0x60>
			{
				IOWR_32DIRECT(addr, x, 0);
 4000a18:	20000035 	stwio	zero,0(r4)
 4000a1c:	21000104 	addi	r4,r4,4
 4000a20:	003ffb06 	br	4000a10 <__alt_mem_Onchip_Memory+0xfbff0a10>
			}
			addr = addr + (1 << offset_y);
 4000a24:	19c7883a 	add	r3,r3,r7
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 4000a28:	31800044 	addi	r6,r6,1
 4000a2c:	003ff606 	br	4000a08 <__alt_mem_Onchip_Memory+0xfbff0a08>
 4000a30:	f800283a 	ret
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 4000a34:	1145383a 	mul	r2,r2,r5

		for (x = 0; x < limit_y; x = x + 4)
 4000a38:	1809883a 	mov	r4,r3
 4000a3c:	20cbc83a 	sub	r5,r4,r3
 4000a40:	2880032e 	bgeu	r5,r2,4000a50 <alt_up_pixel_buffer_dma_clear_screen+0x8c>
		{
			IOWR_32DIRECT(addr, x, 0);
 4000a44:	20000035 	stwio	zero,0(r4)
 4000a48:	21000104 	addi	r4,r4,4
 4000a4c:	003ffb06 	br	4000a3c <__alt_mem_Onchip_Memory+0xfbff0a3c>
 4000a50:	f800283a 	ret

04000a54 <alt_up_pixel_buffer_dma_draw_box>:
	}
}

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 4000a54:	d8800017 	ldw	r2,0(sp)
 4000a58:	db000117 	ldw	r12,4(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 4000a5c:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
 4000a60:	2815883a 	mov	r10,r5
	register unsigned int r_x = x1;
	register unsigned int t_y = y0;
 4000a64:	3011883a 	mov	r8,r6
	register unsigned int b_y = y1;
 4000a68:	1017883a 	mov	r11,r2
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
 4000a6c:	3940022e 	bgeu	r7,r5,4000a78 <alt_up_pixel_buffer_dma_draw_box+0x24>
 4000a70:	3815883a 	mov	r10,r7
 4000a74:	280f883a 	mov	r7,r5
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if (t_y > b_y)
 4000a78:	1180022e 	bgeu	r2,r6,4000a84 <alt_up_pixel_buffer_dma_draw_box+0x30>
 4000a7c:	1011883a 	mov	r8,r2
 4000a80:	3017883a 	mov	r11,r6
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 4000a84:	5240642e 	bgeu	r10,r9,4000c18 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
 4000a88:	20801017 	ldw	r2,64(r4)
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 4000a8c:	4080622e 	bgeu	r8,r2,4000c18 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 4000a90:	3a400136 	bltu	r7,r9,4000a98 <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		r_x = limit_x - 1;
 4000a94:	49ffffc4 	addi	r7,r9,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 4000a98:	58800136 	bltu	r11,r2,4000aa0 <alt_up_pixel_buffer_dma_draw_box+0x4c>
	{
		b_y = limit_y - 1;
 4000a9c:	12ffffc4 	addi	r11,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4000aa0:	d8800217 	ldw	r2,8(sp)
 4000aa4:	01400044 	movi	r5,1
 4000aa8:	1140021e 	bne	r2,r5,4000ab4 <alt_up_pixel_buffer_dma_draw_box+0x60>
		addr = pixel_buffer->back_buffer_start_address;
 4000aac:	20c00c17 	ldw	r3,48(r4)
 4000ab0:	00000106 	br	4000ab8 <alt_up_pixel_buffer_dma_draw_box+0x64>
	else
		addr = pixel_buffer->buffer_start_address;
 4000ab4:	20c00b17 	ldw	r3,44(r4)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4000ab8:	20800d17 	ldw	r2,52(r4)
 4000abc:	21800e17 	ldw	r6,56(r4)
 4000ac0:	1000291e 	bne	r2,zero,4000b68 <alt_up_pixel_buffer_dma_draw_box+0x114>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4000ac4:	21001317 	ldw	r4,76(r4)
		addr = addr + (t_y << offset_y);
 4000ac8:	4104983a 	sll	r2,r8,r4
 4000acc:	10c5883a 	add	r2,r2,r3
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4000ad0:	31400b1e 	bne	r6,r5,4000b00 <alt_up_pixel_buffer_dma_draw_box+0xac>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 4000ad4:	290a983a 	sll	r5,r5,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4000ad8:	5a004f36 	bltu	r11,r8,4000c18 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
 4000adc:	5007883a 	mov	r3,r10
			{
				for (x = l_x; x <= r_x; x++)
 4000ae0:	38c00436 	bltu	r7,r3,4000af4 <alt_up_pixel_buffer_dma_draw_box+0xa0>
				{
					IOWR_8DIRECT(addr, x, local_color);
 4000ae4:	10c9883a 	add	r4,r2,r3
 4000ae8:	23000025 	stbio	r12,0(r4)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4000aec:	18c00044 	addi	r3,r3,1
 4000af0:	003ffb06 	br	4000ae0 <__alt_mem_Onchip_Memory+0xfbff0ae0>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 4000af4:	1145883a 	add	r2,r2,r5
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4000af8:	42000044 	addi	r8,r8,1
 4000afc:	003ff606 	br	4000ad8 <__alt_mem_Onchip_Memory+0xfbff0ad8>
 4000b00:	00c00044 	movi	r3,1
 4000b04:	190a983a 	sll	r5,r3,r4
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4000b08:	00c00084 	movi	r3,2
 4000b0c:	30c00d1e 	bne	r6,r3,4000b44 <alt_up_pixel_buffer_dma_draw_box+0xf0>
			for (y = t_y; y <= b_y; y++)
 4000b10:	5a004136 	bltu	r11,r8,4000c18 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
 4000b14:	5007883a 	mov	r3,r10
			{
				for (x = l_x; x <= r_x; x++)
 4000b18:	38c00536 	bltu	r7,r3,4000b30 <alt_up_pixel_buffer_dma_draw_box+0xdc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 4000b1c:	18c9883a 	add	r4,r3,r3
 4000b20:	2089883a 	add	r4,r4,r2
 4000b24:	2300002d 	sthio	r12,0(r4)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4000b28:	18c00044 	addi	r3,r3,1
 4000b2c:	003ffa06 	br	4000b18 <__alt_mem_Onchip_Memory+0xfbff0b18>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 4000b30:	1145883a 	add	r2,r2,r5
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4000b34:	42000044 	addi	r8,r8,1
 4000b38:	003ff506 	br	4000b10 <__alt_mem_Onchip_Memory+0xfbff0b10>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 4000b3c:	1145883a 	add	r2,r2,r5
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4000b40:	42000044 	addi	r8,r8,1
 4000b44:	5a003436 	bltu	r11,r8,4000c18 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
 4000b48:	5009883a 	mov	r4,r10
			{
				for (x = l_x; x <= r_x; x++)
 4000b4c:	393ffb36 	bltu	r7,r4,4000b3c <__alt_mem_Onchip_Memory+0xfbff0b3c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 4000b50:	2107883a 	add	r3,r4,r4
 4000b54:	18c7883a 	add	r3,r3,r3
 4000b58:	1887883a 	add	r3,r3,r2
 4000b5c:	1b000035 	stwio	r12,0(r3)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4000b60:	21000044 	addi	r4,r4,1
 4000b64:	003ff906 	br	4000b4c <__alt_mem_Onchip_Memory+0xfbff0b4c>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4000b68:	31400c1e 	bne	r6,r5,4000b9c <alt_up_pixel_buffer_dma_draw_box+0x148>
			addr = addr + t_y * limit_x;
 4000b6c:	4245383a 	mul	r2,r8,r9
 4000b70:	10c5883a 	add	r2,r2,r3
			for (y = t_y; y <= b_y; y++)
 4000b74:	5a002836 	bltu	r11,r8,4000c18 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
 4000b78:	5007883a 	mov	r3,r10
			{
				for (x = l_x; x <= r_x; x++)
 4000b7c:	38c00436 	bltu	r7,r3,4000b90 <alt_up_pixel_buffer_dma_draw_box+0x13c>
				{
					IOWR_8DIRECT(addr, x, local_color);
 4000b80:	10c9883a 	add	r4,r2,r3
 4000b84:	23000025 	stbio	r12,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4000b88:	18c00044 	addi	r3,r3,1
 4000b8c:	003ffb06 	br	4000b7c <__alt_mem_Onchip_Memory+0xfbff0b7c>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 4000b90:	1245883a 	add	r2,r2,r9
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4000b94:	42000044 	addi	r8,r8,1
 4000b98:	003ff606 	br	4000b74 <__alt_mem_Onchip_Memory+0xfbff0b74>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4000b9c:	00800084 	movi	r2,2
 4000ba0:	4a53883a 	add	r9,r9,r9
 4000ba4:	30800d1e 	bne	r6,r2,4000bdc <alt_up_pixel_buffer_dma_draw_box+0x188>
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
 4000ba8:	4245383a 	mul	r2,r8,r9
 4000bac:	10c5883a 	add	r2,r2,r3
			for (y = t_y; y <= b_y; y++)
 4000bb0:	5a001936 	bltu	r11,r8,4000c18 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
 4000bb4:	5007883a 	mov	r3,r10
			{
				for (x = l_x; x <= r_x; x++)
 4000bb8:	38c00536 	bltu	r7,r3,4000bd0 <alt_up_pixel_buffer_dma_draw_box+0x17c>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 4000bbc:	18c9883a 	add	r4,r3,r3
 4000bc0:	2089883a 	add	r4,r4,r2
 4000bc4:	2300002d 	sthio	r12,0(r4)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4000bc8:	18c00044 	addi	r3,r3,1
 4000bcc:	003ffa06 	br	4000bb8 <__alt_mem_Onchip_Memory+0xfbff0bb8>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 4000bd0:	1245883a 	add	r2,r2,r9
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4000bd4:	42000044 	addi	r8,r8,1
 4000bd8:	003ff506 	br	4000bb0 <__alt_mem_Onchip_Memory+0xfbff0bb0>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 4000bdc:	4a53883a 	add	r9,r9,r9
			addr = addr + t_y * limit_x;
 4000be0:	4245383a 	mul	r2,r8,r9
 4000be4:	10c5883a 	add	r2,r2,r3
			for (y = t_y; y <= b_y; y++)
 4000be8:	5a000b36 	bltu	r11,r8,4000c18 <alt_up_pixel_buffer_dma_draw_box+0x1c4>
 4000bec:	5009883a 	mov	r4,r10
			{
				for (x = l_x; x <= r_x; x++)
 4000bf0:	39000636 	bltu	r7,r4,4000c0c <alt_up_pixel_buffer_dma_draw_box+0x1b8>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 4000bf4:	2107883a 	add	r3,r4,r4
 4000bf8:	18c7883a 	add	r3,r3,r3
 4000bfc:	1887883a 	add	r3,r3,r2
 4000c00:	1b000035 	stwio	r12,0(r3)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4000c04:	21000044 	addi	r4,r4,1
 4000c08:	003ff906 	br	4000bf0 <__alt_mem_Onchip_Memory+0xfbff0bf0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 4000c0c:	1245883a 	add	r2,r2,r9
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4000c10:	42000044 	addi	r8,r8,1
 4000c14:	003ff406 	br	4000be8 <__alt_mem_Onchip_Memory+0xfbff0be8>
 4000c18:	f800283a 	ret

04000c1c <alt_up_pixel_buffer_dma_draw_hline>:
	}
}

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 4000c1c:	da400017 	ldw	r9,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 4000c20:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int l_x = x0;
 4000c24:	2805883a 	mov	r2,r5
	register unsigned int r_x = x1;
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
 4000c28:	3140022e 	bgeu	r6,r5,4000c34 <alt_up_pixel_buffer_dma_draw_hline+0x18>
 4000c2c:	3005883a 	mov	r2,r6
 4000c30:	280d883a 	mov	r6,r5
	{
		temp = l_x;
		l_x = r_x;
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 4000c34:	1200472e 	bgeu	r2,r8,4000d54 <alt_up_pixel_buffer_dma_draw_hline+0x138>
 4000c38:	20c01017 	ldw	r3,64(r4)
 4000c3c:	38c0452e 	bgeu	r7,r3,4000d54 <alt_up_pixel_buffer_dma_draw_hline+0x138>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 4000c40:	32000136 	bltu	r6,r8,4000c48 <alt_up_pixel_buffer_dma_draw_hline+0x2c>
	{
		r_x = limit_x - 1;
 4000c44:	41bfffc4 	addi	r6,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4000c48:	d8c00117 	ldw	r3,4(sp)
 4000c4c:	02800044 	movi	r10,1
 4000c50:	1a80021e 	bne	r3,r10,4000c5c <alt_up_pixel_buffer_dma_draw_hline+0x40>
		addr = pixel_buffer->back_buffer_start_address;
 4000c54:	20c00c17 	ldw	r3,48(r4)
 4000c58:	00000106 	br	4000c60 <alt_up_pixel_buffer_dma_draw_hline+0x44>
	else
		addr = pixel_buffer->buffer_start_address;
 4000c5c:	20c00b17 	ldw	r3,44(r4)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4000c60:	22c00d17 	ldw	r11,52(r4)
 4000c64:	21400e17 	ldw	r5,56(r4)
 4000c68:	58001b1e 	bne	r11,zero,4000cd8 <alt_up_pixel_buffer_dma_draw_hline+0xbc>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
 4000c6c:	21001317 	ldw	r4,76(r4)
 4000c70:	390e983a 	sll	r7,r7,r4
 4000c74:	38c7883a 	add	r3,r7,r3
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4000c78:	2a80061e 	bne	r5,r10,4000c94 <alt_up_pixel_buffer_dma_draw_hline+0x78>
			for (x = l_x; x <= r_x; x++)
 4000c7c:	30800436 	bltu	r6,r2,4000c90 <alt_up_pixel_buffer_dma_draw_hline+0x74>
			{
				IOWR_8DIRECT(addr, x, local_color);
 4000c80:	10c9883a 	add	r4,r2,r3
 4000c84:	22400025 	stbio	r9,0(r4)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 4000c88:	10800044 	addi	r2,r2,1
 4000c8c:	003ffb06 	br	4000c7c <__alt_mem_Onchip_Memory+0xfbff0c7c>
 4000c90:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4000c94:	01000084 	movi	r4,2
 4000c98:	2900071e 	bne	r5,r4,4000cb8 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
			for (x = l_x; x <= r_x; x++)
 4000c9c:	30800536 	bltu	r6,r2,4000cb4 <alt_up_pixel_buffer_dma_draw_hline+0x98>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 4000ca0:	1089883a 	add	r4,r2,r2
 4000ca4:	20c9883a 	add	r4,r4,r3
 4000ca8:	2240002d 	sthio	r9,0(r4)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 4000cac:	10800044 	addi	r2,r2,1
 4000cb0:	003ffa06 	br	4000c9c <__alt_mem_Onchip_Memory+0xfbff0c9c>
 4000cb4:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 4000cb8:	30800636 	bltu	r6,r2,4000cd4 <alt_up_pixel_buffer_dma_draw_hline+0xb8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 4000cbc:	1089883a 	add	r4,r2,r2
 4000cc0:	2109883a 	add	r4,r4,r4
 4000cc4:	20c9883a 	add	r4,r4,r3
 4000cc8:	22400035 	stwio	r9,0(r4)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 4000ccc:	10800044 	addi	r2,r2,1
 4000cd0:	003ff906 	br	4000cb8 <__alt_mem_Onchip_Memory+0xfbff0cb8>
 4000cd4:	f800283a 	ret
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4000cd8:	2a80081e 	bne	r5,r10,4000cfc <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			addr = addr + line_y * limit_x;
 4000cdc:	41cf383a 	mul	r7,r8,r7
 4000ce0:	38c7883a 	add	r3,r7,r3
			for (x = l_x; x <= r_x; x++)
 4000ce4:	30800436 	bltu	r6,r2,4000cf8 <alt_up_pixel_buffer_dma_draw_hline+0xdc>
			{
				IOWR_8DIRECT(addr, x, local_color);
 4000ce8:	10c9883a 	add	r4,r2,r3
 4000cec:	22400025 	stbio	r9,0(r4)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 4000cf0:	10800044 	addi	r2,r2,1
 4000cf4:	003ffb06 	br	4000ce4 <__alt_mem_Onchip_Memory+0xfbff0ce4>
 4000cf8:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4000cfc:	01000084 	movi	r4,2
 4000d00:	4211883a 	add	r8,r8,r8
 4000d04:	2900091e 	bne	r5,r4,4000d2c <alt_up_pixel_buffer_dma_draw_hline+0x110>
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
 4000d08:	41cf383a 	mul	r7,r8,r7
 4000d0c:	38c7883a 	add	r3,r7,r3
			for (x = l_x; x <= r_x; x++)
 4000d10:	30800536 	bltu	r6,r2,4000d28 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 4000d14:	1089883a 	add	r4,r2,r2
 4000d18:	20c9883a 	add	r4,r4,r3
 4000d1c:	2240002d 	sthio	r9,0(r4)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 4000d20:	10800044 	addi	r2,r2,1
 4000d24:	003ffa06 	br	4000d10 <__alt_mem_Onchip_Memory+0xfbff0d10>
 4000d28:	f800283a 	ret
			}
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
 4000d2c:	4211883a 	add	r8,r8,r8
 4000d30:	41cf383a 	mul	r7,r8,r7
 4000d34:	38c7883a 	add	r3,r7,r3
			for (x = l_x; x <= r_x; x++)
 4000d38:	30800636 	bltu	r6,r2,4000d54 <alt_up_pixel_buffer_dma_draw_hline+0x138>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 4000d3c:	1089883a 	add	r4,r2,r2
 4000d40:	2109883a 	add	r4,r4,r4
 4000d44:	20c9883a 	add	r4,r4,r3
 4000d48:	22400035 	stwio	r9,0(r4)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 4000d4c:	10800044 	addi	r2,r2,1
 4000d50:	003ff906 	br	4000d38 <__alt_mem_Onchip_Memory+0xfbff0d38>
 4000d54:	f800283a 	ret

04000d58 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 4000d58:	da800017 	ldw	r10,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 4000d5c:	22400f17 	ldw	r9,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
	register unsigned int temp;
	register unsigned int line_x = x;
	register unsigned int t_y = y0;
 4000d60:	3011883a 	mov	r8,r6
	register unsigned int b_y = y1;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
 4000d64:	3980022e 	bgeu	r7,r6,4000d70 <alt_up_pixel_buffer_dma_draw_vline+0x18>
 4000d68:	3811883a 	mov	r8,r7
 4000d6c:	300f883a 	mov	r7,r6
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 4000d70:	2a404f2e 	bgeu	r5,r9,4000eb0 <alt_up_pixel_buffer_dma_draw_vline+0x158>
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
	register unsigned int limit_y = pixel_buffer->y_resolution;
 4000d74:	20801017 	ldw	r2,64(r4)
	{
		temp = t_y;
		t_y = b_y;
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 4000d78:	40804d2e 	bgeu	r8,r2,4000eb0 <alt_up_pixel_buffer_dma_draw_vline+0x158>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 4000d7c:	38800136 	bltu	r7,r2,4000d84 <alt_up_pixel_buffer_dma_draw_vline+0x2c>
	{
		b_y = limit_y - 1;
 4000d80:	11ffffc4 	addi	r7,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4000d84:	d8800117 	ldw	r2,4(sp)
 4000d88:	01800044 	movi	r6,1
 4000d8c:	1180021e 	bne	r2,r6,4000d98 <alt_up_pixel_buffer_dma_draw_vline+0x40>
		addr = pixel_buffer->back_buffer_start_address;
 4000d90:	20800c17 	ldw	r2,48(r4)
 4000d94:	00000106 	br	4000d9c <alt_up_pixel_buffer_dma_draw_vline+0x44>
	else
		addr = pixel_buffer->buffer_start_address;
 4000d98:	20800b17 	ldw	r2,44(r4)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4000d9c:	20c00d17 	ldw	r3,52(r4)
 4000da0:	22c00e17 	ldw	r11,56(r4)
 4000da4:	1800211e 	bne	r3,zero,4000e2c <alt_up_pixel_buffer_dma_draw_vline+0xd4>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4000da8:	21001317 	ldw	r4,76(r4)
		addr = addr + (t_y << offset_y);
 4000dac:	4106983a 	sll	r3,r8,r4
 4000db0:	1887883a 	add	r3,r3,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4000db4:	5980081e 	bne	r11,r6,4000dd8 <alt_up_pixel_buffer_dma_draw_vline+0x80>
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
 4000db8:	310c983a 	sll	r6,r6,r4
 4000dbc:	28c5883a 	add	r2,r5,r3
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4000dc0:	3a000436 	bltu	r7,r8,4000dd4 <alt_up_pixel_buffer_dma_draw_vline+0x7c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 4000dc4:	12800025 	stbio	r10,0(r2)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4000dc8:	42000044 	addi	r8,r8,1
 4000dcc:	1185883a 	add	r2,r2,r6
 4000dd0:	003ffb06 	br	4000dc0 <__alt_mem_Onchip_Memory+0xfbff0dc0>
 4000dd4:	f800283a 	ret
 4000dd8:	00800044 	movi	r2,1
 4000ddc:	110c983a 	sll	r6,r2,r4
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4000de0:	01000084 	movi	r4,2
 4000de4:	2945883a 	add	r2,r5,r5
 4000de8:	59000326 	beq	r11,r4,4000df8 <alt_up_pixel_buffer_dma_draw_vline+0xa0>
 4000dec:	1085883a 	add	r2,r2,r2
 4000df0:	10c5883a 	add	r2,r2,r3
 4000df4:	00000706 	br	4000e14 <alt_up_pixel_buffer_dma_draw_vline+0xbc>
 4000df8:	10c5883a 	add	r2,r2,r3
			for (y = t_y; y <= b_y; y++)
 4000dfc:	3a000436 	bltu	r7,r8,4000e10 <alt_up_pixel_buffer_dma_draw_vline+0xb8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 4000e00:	1280002d 	sthio	r10,0(r2)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4000e04:	42000044 	addi	r8,r8,1
 4000e08:	1185883a 	add	r2,r2,r6
 4000e0c:	003ffb06 	br	4000dfc <__alt_mem_Onchip_Memory+0xfbff0dfc>
 4000e10:	f800283a 	ret
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4000e14:	3a000436 	bltu	r7,r8,4000e28 <alt_up_pixel_buffer_dma_draw_vline+0xd0>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 4000e18:	12800035 	stwio	r10,0(r2)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4000e1c:	42000044 	addi	r8,r8,1
 4000e20:	1185883a 	add	r2,r2,r6
 4000e24:	003ffb06 	br	4000e14 <__alt_mem_Onchip_Memory+0xfbff0e14>
 4000e28:	f800283a 	ret
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4000e2c:	5980091e 	bne	r11,r6,4000e54 <alt_up_pixel_buffer_dma_draw_vline+0xfc>
 4000e30:	4247383a 	mul	r3,r8,r9
 4000e34:	194b883a 	add	r5,r3,r5
 4000e38:	2885883a 	add	r2,r5,r2
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4000e3c:	3a000436 	bltu	r7,r8,4000e50 <alt_up_pixel_buffer_dma_draw_vline+0xf8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 4000e40:	12800025 	stbio	r10,0(r2)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4000e44:	42000044 	addi	r8,r8,1
 4000e48:	1245883a 	add	r2,r2,r9
 4000e4c:	003ffb06 	br	4000e3c <__alt_mem_Onchip_Memory+0xfbff0e3c>
 4000e50:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4000e54:	00c00084 	movi	r3,2
 4000e58:	294b883a 	add	r5,r5,r5
 4000e5c:	4a53883a 	add	r9,r9,r9
 4000e60:	58c0091e 	bne	r11,r3,4000e88 <alt_up_pixel_buffer_dma_draw_vline+0x130>
 4000e64:	4247383a 	mul	r3,r8,r9
 4000e68:	194b883a 	add	r5,r3,r5
 4000e6c:	2885883a 	add	r2,r5,r2
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4000e70:	3a000436 	bltu	r7,r8,4000e84 <alt_up_pixel_buffer_dma_draw_vline+0x12c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 4000e74:	1280002d 	sthio	r10,0(r2)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4000e78:	42000044 	addi	r8,r8,1
 4000e7c:	1245883a 	add	r2,r2,r9
 4000e80:	003ffb06 	br	4000e70 <__alt_mem_Onchip_Memory+0xfbff0e70>
 4000e84:	f800283a 	ret
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 4000e88:	4a53883a 	add	r9,r9,r9
 4000e8c:	4247383a 	mul	r3,r8,r9
 4000e90:	294b883a 	add	r5,r5,r5
 4000e94:	194b883a 	add	r5,r3,r5
 4000e98:	2885883a 	add	r2,r5,r2
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4000e9c:	3a000436 	bltu	r7,r8,4000eb0 <alt_up_pixel_buffer_dma_draw_vline+0x158>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 4000ea0:	12800035 	stwio	r10,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4000ea4:	42000044 	addi	r8,r8,1
 4000ea8:	1245883a 	add	r2,r2,r9
 4000eac:	003ffb06 	br	4000e9c <__alt_mem_Onchip_Memory+0xfbff0e9c>
 4000eb0:	f800283a 	ret

04000eb4 <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 4000eb4:	defff604 	addi	sp,sp,-40
 4000eb8:	dc400315 	stw	r17,12(sp)
 4000ebc:	dc000215 	stw	r16,8(sp)
 4000ec0:	dc400c17 	ldw	r17,48(sp)
 4000ec4:	dc000b17 	ldw	r16,44(sp)
 4000ec8:	dd400715 	stw	r21,28(sp)
 4000ecc:	dcc00515 	stw	r19,20(sp)
 4000ed0:	dd400a17 	ldw	r21,40(sp)
 4000ed4:	3827883a 	mov	r19,r7
 4000ed8:	dd000615 	stw	r20,24(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 4000edc:	300f883a 	mov	r7,r6
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 4000ee0:	3029883a 	mov	r20,r6
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 4000ee4:	dc400115 	stw	r17,4(sp)
 4000ee8:	980d883a 	mov	r6,r19
 4000eec:	dc000015 	stw	r16,0(sp)
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 4000ef0:	dfc00915 	stw	ra,36(sp)
 4000ef4:	dd800815 	stw	r22,32(sp)
 4000ef8:	dc800415 	stw	r18,16(sp)
 4000efc:	282d883a 	mov	r22,r5
 4000f00:	2025883a 	mov	r18,r4
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 4000f04:	4000c1c0 	call	4000c1c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 4000f08:	a80f883a 	mov	r7,r21
 4000f0c:	980d883a 	mov	r6,r19
 4000f10:	b00b883a 	mov	r5,r22
 4000f14:	9009883a 	mov	r4,r18
 4000f18:	dc400115 	stw	r17,4(sp)
 4000f1c:	dc000015 	stw	r16,0(sp)
 4000f20:	4000c1c0 	call	4000c1c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 4000f24:	a80f883a 	mov	r7,r21
 4000f28:	a00d883a 	mov	r6,r20
 4000f2c:	b00b883a 	mov	r5,r22
 4000f30:	9009883a 	mov	r4,r18
 4000f34:	dc400115 	stw	r17,4(sp)
 4000f38:	dc000015 	stw	r16,0(sp)
 4000f3c:	4000d580 	call	4000d58 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 4000f40:	a80f883a 	mov	r7,r21
 4000f44:	a00d883a 	mov	r6,r20
 4000f48:	980b883a 	mov	r5,r19
 4000f4c:	9009883a 	mov	r4,r18
 4000f50:	dc400b15 	stw	r17,44(sp)
 4000f54:	dc000a15 	stw	r16,40(sp)
}
 4000f58:	dfc00917 	ldw	ra,36(sp)
 4000f5c:	dd800817 	ldw	r22,32(sp)
 4000f60:	dd400717 	ldw	r21,28(sp)
 4000f64:	dd000617 	ldw	r20,24(sp)
 4000f68:	dcc00517 	ldw	r19,20(sp)
 4000f6c:	dc800417 	ldw	r18,16(sp)
 4000f70:	dc400317 	ldw	r17,12(sp)
 4000f74:	dc000217 	ldw	r16,8(sp)
 4000f78:	dec00a04 	addi	sp,sp,40
void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 4000f7c:	4000d581 	jmpi	4000d58 <alt_up_pixel_buffer_dma_draw_vline>

04000f80 <helper_plot_pixel>:
}

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 4000f80:	d8c00117 	ldw	r3,4(sp)
 4000f84:	d8800017 	ldw	r2,0(sp)
 4000f88:	29cb383a 	mul	r5,r5,r7
	if (mode == 0)
 4000f8c:	1800041e 	bne	r3,zero,4000fa0 <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 4000f90:	298d883a 	add	r6,r5,r6
 4000f94:	310d883a 	add	r6,r6,r4
 4000f98:	30800025 	stbio	r2,0(r6)
 4000f9c:	f800283a 	ret
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 4000fa0:	298d883a 	add	r6,r5,r6
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 4000fa4:	01c00044 	movi	r7,1
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 4000fa8:	318d883a 	add	r6,r6,r6
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 4000fac:	19c0031e 	bne	r3,r7,4000fbc <helper_plot_pixel+0x3c>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 4000fb0:	310d883a 	add	r6,r6,r4
 4000fb4:	3080002d 	sthio	r2,0(r6)
 4000fb8:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 4000fbc:	318d883a 	add	r6,r6,r6
 4000fc0:	310d883a 	add	r6,r6,r4
 4000fc4:	30800035 	stwio	r2,0(r6)
 4000fc8:	f800283a 	ret

04000fcc <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 4000fcc:	defff304 	addi	sp,sp,-52
 4000fd0:	d8800d17 	ldw	r2,52(sp)
 4000fd4:	dcc00615 	stw	r19,24(sp)
 4000fd8:	dc800515 	stw	r18,20(sp)
 4000fdc:	dc400415 	stw	r17,16(sp)
 4000fe0:	dfc00c15 	stw	ra,48(sp)
 4000fe4:	df000b15 	stw	fp,44(sp)
 4000fe8:	ddc00a15 	stw	r23,40(sp)
 4000fec:	dd800915 	stw	r22,36(sp)
 4000ff0:	dd400815 	stw	r21,32(sp)
 4000ff4:	dd000715 	stw	r20,28(sp)
 4000ff8:	dc000315 	stw	r16,12(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 4000ffc:	1187c83a 	sub	r3,r2,r6
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 4001000:	2823883a 	mov	r17,r5
 4001004:	3025883a 	mov	r18,r6
 4001008:	3827883a 	mov	r19,r7
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 400100c:	1800010e 	bge	r3,zero,4001014 <alt_up_pixel_buffer_dma_draw_line+0x48>
 4001010:	00c7c83a 	sub	r3,zero,r3
 4001014:	9c4bc83a 	sub	r5,r19,r17
 4001018:	2800010e 	bge	r5,zero,4001020 <alt_up_pixel_buffer_dma_draw_line+0x54>
 400101c:	014bc83a 	sub	r5,zero,r5
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 4001020:	25000e17 	ldw	r20,56(r4)
 4001024:	05800044 	movi	r22,1
 4001028:	a5800426 	beq	r20,r22,400103c <alt_up_pixel_buffer_dma_draw_line+0x70>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 400102c:	a50000a0 	cmpeqi	r20,r20,2
 4001030:	01800084 	movi	r6,2
 4001034:	3529c83a 	sub	r20,r6,r20
 4001038:	00000106 	br	4001040 <alt_up_pixel_buffer_dma_draw_line+0x74>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 400103c:	0029883a 	mov	r20,zero
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 4001040:	21800d17 	ldw	r6,52(r4)
 4001044:	3000041e 	bne	r6,zero,4001058 <alt_up_pixel_buffer_dma_draw_line+0x8c>
 4001048:	21801317 	ldw	r6,76(r4)
 400104c:	350dc83a 	sub	r6,r6,r20
 4001050:	b1ac983a 	sll	r22,r22,r6
 4001054:	00000106 	br	400105c <alt_up_pixel_buffer_dma_draw_line+0x90>
 4001058:	25800f17 	ldw	r22,60(r4)

	if (backbuffer == 1)
 400105c:	d9c00f17 	ldw	r7,60(sp)
 4001060:	01800044 	movi	r6,1
 4001064:	3980021e 	bne	r7,r6,4001070 <alt_up_pixel_buffer_dma_draw_line+0xa4>
		buffer_start = pixel_buffer->back_buffer_start_address;
 4001068:	22000c17 	ldw	r8,48(r4)
 400106c:	00000106 	br	4001074 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 4001070:	22000b17 	ldw	r8,44(r4)

	/* Preprocessing inputs */
	if (steep > 0) {
 4001074:	28c0060e 	bge	r5,r3,4001090 <alt_up_pixel_buffer_dma_draw_line+0xc4>
 4001078:	9809883a 	mov	r4,r19
		error = x_0;
		x_0 = y_0;
		y_0 = error;
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
 400107c:	1027883a 	mov	r19,r2
		y_1 = error;
 4001080:	2005883a 	mov	r2,r4
 4001084:	8809883a 	mov	r4,r17

	/* Preprocessing inputs */
	if (steep > 0) {
		// Swap x_0 and y_0
		error = x_0;
		x_0 = y_0;
 4001088:	9023883a 	mov	r17,r18
		y_0 = error;
 400108c:	2025883a 	mov	r18,r4
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
 4001090:	9c40060e 	bge	r19,r17,40010ac <alt_up_pixel_buffer_dma_draw_line+0xe0>
 4001094:	9009883a 	mov	r4,r18
		error = x_0;
		x_0 = x_1;
		x_1 = error;
		// Swap y_0 and y_1
		error = y_0;
		y_0 = y_1;
 4001098:	1025883a 	mov	r18,r2
		y_1 = error;
 400109c:	2005883a 	mov	r2,r4
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
 40010a0:	8809883a 	mov	r4,r17
 40010a4:	9823883a 	mov	r17,r19
 40010a8:	2027883a 	mov	r19,r4
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
 40010ac:	14afc83a 	sub	r23,r2,r18
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 40010b0:	9c79c83a 	sub	fp,r19,r17
	deltay = ABS(y_1 - y_0);
 40010b4:	b800010e 	bge	r23,zero,40010bc <alt_up_pixel_buffer_dma_draw_line+0xf0>
 40010b8:	05efc83a 	sub	r23,zero,r23
	error = -(deltax / 2); 
 40010bc:	e020d7fa 	srli	r16,fp,31
 40010c0:	8721883a 	add	r16,r16,fp
 40010c4:	8021d07a 	srai	r16,r16,1
 40010c8:	0421c83a 	sub	r16,zero,r16
	y = y_0;
	if (y_0 < y_1)
 40010cc:	90800216 	blt	r18,r2,40010d8 <alt_up_pixel_buffer_dma_draw_line+0x10c>
		ystep = 1;
	else
		ystep = -1;
 40010d0:	057fffc4 	movi	r21,-1
 40010d4:	00000106 	br	40010dc <alt_up_pixel_buffer_dma_draw_line+0x110>
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
	error = -(deltax / 2); 
	y = y_0;
	if (y_0 < y_1)
		ystep = 1;
 40010d8:	05400044 	movi	r21,1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 40010dc:	28c0200e 	bge	r5,r3,4001160 <alt_up_pixel_buffer_dma_draw_line+0x194>
	{
		for (x=x_0; x <= x_1; x++) {
 40010e0:	9c402016 	blt	r19,r17,4001164 <alt_up_pixel_buffer_dma_draw_line+0x198>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 40010e4:	d8800e17 	ldw	r2,56(sp)
 40010e8:	4009883a 	mov	r4,r8
 40010ec:	dd000115 	stw	r20,4(sp)
 40010f0:	d8800015 	stw	r2,0(sp)
 40010f4:	880f883a 	mov	r7,r17
 40010f8:	900d883a 	mov	r6,r18
 40010fc:	b00b883a 	mov	r5,r22
 4001100:	da000215 	stw	r8,8(sp)
			error = error + deltay;
 4001104:	85e1883a 	add	r16,r16,r23
	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 4001108:	4000f800 	call	4000f80 <helper_plot_pixel>
			error = error + deltay;
			if (error > 0) {
 400110c:	da000217 	ldw	r8,8(sp)
 4001110:	0400020e 	bge	zero,r16,400111c <alt_up_pixel_buffer_dma_draw_line+0x150>
				y = y + ystep;
 4001114:	9565883a 	add	r18,r18,r21
				error = error - deltax;
 4001118:	8721c83a 	sub	r16,r16,fp

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 400111c:	8c400044 	addi	r17,r17,1
 4001120:	003fef06 	br	40010e0 <__alt_mem_Onchip_Memory+0xfbff10e0>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 4001124:	d8800e17 	ldw	r2,56(sp)
 4001128:	4009883a 	mov	r4,r8
 400112c:	dd000115 	stw	r20,4(sp)
 4001130:	d8800015 	stw	r2,0(sp)
 4001134:	900f883a 	mov	r7,r18
 4001138:	880d883a 	mov	r6,r17
 400113c:	b00b883a 	mov	r5,r22
 4001140:	da000215 	stw	r8,8(sp)
			error = error + deltay;
 4001144:	85e1883a 	add	r16,r16,r23
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 4001148:	4000f800 	call	4000f80 <helper_plot_pixel>
			error = error + deltay;
			if (error > 0) {
 400114c:	da000217 	ldw	r8,8(sp)
 4001150:	0400020e 	bge	zero,r16,400115c <alt_up_pixel_buffer_dma_draw_line+0x190>
				y = y + ystep;
 4001154:	9565883a 	add	r18,r18,r21
				error = error - deltax;
 4001158:	8721c83a 	sub	r16,r16,fp
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 400115c:	8c400044 	addi	r17,r17,1
 4001160:	9c7ff00e 	bge	r19,r17,4001124 <__alt_mem_Onchip_Memory+0xfbff1124>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 4001164:	dfc00c17 	ldw	ra,48(sp)
 4001168:	df000b17 	ldw	fp,44(sp)
 400116c:	ddc00a17 	ldw	r23,40(sp)
 4001170:	dd800917 	ldw	r22,36(sp)
 4001174:	dd400817 	ldw	r21,32(sp)
 4001178:	dd000717 	ldw	r20,28(sp)
 400117c:	dcc00617 	ldw	r19,24(sp)
 4001180:	dc800517 	ldw	r18,20(sp)
 4001184:	dc400417 	ldw	r17,16(sp)
 4001188:	dc000317 	ldw	r16,12(sp)
 400118c:	dec00d04 	addi	sp,sp,52
 4001190:	f800283a 	ret

04001194 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4001194:	0005883a 	mov	r2,zero
 4001198:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 400119c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 40011a0:	10800804 	addi	r2,r2,32
 40011a4:	10fffd1e 	bne	r2,r3,400119c <__alt_mem_Onchip_Memory+0xfbff119c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 40011a8:	f800283a 	ret

040011ac <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 40011ac:	3005883a 	mov	r2,r6
 40011b0:	f800283a 	ret

040011b4 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 40011b4:	20000226 	beq	r4,zero,40011c0 <alt_dev_llist_insert+0xc>
 40011b8:	20800217 	ldw	r2,8(r4)
 40011bc:	1000101e 	bne	r2,zero,4001200 <alt_dev_llist_insert+0x4c>
 40011c0:	d0a00817 	ldw	r2,-32736(gp)
 40011c4:	10000926 	beq	r2,zero,40011ec <alt_dev_llist_insert+0x38>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 40011c8:	deffff04 	addi	sp,sp,-4
 40011cc:	dfc00015 	stw	ra,0(sp)
 40011d0:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 40011d4:	00c00584 	movi	r3,22
 40011d8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 40011dc:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 40011e0:	dfc00017 	ldw	ra,0(sp)
 40011e4:	dec00104 	addi	sp,sp,4
 40011e8:	f800283a 	ret
 40011ec:	d0a0a604 	addi	r2,gp,-32104
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 40011f0:	00c00584 	movi	r3,22
 40011f4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 40011f8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 40011fc:	f800283a 	ret

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
 4001200:	28800017 	ldw	r2,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4001204:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
 4001208:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
 400120c:	28800017 	ldw	r2,0(r5)
 4001210:	11000115 	stw	r4,4(r2)
  list->next           = entry;
 4001214:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
 4001218:	0005883a 	mov	r2,zero
 400121c:	f800283a 	ret

04001220 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4001220:	defffb04 	addi	sp,sp,-20
 4001224:	dcc00315 	stw	r19,12(sp)
 4001228:	dc800215 	stw	r18,8(sp)
 400122c:	dc400115 	stw	r17,4(sp)
 4001230:	dc000015 	stw	r16,0(sp)
 4001234:	dfc00415 	stw	ra,16(sp)
 4001238:	2027883a 	mov	r19,r4
 400123c:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
 4001240:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
 4001244:	40002cc0 	call	40002cc <strlen>
 4001248:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400124c:	84400726 	beq	r16,r17,400126c <alt_find_dev+0x4c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4001250:	81000217 	ldw	r4,8(r16)
 4001254:	900d883a 	mov	r6,r18
 4001258:	980b883a 	mov	r5,r19
 400125c:	40012e00 	call	40012e0 <memcmp>
 4001260:	10000426 	beq	r2,zero,4001274 <alt_find_dev+0x54>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 4001264:	84000017 	ldw	r16,0(r16)
 4001268:	003ff806 	br	400124c <__alt_mem_Onchip_Memory+0xfbff124c>
  }
  
  /* No match found */
  
  return NULL;
 400126c:	0005883a 	mov	r2,zero
 4001270:	00000106 	br	4001278 <alt_find_dev+0x58>
 4001274:	8005883a 	mov	r2,r16
}
 4001278:	dfc00417 	ldw	ra,16(sp)
 400127c:	dcc00317 	ldw	r19,12(sp)
 4001280:	dc800217 	ldw	r18,8(sp)
 4001284:	dc400117 	ldw	r17,4(sp)
 4001288:	dc000017 	ldw	r16,0(sp)
 400128c:	dec00504 	addi	sp,sp,20
 4001290:	f800283a 	ret

04001294 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4001294:	01440004 	movi	r5,4096
 4001298:	0009883a 	mov	r4,zero
 400129c:	40012a81 	jmpi	40012a8 <alt_icache_flush>

040012a0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 40012a0:	000170fa 	wrctl	ienable,zero
 40012a4:	f800283a 	ret

040012a8 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 40012a8:	00840004 	movi	r2,4096
 40012ac:	1140012e 	bgeu	r2,r5,40012b4 <alt_icache_flush+0xc>
 40012b0:	100b883a 	mov	r5,r2
 40012b4:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40012b8:	2005883a 	mov	r2,r4
 40012bc:	1140032e 	bgeu	r2,r5,40012cc <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 40012c0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40012c4:	10800804 	addi	r2,r2,32
 40012c8:	003ffc06 	br	40012bc <__alt_mem_Onchip_Memory+0xfbff12bc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 40012cc:	210007cc 	andi	r4,r4,31
 40012d0:	20000126 	beq	r4,zero,40012d8 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 40012d4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 40012d8:	0000203a 	flushp
 40012dc:	f800283a 	ret

040012e0 <memcmp>:
 40012e0:	218d883a 	add	r6,r4,r6
 40012e4:	21800826 	beq	r4,r6,4001308 <memcmp+0x28>
 40012e8:	20800003 	ldbu	r2,0(r4)
 40012ec:	28c00003 	ldbu	r3,0(r5)
 40012f0:	10c00226 	beq	r2,r3,40012fc <memcmp+0x1c>
 40012f4:	10c5c83a 	sub	r2,r2,r3
 40012f8:	f800283a 	ret
 40012fc:	21000044 	addi	r4,r4,1
 4001300:	29400044 	addi	r5,r5,1
 4001304:	003ff706 	br	40012e4 <__alt_mem_Onchip_Memory+0xfbff12e4>
 4001308:	0005883a 	mov	r2,zero
 400130c:	f800283a 	ret

04001310 <strcmp>:
 4001310:	20800003 	ldbu	r2,0(r4)
 4001314:	10c03fcc 	andi	r3,r2,255
 4001318:	18c0201c 	xori	r3,r3,128
 400131c:	18ffe004 	addi	r3,r3,-128
 4001320:	18000526 	beq	r3,zero,4001338 <strcmp+0x28>
 4001324:	29800007 	ldb	r6,0(r5)
 4001328:	1980031e 	bne	r3,r6,4001338 <strcmp+0x28>
 400132c:	21000044 	addi	r4,r4,1
 4001330:	29400044 	addi	r5,r5,1
 4001334:	003ff606 	br	4001310 <__alt_mem_Onchip_Memory+0xfbff1310>
 4001338:	28c00003 	ldbu	r3,0(r5)
 400133c:	10803fcc 	andi	r2,r2,255
 4001340:	10c5c83a 	sub	r2,r2,r3
 4001344:	f800283a 	ret
