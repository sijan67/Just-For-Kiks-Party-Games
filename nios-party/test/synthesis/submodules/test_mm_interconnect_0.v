// test_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module test_mm_interconnect_0 (
		input  wire        Sys_Clk_sys_clk_clk,                                //                          Sys_Clk_sys_clk.clk
		input  wire        JTAG_reset_reset_bridge_in_reset_reset,             //         JTAG_reset_reset_bridge_in_reset.reset
		input  wire        Pixel_Buffer_reset_reset_bridge_in_reset_reset,     // Pixel_Buffer_reset_reset_bridge_in_reset.reset
		input  wire [27:0] CPU_data_master_address,                            //                          CPU_data_master.address
		output wire        CPU_data_master_waitrequest,                        //                                         .waitrequest
		input  wire [3:0]  CPU_data_master_byteenable,                         //                                         .byteenable
		input  wire        CPU_data_master_read,                               //                                         .read
		output wire [31:0] CPU_data_master_readdata,                           //                                         .readdata
		output wire        CPU_data_master_readdatavalid,                      //                                         .readdatavalid
		input  wire        CPU_data_master_write,                              //                                         .write
		input  wire [31:0] CPU_data_master_writedata,                          //                                         .writedata
		input  wire        CPU_data_master_debugaccess,                        //                                         .debugaccess
		input  wire [27:0] CPU_instruction_master_address,                     //                   CPU_instruction_master.address
		output wire        CPU_instruction_master_waitrequest,                 //                                         .waitrequest
		input  wire        CPU_instruction_master_read,                        //                                         .read
		output wire [31:0] CPU_instruction_master_readdata,                    //                                         .readdata
		output wire        CPU_instruction_master_readdatavalid,               //                                         .readdatavalid
		input  wire [31:0] Pixel_Buffer_avalon_pixel_dma_master_address,       //     Pixel_Buffer_avalon_pixel_dma_master.address
		output wire        Pixel_Buffer_avalon_pixel_dma_master_waitrequest,   //                                         .waitrequest
		input  wire        Pixel_Buffer_avalon_pixel_dma_master_read,          //                                         .read
		output wire [7:0]  Pixel_Buffer_avalon_pixel_dma_master_readdata,      //                                         .readdata
		output wire        Pixel_Buffer_avalon_pixel_dma_master_readdatavalid, //                                         .readdatavalid
		input  wire        Pixel_Buffer_avalon_pixel_dma_master_lock,          //                                         .lock
		output wire [1:0]  Audio_avalon_audio_slave_address,                   //                 Audio_avalon_audio_slave.address
		output wire        Audio_avalon_audio_slave_write,                     //                                         .write
		output wire        Audio_avalon_audio_slave_read,                      //                                         .read
		input  wire [31:0] Audio_avalon_audio_slave_readdata,                  //                                         .readdata
		output wire [31:0] Audio_avalon_audio_slave_writedata,                 //                                         .writedata
		output wire        Audio_avalon_audio_slave_chipselect,                //                                         .chipselect
		output wire [12:0] Char_Buffer_avalon_char_buffer_slave_address,       //     Char_Buffer_avalon_char_buffer_slave.address
		output wire        Char_Buffer_avalon_char_buffer_slave_write,         //                                         .write
		output wire        Char_Buffer_avalon_char_buffer_slave_read,          //                                         .read
		input  wire [7:0]  Char_Buffer_avalon_char_buffer_slave_readdata,      //                                         .readdata
		output wire [7:0]  Char_Buffer_avalon_char_buffer_slave_writedata,     //                                         .writedata
		output wire [0:0]  Char_Buffer_avalon_char_buffer_slave_byteenable,    //                                         .byteenable
		input  wire        Char_Buffer_avalon_char_buffer_slave_waitrequest,   //                                         .waitrequest
		output wire        Char_Buffer_avalon_char_buffer_slave_chipselect,    //                                         .chipselect
		output wire [0:0]  Char_Buffer_avalon_char_control_slave_address,      //    Char_Buffer_avalon_char_control_slave.address
		output wire        Char_Buffer_avalon_char_control_slave_write,        //                                         .write
		output wire        Char_Buffer_avalon_char_control_slave_read,         //                                         .read
		input  wire [31:0] Char_Buffer_avalon_char_control_slave_readdata,     //                                         .readdata
		output wire [31:0] Char_Buffer_avalon_char_control_slave_writedata,    //                                         .writedata
		output wire [3:0]  Char_Buffer_avalon_char_control_slave_byteenable,   //                                         .byteenable
		output wire        Char_Buffer_avalon_char_control_slave_chipselect,   //                                         .chipselect
		output wire [8:0]  CPU_debug_mem_slave_address,                        //                      CPU_debug_mem_slave.address
		output wire        CPU_debug_mem_slave_write,                          //                                         .write
		output wire        CPU_debug_mem_slave_read,                           //                                         .read
		input  wire [31:0] CPU_debug_mem_slave_readdata,                       //                                         .readdata
		output wire [31:0] CPU_debug_mem_slave_writedata,                      //                                         .writedata
		output wire [3:0]  CPU_debug_mem_slave_byteenable,                     //                                         .byteenable
		input  wire        CPU_debug_mem_slave_waitrequest,                    //                                         .waitrequest
		output wire        CPU_debug_mem_slave_debugaccess,                    //                                         .debugaccess
		output wire [0:0]  JTAG_avalon_jtag_slave_address,                     //                   JTAG_avalon_jtag_slave.address
		output wire        JTAG_avalon_jtag_slave_write,                       //                                         .write
		output wire        JTAG_avalon_jtag_slave_read,                        //                                         .read
		input  wire [31:0] JTAG_avalon_jtag_slave_readdata,                    //                                         .readdata
		output wire [31:0] JTAG_avalon_jtag_slave_writedata,                   //                                         .writedata
		input  wire        JTAG_avalon_jtag_slave_waitrequest,                 //                                         .waitrequest
		output wire        JTAG_avalon_jtag_slave_chipselect,                  //                                         .chipselect
		output wire [1:0]  Pixel_Buffer_avalon_control_slave_address,          //        Pixel_Buffer_avalon_control_slave.address
		output wire        Pixel_Buffer_avalon_control_slave_write,            //                                         .write
		output wire        Pixel_Buffer_avalon_control_slave_read,             //                                         .read
		input  wire [31:0] Pixel_Buffer_avalon_control_slave_readdata,         //                                         .readdata
		output wire [31:0] Pixel_Buffer_avalon_control_slave_writedata,        //                                         .writedata
		output wire [3:0]  Pixel_Buffer_avalon_control_slave_byteenable,       //                                         .byteenable
		output wire        RGB_Resampler_avalon_rgb_slave_read,                //           RGB_Resampler_avalon_rgb_slave.read
		input  wire [31:0] RGB_Resampler_avalon_rgb_slave_readdata,            //                                         .readdata
		output wire [24:0] SDRAM_s1_address,                                   //                                 SDRAM_s1.address
		output wire        SDRAM_s1_write,                                     //                                         .write
		output wire        SDRAM_s1_read,                                      //                                         .read
		input  wire [15:0] SDRAM_s1_readdata,                                  //                                         .readdata
		output wire [15:0] SDRAM_s1_writedata,                                 //                                         .writedata
		output wire [1:0]  SDRAM_s1_byteenable,                                //                                         .byteenable
		input  wire        SDRAM_s1_readdatavalid,                             //                                         .readdatavalid
		input  wire        SDRAM_s1_waitrequest,                               //                                         .waitrequest
		output wire        SDRAM_s1_chipselect,                                //                                         .chipselect
		output wire [2:0]  timer_0_s1_address,                                 //                               timer_0_s1.address
		output wire        timer_0_s1_write,                                   //                                         .write
		input  wire [15:0] timer_0_s1_readdata,                                //                                         .readdata
		output wire [15:0] timer_0_s1_writedata,                               //                                         .writedata
		output wire        timer_0_s1_chipselect                               //                                         .chipselect
	);

	wire          pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_waitrequest;                             // Pixel_Buffer_avalon_pixel_dma_master_agent:av_waitrequest -> Pixel_Buffer_avalon_pixel_dma_master_translator:uav_waitrequest
	wire    [7:0] pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdata;                                // Pixel_Buffer_avalon_pixel_dma_master_agent:av_readdata -> Pixel_Buffer_avalon_pixel_dma_master_translator:uav_readdata
	wire          pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_debugaccess;                             // Pixel_Buffer_avalon_pixel_dma_master_translator:uav_debugaccess -> Pixel_Buffer_avalon_pixel_dma_master_agent:av_debugaccess
	wire   [31:0] pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_address;                                 // Pixel_Buffer_avalon_pixel_dma_master_translator:uav_address -> Pixel_Buffer_avalon_pixel_dma_master_agent:av_address
	wire          pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_read;                                    // Pixel_Buffer_avalon_pixel_dma_master_translator:uav_read -> Pixel_Buffer_avalon_pixel_dma_master_agent:av_read
	wire    [0:0] pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_byteenable;                              // Pixel_Buffer_avalon_pixel_dma_master_translator:uav_byteenable -> Pixel_Buffer_avalon_pixel_dma_master_agent:av_byteenable
	wire          pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid;                           // Pixel_Buffer_avalon_pixel_dma_master_agent:av_readdatavalid -> Pixel_Buffer_avalon_pixel_dma_master_translator:uav_readdatavalid
	wire          pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_lock;                                    // Pixel_Buffer_avalon_pixel_dma_master_translator:uav_lock -> Pixel_Buffer_avalon_pixel_dma_master_agent:av_lock
	wire          pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_write;                                   // Pixel_Buffer_avalon_pixel_dma_master_translator:uav_write -> Pixel_Buffer_avalon_pixel_dma_master_agent:av_write
	wire    [7:0] pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_writedata;                               // Pixel_Buffer_avalon_pixel_dma_master_translator:uav_writedata -> Pixel_Buffer_avalon_pixel_dma_master_agent:av_writedata
	wire    [0:0] pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_burstcount;                              // Pixel_Buffer_avalon_pixel_dma_master_translator:uav_burstcount -> Pixel_Buffer_avalon_pixel_dma_master_agent:av_burstcount
	wire          cpu_data_master_translator_avalon_universal_master_0_waitrequest;                                                  // CPU_data_master_agent:av_waitrequest -> CPU_data_master_translator:uav_waitrequest
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_readdata;                                                     // CPU_data_master_agent:av_readdata -> CPU_data_master_translator:uav_readdata
	wire          cpu_data_master_translator_avalon_universal_master_0_debugaccess;                                                  // CPU_data_master_translator:uav_debugaccess -> CPU_data_master_agent:av_debugaccess
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_address;                                                      // CPU_data_master_translator:uav_address -> CPU_data_master_agent:av_address
	wire          cpu_data_master_translator_avalon_universal_master_0_read;                                                         // CPU_data_master_translator:uav_read -> CPU_data_master_agent:av_read
	wire    [3:0] cpu_data_master_translator_avalon_universal_master_0_byteenable;                                                   // CPU_data_master_translator:uav_byteenable -> CPU_data_master_agent:av_byteenable
	wire          cpu_data_master_translator_avalon_universal_master_0_readdatavalid;                                                // CPU_data_master_agent:av_readdatavalid -> CPU_data_master_translator:uav_readdatavalid
	wire          cpu_data_master_translator_avalon_universal_master_0_lock;                                                         // CPU_data_master_translator:uav_lock -> CPU_data_master_agent:av_lock
	wire          cpu_data_master_translator_avalon_universal_master_0_write;                                                        // CPU_data_master_translator:uav_write -> CPU_data_master_agent:av_write
	wire   [31:0] cpu_data_master_translator_avalon_universal_master_0_writedata;                                                    // CPU_data_master_translator:uav_writedata -> CPU_data_master_agent:av_writedata
	wire    [2:0] cpu_data_master_translator_avalon_universal_master_0_burstcount;                                                   // CPU_data_master_translator:uav_burstcount -> CPU_data_master_agent:av_burstcount
	wire          cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;                                           // CPU_instruction_master_agent:av_waitrequest -> CPU_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_readdata;                                              // CPU_instruction_master_agent:av_readdata -> CPU_instruction_master_translator:uav_readdata
	wire          cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;                                           // CPU_instruction_master_translator:uav_debugaccess -> CPU_instruction_master_agent:av_debugaccess
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_address;                                               // CPU_instruction_master_translator:uav_address -> CPU_instruction_master_agent:av_address
	wire          cpu_instruction_master_translator_avalon_universal_master_0_read;                                                  // CPU_instruction_master_translator:uav_read -> CPU_instruction_master_agent:av_read
	wire    [3:0] cpu_instruction_master_translator_avalon_universal_master_0_byteenable;                                            // CPU_instruction_master_translator:uav_byteenable -> CPU_instruction_master_agent:av_byteenable
	wire          cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid;                                         // CPU_instruction_master_agent:av_readdatavalid -> CPU_instruction_master_translator:uav_readdatavalid
	wire          cpu_instruction_master_translator_avalon_universal_master_0_lock;                                                  // CPU_instruction_master_translator:uav_lock -> CPU_instruction_master_agent:av_lock
	wire          cpu_instruction_master_translator_avalon_universal_master_0_write;                                                 // CPU_instruction_master_translator:uav_write -> CPU_instruction_master_agent:av_write
	wire   [31:0] cpu_instruction_master_translator_avalon_universal_master_0_writedata;                                             // CPU_instruction_master_translator:uav_writedata -> CPU_instruction_master_agent:av_writedata
	wire    [2:0] cpu_instruction_master_translator_avalon_universal_master_0_burstcount;                                            // CPU_instruction_master_translator:uav_burstcount -> CPU_instruction_master_agent:av_burstcount
	wire    [7:0] char_buffer_avalon_char_buffer_slave_agent_m0_readdata;                                                            // Char_Buffer_avalon_char_buffer_slave_translator:uav_readdata -> Char_Buffer_avalon_char_buffer_slave_agent:m0_readdata
	wire          char_buffer_avalon_char_buffer_slave_agent_m0_waitrequest;                                                         // Char_Buffer_avalon_char_buffer_slave_translator:uav_waitrequest -> Char_Buffer_avalon_char_buffer_slave_agent:m0_waitrequest
	wire          char_buffer_avalon_char_buffer_slave_agent_m0_debugaccess;                                                         // Char_Buffer_avalon_char_buffer_slave_agent:m0_debugaccess -> Char_Buffer_avalon_char_buffer_slave_translator:uav_debugaccess
	wire   [31:0] char_buffer_avalon_char_buffer_slave_agent_m0_address;                                                             // Char_Buffer_avalon_char_buffer_slave_agent:m0_address -> Char_Buffer_avalon_char_buffer_slave_translator:uav_address
	wire    [0:0] char_buffer_avalon_char_buffer_slave_agent_m0_byteenable;                                                          // Char_Buffer_avalon_char_buffer_slave_agent:m0_byteenable -> Char_Buffer_avalon_char_buffer_slave_translator:uav_byteenable
	wire          char_buffer_avalon_char_buffer_slave_agent_m0_read;                                                                // Char_Buffer_avalon_char_buffer_slave_agent:m0_read -> Char_Buffer_avalon_char_buffer_slave_translator:uav_read
	wire          char_buffer_avalon_char_buffer_slave_agent_m0_readdatavalid;                                                       // Char_Buffer_avalon_char_buffer_slave_translator:uav_readdatavalid -> Char_Buffer_avalon_char_buffer_slave_agent:m0_readdatavalid
	wire          char_buffer_avalon_char_buffer_slave_agent_m0_lock;                                                                // Char_Buffer_avalon_char_buffer_slave_agent:m0_lock -> Char_Buffer_avalon_char_buffer_slave_translator:uav_lock
	wire    [7:0] char_buffer_avalon_char_buffer_slave_agent_m0_writedata;                                                           // Char_Buffer_avalon_char_buffer_slave_agent:m0_writedata -> Char_Buffer_avalon_char_buffer_slave_translator:uav_writedata
	wire          char_buffer_avalon_char_buffer_slave_agent_m0_write;                                                               // Char_Buffer_avalon_char_buffer_slave_agent:m0_write -> Char_Buffer_avalon_char_buffer_slave_translator:uav_write
	wire    [0:0] char_buffer_avalon_char_buffer_slave_agent_m0_burstcount;                                                          // Char_Buffer_avalon_char_buffer_slave_agent:m0_burstcount -> Char_Buffer_avalon_char_buffer_slave_translator:uav_burstcount
	wire          char_buffer_avalon_char_buffer_slave_agent_rf_source_valid;                                                        // Char_Buffer_avalon_char_buffer_slave_agent:rf_source_valid -> Char_Buffer_avalon_char_buffer_slave_agent_rsp_fifo:in_valid
	wire   [83:0] char_buffer_avalon_char_buffer_slave_agent_rf_source_data;                                                         // Char_Buffer_avalon_char_buffer_slave_agent:rf_source_data -> Char_Buffer_avalon_char_buffer_slave_agent_rsp_fifo:in_data
	wire          char_buffer_avalon_char_buffer_slave_agent_rf_source_ready;                                                        // Char_Buffer_avalon_char_buffer_slave_agent_rsp_fifo:in_ready -> Char_Buffer_avalon_char_buffer_slave_agent:rf_source_ready
	wire          char_buffer_avalon_char_buffer_slave_agent_rf_source_startofpacket;                                                // Char_Buffer_avalon_char_buffer_slave_agent:rf_source_startofpacket -> Char_Buffer_avalon_char_buffer_slave_agent_rsp_fifo:in_startofpacket
	wire          char_buffer_avalon_char_buffer_slave_agent_rf_source_endofpacket;                                                  // Char_Buffer_avalon_char_buffer_slave_agent:rf_source_endofpacket -> Char_Buffer_avalon_char_buffer_slave_agent_rsp_fifo:in_endofpacket
	wire          char_buffer_avalon_char_buffer_slave_agent_rsp_fifo_out_valid;                                                     // Char_Buffer_avalon_char_buffer_slave_agent_rsp_fifo:out_valid -> Char_Buffer_avalon_char_buffer_slave_agent:rf_sink_valid
	wire   [83:0] char_buffer_avalon_char_buffer_slave_agent_rsp_fifo_out_data;                                                      // Char_Buffer_avalon_char_buffer_slave_agent_rsp_fifo:out_data -> Char_Buffer_avalon_char_buffer_slave_agent:rf_sink_data
	wire          char_buffer_avalon_char_buffer_slave_agent_rsp_fifo_out_ready;                                                     // Char_Buffer_avalon_char_buffer_slave_agent:rf_sink_ready -> Char_Buffer_avalon_char_buffer_slave_agent_rsp_fifo:out_ready
	wire          char_buffer_avalon_char_buffer_slave_agent_rsp_fifo_out_startofpacket;                                             // Char_Buffer_avalon_char_buffer_slave_agent_rsp_fifo:out_startofpacket -> Char_Buffer_avalon_char_buffer_slave_agent:rf_sink_startofpacket
	wire          char_buffer_avalon_char_buffer_slave_agent_rsp_fifo_out_endofpacket;                                               // Char_Buffer_avalon_char_buffer_slave_agent_rsp_fifo:out_endofpacket -> Char_Buffer_avalon_char_buffer_slave_agent:rf_sink_endofpacket
	wire   [31:0] char_buffer_avalon_char_control_slave_agent_m0_readdata;                                                           // Char_Buffer_avalon_char_control_slave_translator:uav_readdata -> Char_Buffer_avalon_char_control_slave_agent:m0_readdata
	wire          char_buffer_avalon_char_control_slave_agent_m0_waitrequest;                                                        // Char_Buffer_avalon_char_control_slave_translator:uav_waitrequest -> Char_Buffer_avalon_char_control_slave_agent:m0_waitrequest
	wire          char_buffer_avalon_char_control_slave_agent_m0_debugaccess;                                                        // Char_Buffer_avalon_char_control_slave_agent:m0_debugaccess -> Char_Buffer_avalon_char_control_slave_translator:uav_debugaccess
	wire   [31:0] char_buffer_avalon_char_control_slave_agent_m0_address;                                                            // Char_Buffer_avalon_char_control_slave_agent:m0_address -> Char_Buffer_avalon_char_control_slave_translator:uav_address
	wire    [3:0] char_buffer_avalon_char_control_slave_agent_m0_byteenable;                                                         // Char_Buffer_avalon_char_control_slave_agent:m0_byteenable -> Char_Buffer_avalon_char_control_slave_translator:uav_byteenable
	wire          char_buffer_avalon_char_control_slave_agent_m0_read;                                                               // Char_Buffer_avalon_char_control_slave_agent:m0_read -> Char_Buffer_avalon_char_control_slave_translator:uav_read
	wire          char_buffer_avalon_char_control_slave_agent_m0_readdatavalid;                                                      // Char_Buffer_avalon_char_control_slave_translator:uav_readdatavalid -> Char_Buffer_avalon_char_control_slave_agent:m0_readdatavalid
	wire          char_buffer_avalon_char_control_slave_agent_m0_lock;                                                               // Char_Buffer_avalon_char_control_slave_agent:m0_lock -> Char_Buffer_avalon_char_control_slave_translator:uav_lock
	wire   [31:0] char_buffer_avalon_char_control_slave_agent_m0_writedata;                                                          // Char_Buffer_avalon_char_control_slave_agent:m0_writedata -> Char_Buffer_avalon_char_control_slave_translator:uav_writedata
	wire          char_buffer_avalon_char_control_slave_agent_m0_write;                                                              // Char_Buffer_avalon_char_control_slave_agent:m0_write -> Char_Buffer_avalon_char_control_slave_translator:uav_write
	wire    [2:0] char_buffer_avalon_char_control_slave_agent_m0_burstcount;                                                         // Char_Buffer_avalon_char_control_slave_agent:m0_burstcount -> Char_Buffer_avalon_char_control_slave_translator:uav_burstcount
	wire          char_buffer_avalon_char_control_slave_agent_rf_source_valid;                                                       // Char_Buffer_avalon_char_control_slave_agent:rf_source_valid -> Char_Buffer_avalon_char_control_slave_agent_rsp_fifo:in_valid
	wire  [110:0] char_buffer_avalon_char_control_slave_agent_rf_source_data;                                                        // Char_Buffer_avalon_char_control_slave_agent:rf_source_data -> Char_Buffer_avalon_char_control_slave_agent_rsp_fifo:in_data
	wire          char_buffer_avalon_char_control_slave_agent_rf_source_ready;                                                       // Char_Buffer_avalon_char_control_slave_agent_rsp_fifo:in_ready -> Char_Buffer_avalon_char_control_slave_agent:rf_source_ready
	wire          char_buffer_avalon_char_control_slave_agent_rf_source_startofpacket;                                               // Char_Buffer_avalon_char_control_slave_agent:rf_source_startofpacket -> Char_Buffer_avalon_char_control_slave_agent_rsp_fifo:in_startofpacket
	wire          char_buffer_avalon_char_control_slave_agent_rf_source_endofpacket;                                                 // Char_Buffer_avalon_char_control_slave_agent:rf_source_endofpacket -> Char_Buffer_avalon_char_control_slave_agent_rsp_fifo:in_endofpacket
	wire          char_buffer_avalon_char_control_slave_agent_rsp_fifo_out_valid;                                                    // Char_Buffer_avalon_char_control_slave_agent_rsp_fifo:out_valid -> Char_Buffer_avalon_char_control_slave_agent:rf_sink_valid
	wire  [110:0] char_buffer_avalon_char_control_slave_agent_rsp_fifo_out_data;                                                     // Char_Buffer_avalon_char_control_slave_agent_rsp_fifo:out_data -> Char_Buffer_avalon_char_control_slave_agent:rf_sink_data
	wire          char_buffer_avalon_char_control_slave_agent_rsp_fifo_out_ready;                                                    // Char_Buffer_avalon_char_control_slave_agent:rf_sink_ready -> Char_Buffer_avalon_char_control_slave_agent_rsp_fifo:out_ready
	wire          char_buffer_avalon_char_control_slave_agent_rsp_fifo_out_startofpacket;                                            // Char_Buffer_avalon_char_control_slave_agent_rsp_fifo:out_startofpacket -> Char_Buffer_avalon_char_control_slave_agent:rf_sink_startofpacket
	wire          char_buffer_avalon_char_control_slave_agent_rsp_fifo_out_endofpacket;                                              // Char_Buffer_avalon_char_control_slave_agent_rsp_fifo:out_endofpacket -> Char_Buffer_avalon_char_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                                                             // cmd_mux_001:src_valid -> Char_Buffer_avalon_char_control_slave_agent:cp_valid
	wire  [109:0] cmd_mux_001_src_data;                                                                                              // cmd_mux_001:src_data -> Char_Buffer_avalon_char_control_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                                             // Char_Buffer_avalon_char_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [8:0] cmd_mux_001_src_channel;                                                                                           // cmd_mux_001:src_channel -> Char_Buffer_avalon_char_control_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                                                     // cmd_mux_001:src_startofpacket -> Char_Buffer_avalon_char_control_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                                       // cmd_mux_001:src_endofpacket -> Char_Buffer_avalon_char_control_slave_agent:cp_endofpacket
	wire   [31:0] pixel_buffer_avalon_control_slave_agent_m0_readdata;                                                               // Pixel_Buffer_avalon_control_slave_translator:uav_readdata -> Pixel_Buffer_avalon_control_slave_agent:m0_readdata
	wire          pixel_buffer_avalon_control_slave_agent_m0_waitrequest;                                                            // Pixel_Buffer_avalon_control_slave_translator:uav_waitrequest -> Pixel_Buffer_avalon_control_slave_agent:m0_waitrequest
	wire          pixel_buffer_avalon_control_slave_agent_m0_debugaccess;                                                            // Pixel_Buffer_avalon_control_slave_agent:m0_debugaccess -> Pixel_Buffer_avalon_control_slave_translator:uav_debugaccess
	wire   [31:0] pixel_buffer_avalon_control_slave_agent_m0_address;                                                                // Pixel_Buffer_avalon_control_slave_agent:m0_address -> Pixel_Buffer_avalon_control_slave_translator:uav_address
	wire    [3:0] pixel_buffer_avalon_control_slave_agent_m0_byteenable;                                                             // Pixel_Buffer_avalon_control_slave_agent:m0_byteenable -> Pixel_Buffer_avalon_control_slave_translator:uav_byteenable
	wire          pixel_buffer_avalon_control_slave_agent_m0_read;                                                                   // Pixel_Buffer_avalon_control_slave_agent:m0_read -> Pixel_Buffer_avalon_control_slave_translator:uav_read
	wire          pixel_buffer_avalon_control_slave_agent_m0_readdatavalid;                                                          // Pixel_Buffer_avalon_control_slave_translator:uav_readdatavalid -> Pixel_Buffer_avalon_control_slave_agent:m0_readdatavalid
	wire          pixel_buffer_avalon_control_slave_agent_m0_lock;                                                                   // Pixel_Buffer_avalon_control_slave_agent:m0_lock -> Pixel_Buffer_avalon_control_slave_translator:uav_lock
	wire   [31:0] pixel_buffer_avalon_control_slave_agent_m0_writedata;                                                              // Pixel_Buffer_avalon_control_slave_agent:m0_writedata -> Pixel_Buffer_avalon_control_slave_translator:uav_writedata
	wire          pixel_buffer_avalon_control_slave_agent_m0_write;                                                                  // Pixel_Buffer_avalon_control_slave_agent:m0_write -> Pixel_Buffer_avalon_control_slave_translator:uav_write
	wire    [2:0] pixel_buffer_avalon_control_slave_agent_m0_burstcount;                                                             // Pixel_Buffer_avalon_control_slave_agent:m0_burstcount -> Pixel_Buffer_avalon_control_slave_translator:uav_burstcount
	wire          pixel_buffer_avalon_control_slave_agent_rf_source_valid;                                                           // Pixel_Buffer_avalon_control_slave_agent:rf_source_valid -> Pixel_Buffer_avalon_control_slave_agent_rsp_fifo:in_valid
	wire  [110:0] pixel_buffer_avalon_control_slave_agent_rf_source_data;                                                            // Pixel_Buffer_avalon_control_slave_agent:rf_source_data -> Pixel_Buffer_avalon_control_slave_agent_rsp_fifo:in_data
	wire          pixel_buffer_avalon_control_slave_agent_rf_source_ready;                                                           // Pixel_Buffer_avalon_control_slave_agent_rsp_fifo:in_ready -> Pixel_Buffer_avalon_control_slave_agent:rf_source_ready
	wire          pixel_buffer_avalon_control_slave_agent_rf_source_startofpacket;                                                   // Pixel_Buffer_avalon_control_slave_agent:rf_source_startofpacket -> Pixel_Buffer_avalon_control_slave_agent_rsp_fifo:in_startofpacket
	wire          pixel_buffer_avalon_control_slave_agent_rf_source_endofpacket;                                                     // Pixel_Buffer_avalon_control_slave_agent:rf_source_endofpacket -> Pixel_Buffer_avalon_control_slave_agent_rsp_fifo:in_endofpacket
	wire          pixel_buffer_avalon_control_slave_agent_rsp_fifo_out_valid;                                                        // Pixel_Buffer_avalon_control_slave_agent_rsp_fifo:out_valid -> Pixel_Buffer_avalon_control_slave_agent:rf_sink_valid
	wire  [110:0] pixel_buffer_avalon_control_slave_agent_rsp_fifo_out_data;                                                         // Pixel_Buffer_avalon_control_slave_agent_rsp_fifo:out_data -> Pixel_Buffer_avalon_control_slave_agent:rf_sink_data
	wire          pixel_buffer_avalon_control_slave_agent_rsp_fifo_out_ready;                                                        // Pixel_Buffer_avalon_control_slave_agent:rf_sink_ready -> Pixel_Buffer_avalon_control_slave_agent_rsp_fifo:out_ready
	wire          pixel_buffer_avalon_control_slave_agent_rsp_fifo_out_startofpacket;                                                // Pixel_Buffer_avalon_control_slave_agent_rsp_fifo:out_startofpacket -> Pixel_Buffer_avalon_control_slave_agent:rf_sink_startofpacket
	wire          pixel_buffer_avalon_control_slave_agent_rsp_fifo_out_endofpacket;                                                  // Pixel_Buffer_avalon_control_slave_agent_rsp_fifo:out_endofpacket -> Pixel_Buffer_avalon_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                                             // cmd_mux_002:src_valid -> Pixel_Buffer_avalon_control_slave_agent:cp_valid
	wire  [109:0] cmd_mux_002_src_data;                                                                                              // cmd_mux_002:src_data -> Pixel_Buffer_avalon_control_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                                             // Pixel_Buffer_avalon_control_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [8:0] cmd_mux_002_src_channel;                                                                                           // cmd_mux_002:src_channel -> Pixel_Buffer_avalon_control_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                                                     // cmd_mux_002:src_startofpacket -> Pixel_Buffer_avalon_control_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                                       // cmd_mux_002:src_endofpacket -> Pixel_Buffer_avalon_control_slave_agent:cp_endofpacket
	wire   [31:0] rgb_resampler_avalon_rgb_slave_agent_m0_readdata;                                                                  // RGB_Resampler_avalon_rgb_slave_translator:uav_readdata -> RGB_Resampler_avalon_rgb_slave_agent:m0_readdata
	wire          rgb_resampler_avalon_rgb_slave_agent_m0_waitrequest;                                                               // RGB_Resampler_avalon_rgb_slave_translator:uav_waitrequest -> RGB_Resampler_avalon_rgb_slave_agent:m0_waitrequest
	wire          rgb_resampler_avalon_rgb_slave_agent_m0_debugaccess;                                                               // RGB_Resampler_avalon_rgb_slave_agent:m0_debugaccess -> RGB_Resampler_avalon_rgb_slave_translator:uav_debugaccess
	wire   [31:0] rgb_resampler_avalon_rgb_slave_agent_m0_address;                                                                   // RGB_Resampler_avalon_rgb_slave_agent:m0_address -> RGB_Resampler_avalon_rgb_slave_translator:uav_address
	wire    [3:0] rgb_resampler_avalon_rgb_slave_agent_m0_byteenable;                                                                // RGB_Resampler_avalon_rgb_slave_agent:m0_byteenable -> RGB_Resampler_avalon_rgb_slave_translator:uav_byteenable
	wire          rgb_resampler_avalon_rgb_slave_agent_m0_read;                                                                      // RGB_Resampler_avalon_rgb_slave_agent:m0_read -> RGB_Resampler_avalon_rgb_slave_translator:uav_read
	wire          rgb_resampler_avalon_rgb_slave_agent_m0_readdatavalid;                                                             // RGB_Resampler_avalon_rgb_slave_translator:uav_readdatavalid -> RGB_Resampler_avalon_rgb_slave_agent:m0_readdatavalid
	wire          rgb_resampler_avalon_rgb_slave_agent_m0_lock;                                                                      // RGB_Resampler_avalon_rgb_slave_agent:m0_lock -> RGB_Resampler_avalon_rgb_slave_translator:uav_lock
	wire   [31:0] rgb_resampler_avalon_rgb_slave_agent_m0_writedata;                                                                 // RGB_Resampler_avalon_rgb_slave_agent:m0_writedata -> RGB_Resampler_avalon_rgb_slave_translator:uav_writedata
	wire          rgb_resampler_avalon_rgb_slave_agent_m0_write;                                                                     // RGB_Resampler_avalon_rgb_slave_agent:m0_write -> RGB_Resampler_avalon_rgb_slave_translator:uav_write
	wire    [2:0] rgb_resampler_avalon_rgb_slave_agent_m0_burstcount;                                                                // RGB_Resampler_avalon_rgb_slave_agent:m0_burstcount -> RGB_Resampler_avalon_rgb_slave_translator:uav_burstcount
	wire          rgb_resampler_avalon_rgb_slave_agent_rf_source_valid;                                                              // RGB_Resampler_avalon_rgb_slave_agent:rf_source_valid -> RGB_Resampler_avalon_rgb_slave_agent_rsp_fifo:in_valid
	wire  [110:0] rgb_resampler_avalon_rgb_slave_agent_rf_source_data;                                                               // RGB_Resampler_avalon_rgb_slave_agent:rf_source_data -> RGB_Resampler_avalon_rgb_slave_agent_rsp_fifo:in_data
	wire          rgb_resampler_avalon_rgb_slave_agent_rf_source_ready;                                                              // RGB_Resampler_avalon_rgb_slave_agent_rsp_fifo:in_ready -> RGB_Resampler_avalon_rgb_slave_agent:rf_source_ready
	wire          rgb_resampler_avalon_rgb_slave_agent_rf_source_startofpacket;                                                      // RGB_Resampler_avalon_rgb_slave_agent:rf_source_startofpacket -> RGB_Resampler_avalon_rgb_slave_agent_rsp_fifo:in_startofpacket
	wire          rgb_resampler_avalon_rgb_slave_agent_rf_source_endofpacket;                                                        // RGB_Resampler_avalon_rgb_slave_agent:rf_source_endofpacket -> RGB_Resampler_avalon_rgb_slave_agent_rsp_fifo:in_endofpacket
	wire          rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_valid;                                                           // RGB_Resampler_avalon_rgb_slave_agent_rsp_fifo:out_valid -> RGB_Resampler_avalon_rgb_slave_agent:rf_sink_valid
	wire  [110:0] rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_data;                                                            // RGB_Resampler_avalon_rgb_slave_agent_rsp_fifo:out_data -> RGB_Resampler_avalon_rgb_slave_agent:rf_sink_data
	wire          rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_ready;                                                           // RGB_Resampler_avalon_rgb_slave_agent:rf_sink_ready -> RGB_Resampler_avalon_rgb_slave_agent_rsp_fifo:out_ready
	wire          rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_startofpacket;                                                   // RGB_Resampler_avalon_rgb_slave_agent_rsp_fifo:out_startofpacket -> RGB_Resampler_avalon_rgb_slave_agent:rf_sink_startofpacket
	wire          rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_endofpacket;                                                     // RGB_Resampler_avalon_rgb_slave_agent_rsp_fifo:out_endofpacket -> RGB_Resampler_avalon_rgb_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                                             // cmd_mux_003:src_valid -> RGB_Resampler_avalon_rgb_slave_agent:cp_valid
	wire  [109:0] cmd_mux_003_src_data;                                                                                              // cmd_mux_003:src_data -> RGB_Resampler_avalon_rgb_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                                             // RGB_Resampler_avalon_rgb_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire    [8:0] cmd_mux_003_src_channel;                                                                                           // cmd_mux_003:src_channel -> RGB_Resampler_avalon_rgb_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                                                     // cmd_mux_003:src_startofpacket -> RGB_Resampler_avalon_rgb_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                                       // cmd_mux_003:src_endofpacket -> RGB_Resampler_avalon_rgb_slave_agent:cp_endofpacket
	wire   [31:0] cpu_debug_mem_slave_agent_m0_readdata;                                                                             // CPU_debug_mem_slave_translator:uav_readdata -> CPU_debug_mem_slave_agent:m0_readdata
	wire          cpu_debug_mem_slave_agent_m0_waitrequest;                                                                          // CPU_debug_mem_slave_translator:uav_waitrequest -> CPU_debug_mem_slave_agent:m0_waitrequest
	wire          cpu_debug_mem_slave_agent_m0_debugaccess;                                                                          // CPU_debug_mem_slave_agent:m0_debugaccess -> CPU_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] cpu_debug_mem_slave_agent_m0_address;                                                                              // CPU_debug_mem_slave_agent:m0_address -> CPU_debug_mem_slave_translator:uav_address
	wire    [3:0] cpu_debug_mem_slave_agent_m0_byteenable;                                                                           // CPU_debug_mem_slave_agent:m0_byteenable -> CPU_debug_mem_slave_translator:uav_byteenable
	wire          cpu_debug_mem_slave_agent_m0_read;                                                                                 // CPU_debug_mem_slave_agent:m0_read -> CPU_debug_mem_slave_translator:uav_read
	wire          cpu_debug_mem_slave_agent_m0_readdatavalid;                                                                        // CPU_debug_mem_slave_translator:uav_readdatavalid -> CPU_debug_mem_slave_agent:m0_readdatavalid
	wire          cpu_debug_mem_slave_agent_m0_lock;                                                                                 // CPU_debug_mem_slave_agent:m0_lock -> CPU_debug_mem_slave_translator:uav_lock
	wire   [31:0] cpu_debug_mem_slave_agent_m0_writedata;                                                                            // CPU_debug_mem_slave_agent:m0_writedata -> CPU_debug_mem_slave_translator:uav_writedata
	wire          cpu_debug_mem_slave_agent_m0_write;                                                                                // CPU_debug_mem_slave_agent:m0_write -> CPU_debug_mem_slave_translator:uav_write
	wire    [2:0] cpu_debug_mem_slave_agent_m0_burstcount;                                                                           // CPU_debug_mem_slave_agent:m0_burstcount -> CPU_debug_mem_slave_translator:uav_burstcount
	wire          cpu_debug_mem_slave_agent_rf_source_valid;                                                                         // CPU_debug_mem_slave_agent:rf_source_valid -> CPU_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [110:0] cpu_debug_mem_slave_agent_rf_source_data;                                                                          // CPU_debug_mem_slave_agent:rf_source_data -> CPU_debug_mem_slave_agent_rsp_fifo:in_data
	wire          cpu_debug_mem_slave_agent_rf_source_ready;                                                                         // CPU_debug_mem_slave_agent_rsp_fifo:in_ready -> CPU_debug_mem_slave_agent:rf_source_ready
	wire          cpu_debug_mem_slave_agent_rf_source_startofpacket;                                                                 // CPU_debug_mem_slave_agent:rf_source_startofpacket -> CPU_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          cpu_debug_mem_slave_agent_rf_source_endofpacket;                                                                   // CPU_debug_mem_slave_agent:rf_source_endofpacket -> CPU_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_valid;                                                                      // CPU_debug_mem_slave_agent_rsp_fifo:out_valid -> CPU_debug_mem_slave_agent:rf_sink_valid
	wire  [110:0] cpu_debug_mem_slave_agent_rsp_fifo_out_data;                                                                       // CPU_debug_mem_slave_agent_rsp_fifo:out_data -> CPU_debug_mem_slave_agent:rf_sink_data
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_ready;                                                                      // CPU_debug_mem_slave_agent:rf_sink_ready -> CPU_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                                                              // CPU_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> CPU_debug_mem_slave_agent:rf_sink_startofpacket
	wire          cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                                                                // CPU_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> CPU_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                                                             // cmd_mux_004:src_valid -> CPU_debug_mem_slave_agent:cp_valid
	wire  [109:0] cmd_mux_004_src_data;                                                                                              // cmd_mux_004:src_data -> CPU_debug_mem_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                                             // CPU_debug_mem_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [8:0] cmd_mux_004_src_channel;                                                                                           // cmd_mux_004:src_channel -> CPU_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                                                     // cmd_mux_004:src_startofpacket -> CPU_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                                       // cmd_mux_004:src_endofpacket -> CPU_debug_mem_slave_agent:cp_endofpacket
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                                                        // SDRAM_s1_translator:uav_readdata -> SDRAM_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                                                     // SDRAM_s1_translator:uav_waitrequest -> SDRAM_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                                                     // SDRAM_s1_agent:m0_debugaccess -> SDRAM_s1_translator:uav_debugaccess
	wire   [31:0] sdram_s1_agent_m0_address;                                                                                         // SDRAM_s1_agent:m0_address -> SDRAM_s1_translator:uav_address
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                                                                      // SDRAM_s1_agent:m0_byteenable -> SDRAM_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                                                            // SDRAM_s1_agent:m0_read -> SDRAM_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                                                                   // SDRAM_s1_translator:uav_readdatavalid -> SDRAM_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                                                            // SDRAM_s1_agent:m0_lock -> SDRAM_s1_translator:uav_lock
	wire   [15:0] sdram_s1_agent_m0_writedata;                                                                                       // SDRAM_s1_agent:m0_writedata -> SDRAM_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                                                           // SDRAM_s1_agent:m0_write -> SDRAM_s1_translator:uav_write
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                                                                      // SDRAM_s1_agent:m0_burstcount -> SDRAM_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                                                    // SDRAM_s1_agent:rf_source_valid -> SDRAM_s1_agent_rsp_fifo:in_valid
	wire   [92:0] sdram_s1_agent_rf_source_data;                                                                                     // SDRAM_s1_agent:rf_source_data -> SDRAM_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                                                    // SDRAM_s1_agent_rsp_fifo:in_ready -> SDRAM_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                                                            // SDRAM_s1_agent:rf_source_startofpacket -> SDRAM_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                                                              // SDRAM_s1_agent:rf_source_endofpacket -> SDRAM_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                                                                 // SDRAM_s1_agent_rsp_fifo:out_valid -> SDRAM_s1_agent:rf_sink_valid
	wire   [92:0] sdram_s1_agent_rsp_fifo_out_data;                                                                                  // SDRAM_s1_agent_rsp_fifo:out_data -> SDRAM_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                                                                 // SDRAM_s1_agent:rf_sink_ready -> SDRAM_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                                                         // SDRAM_s1_agent_rsp_fifo:out_startofpacket -> SDRAM_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                                                           // SDRAM_s1_agent_rsp_fifo:out_endofpacket -> SDRAM_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                                                               // SDRAM_s1_agent:rdata_fifo_src_valid -> SDRAM_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                                                                // SDRAM_s1_agent:rdata_fifo_src_data -> SDRAM_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                                                               // SDRAM_s1_agent_rdata_fifo:in_ready -> SDRAM_s1_agent:rdata_fifo_src_ready
	wire   [31:0] audio_avalon_audio_slave_agent_m0_readdata;                                                                        // Audio_avalon_audio_slave_translator:uav_readdata -> Audio_avalon_audio_slave_agent:m0_readdata
	wire          audio_avalon_audio_slave_agent_m0_waitrequest;                                                                     // Audio_avalon_audio_slave_translator:uav_waitrequest -> Audio_avalon_audio_slave_agent:m0_waitrequest
	wire          audio_avalon_audio_slave_agent_m0_debugaccess;                                                                     // Audio_avalon_audio_slave_agent:m0_debugaccess -> Audio_avalon_audio_slave_translator:uav_debugaccess
	wire   [31:0] audio_avalon_audio_slave_agent_m0_address;                                                                         // Audio_avalon_audio_slave_agent:m0_address -> Audio_avalon_audio_slave_translator:uav_address
	wire    [3:0] audio_avalon_audio_slave_agent_m0_byteenable;                                                                      // Audio_avalon_audio_slave_agent:m0_byteenable -> Audio_avalon_audio_slave_translator:uav_byteenable
	wire          audio_avalon_audio_slave_agent_m0_read;                                                                            // Audio_avalon_audio_slave_agent:m0_read -> Audio_avalon_audio_slave_translator:uav_read
	wire          audio_avalon_audio_slave_agent_m0_readdatavalid;                                                                   // Audio_avalon_audio_slave_translator:uav_readdatavalid -> Audio_avalon_audio_slave_agent:m0_readdatavalid
	wire          audio_avalon_audio_slave_agent_m0_lock;                                                                            // Audio_avalon_audio_slave_agent:m0_lock -> Audio_avalon_audio_slave_translator:uav_lock
	wire   [31:0] audio_avalon_audio_slave_agent_m0_writedata;                                                                       // Audio_avalon_audio_slave_agent:m0_writedata -> Audio_avalon_audio_slave_translator:uav_writedata
	wire          audio_avalon_audio_slave_agent_m0_write;                                                                           // Audio_avalon_audio_slave_agent:m0_write -> Audio_avalon_audio_slave_translator:uav_write
	wire    [2:0] audio_avalon_audio_slave_agent_m0_burstcount;                                                                      // Audio_avalon_audio_slave_agent:m0_burstcount -> Audio_avalon_audio_slave_translator:uav_burstcount
	wire          audio_avalon_audio_slave_agent_rf_source_valid;                                                                    // Audio_avalon_audio_slave_agent:rf_source_valid -> Audio_avalon_audio_slave_agent_rsp_fifo:in_valid
	wire  [110:0] audio_avalon_audio_slave_agent_rf_source_data;                                                                     // Audio_avalon_audio_slave_agent:rf_source_data -> Audio_avalon_audio_slave_agent_rsp_fifo:in_data
	wire          audio_avalon_audio_slave_agent_rf_source_ready;                                                                    // Audio_avalon_audio_slave_agent_rsp_fifo:in_ready -> Audio_avalon_audio_slave_agent:rf_source_ready
	wire          audio_avalon_audio_slave_agent_rf_source_startofpacket;                                                            // Audio_avalon_audio_slave_agent:rf_source_startofpacket -> Audio_avalon_audio_slave_agent_rsp_fifo:in_startofpacket
	wire          audio_avalon_audio_slave_agent_rf_source_endofpacket;                                                              // Audio_avalon_audio_slave_agent:rf_source_endofpacket -> Audio_avalon_audio_slave_agent_rsp_fifo:in_endofpacket
	wire          audio_avalon_audio_slave_agent_rsp_fifo_out_valid;                                                                 // Audio_avalon_audio_slave_agent_rsp_fifo:out_valid -> Audio_avalon_audio_slave_agent:rf_sink_valid
	wire  [110:0] audio_avalon_audio_slave_agent_rsp_fifo_out_data;                                                                  // Audio_avalon_audio_slave_agent_rsp_fifo:out_data -> Audio_avalon_audio_slave_agent:rf_sink_data
	wire          audio_avalon_audio_slave_agent_rsp_fifo_out_ready;                                                                 // Audio_avalon_audio_slave_agent:rf_sink_ready -> Audio_avalon_audio_slave_agent_rsp_fifo:out_ready
	wire          audio_avalon_audio_slave_agent_rsp_fifo_out_startofpacket;                                                         // Audio_avalon_audio_slave_agent_rsp_fifo:out_startofpacket -> Audio_avalon_audio_slave_agent:rf_sink_startofpacket
	wire          audio_avalon_audio_slave_agent_rsp_fifo_out_endofpacket;                                                           // Audio_avalon_audio_slave_agent_rsp_fifo:out_endofpacket -> Audio_avalon_audio_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                                                             // cmd_mux_006:src_valid -> Audio_avalon_audio_slave_agent:cp_valid
	wire  [109:0] cmd_mux_006_src_data;                                                                                              // cmd_mux_006:src_data -> Audio_avalon_audio_slave_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                                             // Audio_avalon_audio_slave_agent:cp_ready -> cmd_mux_006:src_ready
	wire    [8:0] cmd_mux_006_src_channel;                                                                                           // cmd_mux_006:src_channel -> Audio_avalon_audio_slave_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                                                     // cmd_mux_006:src_startofpacket -> Audio_avalon_audio_slave_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                                       // cmd_mux_006:src_endofpacket -> Audio_avalon_audio_slave_agent:cp_endofpacket
	wire   [31:0] jtag_avalon_jtag_slave_agent_m0_readdata;                                                                          // JTAG_avalon_jtag_slave_translator:uav_readdata -> JTAG_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_avalon_jtag_slave_agent_m0_waitrequest;                                                                       // JTAG_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_avalon_jtag_slave_agent_m0_debugaccess;                                                                       // JTAG_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_avalon_jtag_slave_agent_m0_address;                                                                           // JTAG_avalon_jtag_slave_agent:m0_address -> JTAG_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_avalon_jtag_slave_agent_m0_byteenable;                                                                        // JTAG_avalon_jtag_slave_agent:m0_byteenable -> JTAG_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_avalon_jtag_slave_agent_m0_read;                                                                              // JTAG_avalon_jtag_slave_agent:m0_read -> JTAG_avalon_jtag_slave_translator:uav_read
	wire          jtag_avalon_jtag_slave_agent_m0_readdatavalid;                                                                     // JTAG_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_avalon_jtag_slave_agent_m0_lock;                                                                              // JTAG_avalon_jtag_slave_agent:m0_lock -> JTAG_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_avalon_jtag_slave_agent_m0_writedata;                                                                         // JTAG_avalon_jtag_slave_agent:m0_writedata -> JTAG_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_avalon_jtag_slave_agent_m0_write;                                                                             // JTAG_avalon_jtag_slave_agent:m0_write -> JTAG_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_avalon_jtag_slave_agent_m0_burstcount;                                                                        // JTAG_avalon_jtag_slave_agent:m0_burstcount -> JTAG_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_avalon_jtag_slave_agent_rf_source_valid;                                                                      // JTAG_avalon_jtag_slave_agent:rf_source_valid -> JTAG_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [110:0] jtag_avalon_jtag_slave_agent_rf_source_data;                                                                       // JTAG_avalon_jtag_slave_agent:rf_source_data -> JTAG_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_avalon_jtag_slave_agent_rf_source_ready;                                                                      // JTAG_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_avalon_jtag_slave_agent_rf_source_startofpacket;                                                              // JTAG_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_avalon_jtag_slave_agent_rf_source_endofpacket;                                                                // JTAG_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                                                   // JTAG_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_avalon_jtag_slave_agent:rf_sink_valid
	wire  [110:0] jtag_avalon_jtag_slave_agent_rsp_fifo_out_data;                                                                    // JTAG_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                                                   // JTAG_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                                                           // JTAG_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                                             // JTAG_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                                                             // cmd_mux_007:src_valid -> JTAG_avalon_jtag_slave_agent:cp_valid
	wire  [109:0] cmd_mux_007_src_data;                                                                                              // cmd_mux_007:src_data -> JTAG_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                                             // JTAG_avalon_jtag_slave_agent:cp_ready -> cmd_mux_007:src_ready
	wire    [8:0] cmd_mux_007_src_channel;                                                                                           // cmd_mux_007:src_channel -> JTAG_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                                                     // cmd_mux_007:src_startofpacket -> JTAG_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                                       // cmd_mux_007:src_endofpacket -> JTAG_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] timer_0_s1_agent_m0_readdata;                                                                                      // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire          timer_0_s1_agent_m0_waitrequest;                                                                                   // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire          timer_0_s1_agent_m0_debugaccess;                                                                                   // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire   [31:0] timer_0_s1_agent_m0_address;                                                                                       // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire    [3:0] timer_0_s1_agent_m0_byteenable;                                                                                    // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire          timer_0_s1_agent_m0_read;                                                                                          // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire          timer_0_s1_agent_m0_readdatavalid;                                                                                 // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire          timer_0_s1_agent_m0_lock;                                                                                          // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire   [31:0] timer_0_s1_agent_m0_writedata;                                                                                     // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire          timer_0_s1_agent_m0_write;                                                                                         // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire    [2:0] timer_0_s1_agent_m0_burstcount;                                                                                    // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire          timer_0_s1_agent_rf_source_valid;                                                                                  // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire  [110:0] timer_0_s1_agent_rf_source_data;                                                                                   // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire          timer_0_s1_agent_rf_source_ready;                                                                                  // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire          timer_0_s1_agent_rf_source_startofpacket;                                                                          // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_0_s1_agent_rf_source_endofpacket;                                                                            // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_valid;                                                                               // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire  [110:0] timer_0_s1_agent_rsp_fifo_out_data;                                                                                // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire          timer_0_s1_agent_rsp_fifo_out_ready;                                                                               // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire          timer_0_s1_agent_rsp_fifo_out_startofpacket;                                                                       // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_endofpacket;                                                                         // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                                                             // cmd_mux_008:src_valid -> timer_0_s1_agent:cp_valid
	wire  [109:0] cmd_mux_008_src_data;                                                                                              // cmd_mux_008:src_data -> timer_0_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                                             // timer_0_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire    [8:0] cmd_mux_008_src_channel;                                                                                           // cmd_mux_008:src_channel -> timer_0_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                                                     // cmd_mux_008:src_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                                                       // cmd_mux_008:src_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire          pixel_buffer_avalon_pixel_dma_master_agent_cp_valid;                                                               // Pixel_Buffer_avalon_pixel_dma_master_agent:cp_valid -> router:sink_valid
	wire   [82:0] pixel_buffer_avalon_pixel_dma_master_agent_cp_data;                                                                // Pixel_Buffer_avalon_pixel_dma_master_agent:cp_data -> router:sink_data
	wire          pixel_buffer_avalon_pixel_dma_master_agent_cp_ready;                                                               // router:sink_ready -> Pixel_Buffer_avalon_pixel_dma_master_agent:cp_ready
	wire          pixel_buffer_avalon_pixel_dma_master_agent_cp_startofpacket;                                                       // Pixel_Buffer_avalon_pixel_dma_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          pixel_buffer_avalon_pixel_dma_master_agent_cp_endofpacket;                                                         // Pixel_Buffer_avalon_pixel_dma_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          cpu_data_master_agent_cp_valid;                                                                                    // CPU_data_master_agent:cp_valid -> router_001:sink_valid
	wire  [109:0] cpu_data_master_agent_cp_data;                                                                                     // CPU_data_master_agent:cp_data -> router_001:sink_data
	wire          cpu_data_master_agent_cp_ready;                                                                                    // router_001:sink_ready -> CPU_data_master_agent:cp_ready
	wire          cpu_data_master_agent_cp_startofpacket;                                                                            // CPU_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          cpu_data_master_agent_cp_endofpacket;                                                                              // CPU_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          cpu_instruction_master_agent_cp_valid;                                                                             // CPU_instruction_master_agent:cp_valid -> router_002:sink_valid
	wire  [109:0] cpu_instruction_master_agent_cp_data;                                                                              // CPU_instruction_master_agent:cp_data -> router_002:sink_data
	wire          cpu_instruction_master_agent_cp_ready;                                                                             // router_002:sink_ready -> CPU_instruction_master_agent:cp_ready
	wire          cpu_instruction_master_agent_cp_startofpacket;                                                                     // CPU_instruction_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          cpu_instruction_master_agent_cp_endofpacket;                                                                       // CPU_instruction_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          char_buffer_avalon_char_buffer_slave_agent_rp_valid;                                                               // Char_Buffer_avalon_char_buffer_slave_agent:rp_valid -> router_003:sink_valid
	wire   [82:0] char_buffer_avalon_char_buffer_slave_agent_rp_data;                                                                // Char_Buffer_avalon_char_buffer_slave_agent:rp_data -> router_003:sink_data
	wire          char_buffer_avalon_char_buffer_slave_agent_rp_ready;                                                               // router_003:sink_ready -> Char_Buffer_avalon_char_buffer_slave_agent:rp_ready
	wire          char_buffer_avalon_char_buffer_slave_agent_rp_startofpacket;                                                       // Char_Buffer_avalon_char_buffer_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          char_buffer_avalon_char_buffer_slave_agent_rp_endofpacket;                                                         // Char_Buffer_avalon_char_buffer_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                                              // router_003:src_valid -> rsp_demux:sink_valid
	wire   [82:0] router_003_src_data;                                                                                               // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                                                              // rsp_demux:sink_ready -> router_003:src_ready
	wire    [8:0] router_003_src_channel;                                                                                            // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                                                                      // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                                        // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          char_buffer_avalon_char_control_slave_agent_rp_valid;                                                              // Char_Buffer_avalon_char_control_slave_agent:rp_valid -> router_004:sink_valid
	wire  [109:0] char_buffer_avalon_char_control_slave_agent_rp_data;                                                               // Char_Buffer_avalon_char_control_slave_agent:rp_data -> router_004:sink_data
	wire          char_buffer_avalon_char_control_slave_agent_rp_ready;                                                              // router_004:sink_ready -> Char_Buffer_avalon_char_control_slave_agent:rp_ready
	wire          char_buffer_avalon_char_control_slave_agent_rp_startofpacket;                                                      // Char_Buffer_avalon_char_control_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          char_buffer_avalon_char_control_slave_agent_rp_endofpacket;                                                        // Char_Buffer_avalon_char_control_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                                              // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [109:0] router_004_src_data;                                                                                               // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                                                              // rsp_demux_001:sink_ready -> router_004:src_ready
	wire    [8:0] router_004_src_channel;                                                                                            // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                                                                      // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                                        // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          pixel_buffer_avalon_control_slave_agent_rp_valid;                                                                  // Pixel_Buffer_avalon_control_slave_agent:rp_valid -> router_005:sink_valid
	wire  [109:0] pixel_buffer_avalon_control_slave_agent_rp_data;                                                                   // Pixel_Buffer_avalon_control_slave_agent:rp_data -> router_005:sink_data
	wire          pixel_buffer_avalon_control_slave_agent_rp_ready;                                                                  // router_005:sink_ready -> Pixel_Buffer_avalon_control_slave_agent:rp_ready
	wire          pixel_buffer_avalon_control_slave_agent_rp_startofpacket;                                                          // Pixel_Buffer_avalon_control_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          pixel_buffer_avalon_control_slave_agent_rp_endofpacket;                                                            // Pixel_Buffer_avalon_control_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                                              // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [109:0] router_005_src_data;                                                                                               // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                                                                              // rsp_demux_002:sink_ready -> router_005:src_ready
	wire    [8:0] router_005_src_channel;                                                                                            // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                                                                      // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                                        // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          rgb_resampler_avalon_rgb_slave_agent_rp_valid;                                                                     // RGB_Resampler_avalon_rgb_slave_agent:rp_valid -> router_006:sink_valid
	wire  [109:0] rgb_resampler_avalon_rgb_slave_agent_rp_data;                                                                      // RGB_Resampler_avalon_rgb_slave_agent:rp_data -> router_006:sink_data
	wire          rgb_resampler_avalon_rgb_slave_agent_rp_ready;                                                                     // router_006:sink_ready -> RGB_Resampler_avalon_rgb_slave_agent:rp_ready
	wire          rgb_resampler_avalon_rgb_slave_agent_rp_startofpacket;                                                             // RGB_Resampler_avalon_rgb_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          rgb_resampler_avalon_rgb_slave_agent_rp_endofpacket;                                                               // RGB_Resampler_avalon_rgb_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                                              // router_006:src_valid -> rsp_demux_003:sink_valid
	wire  [109:0] router_006_src_data;                                                                                               // router_006:src_data -> rsp_demux_003:sink_data
	wire          router_006_src_ready;                                                                                              // rsp_demux_003:sink_ready -> router_006:src_ready
	wire    [8:0] router_006_src_channel;                                                                                            // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_startofpacket;                                                                                      // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                                        // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          cpu_debug_mem_slave_agent_rp_valid;                                                                                // CPU_debug_mem_slave_agent:rp_valid -> router_007:sink_valid
	wire  [109:0] cpu_debug_mem_slave_agent_rp_data;                                                                                 // CPU_debug_mem_slave_agent:rp_data -> router_007:sink_data
	wire          cpu_debug_mem_slave_agent_rp_ready;                                                                                // router_007:sink_ready -> CPU_debug_mem_slave_agent:rp_ready
	wire          cpu_debug_mem_slave_agent_rp_startofpacket;                                                                        // CPU_debug_mem_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          cpu_debug_mem_slave_agent_rp_endofpacket;                                                                          // CPU_debug_mem_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                                              // router_007:src_valid -> rsp_demux_004:sink_valid
	wire  [109:0] router_007_src_data;                                                                                               // router_007:src_data -> rsp_demux_004:sink_data
	wire          router_007_src_ready;                                                                                              // rsp_demux_004:sink_ready -> router_007:src_ready
	wire    [8:0] router_007_src_channel;                                                                                            // router_007:src_channel -> rsp_demux_004:sink_channel
	wire          router_007_src_startofpacket;                                                                                      // router_007:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                                        // router_007:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                                                           // SDRAM_s1_agent:rp_valid -> router_008:sink_valid
	wire   [91:0] sdram_s1_agent_rp_data;                                                                                            // SDRAM_s1_agent:rp_data -> router_008:sink_data
	wire          sdram_s1_agent_rp_ready;                                                                                           // router_008:sink_ready -> SDRAM_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                                                                   // SDRAM_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                                                     // SDRAM_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                                              // router_008:src_valid -> rsp_demux_005:sink_valid
	wire   [91:0] router_008_src_data;                                                                                               // router_008:src_data -> rsp_demux_005:sink_data
	wire          router_008_src_ready;                                                                                              // rsp_demux_005:sink_ready -> router_008:src_ready
	wire    [8:0] router_008_src_channel;                                                                                            // router_008:src_channel -> rsp_demux_005:sink_channel
	wire          router_008_src_startofpacket;                                                                                      // router_008:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                                        // router_008:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          audio_avalon_audio_slave_agent_rp_valid;                                                                           // Audio_avalon_audio_slave_agent:rp_valid -> router_009:sink_valid
	wire  [109:0] audio_avalon_audio_slave_agent_rp_data;                                                                            // Audio_avalon_audio_slave_agent:rp_data -> router_009:sink_data
	wire          audio_avalon_audio_slave_agent_rp_ready;                                                                           // router_009:sink_ready -> Audio_avalon_audio_slave_agent:rp_ready
	wire          audio_avalon_audio_slave_agent_rp_startofpacket;                                                                   // Audio_avalon_audio_slave_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          audio_avalon_audio_slave_agent_rp_endofpacket;                                                                     // Audio_avalon_audio_slave_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                                              // router_009:src_valid -> rsp_demux_006:sink_valid
	wire  [109:0] router_009_src_data;                                                                                               // router_009:src_data -> rsp_demux_006:sink_data
	wire          router_009_src_ready;                                                                                              // rsp_demux_006:sink_ready -> router_009:src_ready
	wire    [8:0] router_009_src_channel;                                                                                            // router_009:src_channel -> rsp_demux_006:sink_channel
	wire          router_009_src_startofpacket;                                                                                      // router_009:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                                        // router_009:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          jtag_avalon_jtag_slave_agent_rp_valid;                                                                             // JTAG_avalon_jtag_slave_agent:rp_valid -> router_010:sink_valid
	wire  [109:0] jtag_avalon_jtag_slave_agent_rp_data;                                                                              // JTAG_avalon_jtag_slave_agent:rp_data -> router_010:sink_data
	wire          jtag_avalon_jtag_slave_agent_rp_ready;                                                                             // router_010:sink_ready -> JTAG_avalon_jtag_slave_agent:rp_ready
	wire          jtag_avalon_jtag_slave_agent_rp_startofpacket;                                                                     // JTAG_avalon_jtag_slave_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          jtag_avalon_jtag_slave_agent_rp_endofpacket;                                                                       // JTAG_avalon_jtag_slave_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                                              // router_010:src_valid -> rsp_demux_007:sink_valid
	wire  [109:0] router_010_src_data;                                                                                               // router_010:src_data -> rsp_demux_007:sink_data
	wire          router_010_src_ready;                                                                                              // rsp_demux_007:sink_ready -> router_010:src_ready
	wire    [8:0] router_010_src_channel;                                                                                            // router_010:src_channel -> rsp_demux_007:sink_channel
	wire          router_010_src_startofpacket;                                                                                      // router_010:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                                        // router_010:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          timer_0_s1_agent_rp_valid;                                                                                         // timer_0_s1_agent:rp_valid -> router_011:sink_valid
	wire  [109:0] timer_0_s1_agent_rp_data;                                                                                          // timer_0_s1_agent:rp_data -> router_011:sink_data
	wire          timer_0_s1_agent_rp_ready;                                                                                         // router_011:sink_ready -> timer_0_s1_agent:rp_ready
	wire          timer_0_s1_agent_rp_startofpacket;                                                                                 // timer_0_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          timer_0_s1_agent_rp_endofpacket;                                                                                   // timer_0_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                                              // router_011:src_valid -> rsp_demux_008:sink_valid
	wire  [109:0] router_011_src_data;                                                                                               // router_011:src_data -> rsp_demux_008:sink_data
	wire          router_011_src_ready;                                                                                              // rsp_demux_008:sink_ready -> router_011:src_ready
	wire    [8:0] router_011_src_channel;                                                                                            // router_011:src_channel -> rsp_demux_008:sink_channel
	wire          router_011_src_startofpacket;                                                                                      // router_011:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                                        // router_011:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_src_valid;                                                                                                  // router:src_valid -> Pixel_Buffer_avalon_pixel_dma_master_limiter:cmd_sink_valid
	wire   [82:0] router_src_data;                                                                                                   // router:src_data -> Pixel_Buffer_avalon_pixel_dma_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                                                                  // Pixel_Buffer_avalon_pixel_dma_master_limiter:cmd_sink_ready -> router:src_ready
	wire    [8:0] router_src_channel;                                                                                                // router:src_channel -> Pixel_Buffer_avalon_pixel_dma_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                                                          // router:src_startofpacket -> Pixel_Buffer_avalon_pixel_dma_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                                            // router:src_endofpacket -> Pixel_Buffer_avalon_pixel_dma_master_limiter:cmd_sink_endofpacket
	wire   [82:0] pixel_buffer_avalon_pixel_dma_master_limiter_cmd_src_data;                                                         // Pixel_Buffer_avalon_pixel_dma_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          pixel_buffer_avalon_pixel_dma_master_limiter_cmd_src_ready;                                                        // cmd_demux:sink_ready -> Pixel_Buffer_avalon_pixel_dma_master_limiter:cmd_src_ready
	wire    [8:0] pixel_buffer_avalon_pixel_dma_master_limiter_cmd_src_channel;                                                      // Pixel_Buffer_avalon_pixel_dma_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          pixel_buffer_avalon_pixel_dma_master_limiter_cmd_src_startofpacket;                                                // Pixel_Buffer_avalon_pixel_dma_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          pixel_buffer_avalon_pixel_dma_master_limiter_cmd_src_endofpacket;                                                  // Pixel_Buffer_avalon_pixel_dma_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                                                 // rsp_mux:src_valid -> Pixel_Buffer_avalon_pixel_dma_master_limiter:rsp_sink_valid
	wire   [82:0] rsp_mux_src_data;                                                                                                  // rsp_mux:src_data -> Pixel_Buffer_avalon_pixel_dma_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                                                 // Pixel_Buffer_avalon_pixel_dma_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [8:0] rsp_mux_src_channel;                                                                                               // rsp_mux:src_channel -> Pixel_Buffer_avalon_pixel_dma_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                                                         // rsp_mux:src_startofpacket -> Pixel_Buffer_avalon_pixel_dma_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                                           // rsp_mux:src_endofpacket -> Pixel_Buffer_avalon_pixel_dma_master_limiter:rsp_sink_endofpacket
	wire          pixel_buffer_avalon_pixel_dma_master_limiter_rsp_src_valid;                                                        // Pixel_Buffer_avalon_pixel_dma_master_limiter:rsp_src_valid -> Pixel_Buffer_avalon_pixel_dma_master_agent:rp_valid
	wire   [82:0] pixel_buffer_avalon_pixel_dma_master_limiter_rsp_src_data;                                                         // Pixel_Buffer_avalon_pixel_dma_master_limiter:rsp_src_data -> Pixel_Buffer_avalon_pixel_dma_master_agent:rp_data
	wire          pixel_buffer_avalon_pixel_dma_master_limiter_rsp_src_ready;                                                        // Pixel_Buffer_avalon_pixel_dma_master_agent:rp_ready -> Pixel_Buffer_avalon_pixel_dma_master_limiter:rsp_src_ready
	wire    [8:0] pixel_buffer_avalon_pixel_dma_master_limiter_rsp_src_channel;                                                      // Pixel_Buffer_avalon_pixel_dma_master_limiter:rsp_src_channel -> Pixel_Buffer_avalon_pixel_dma_master_agent:rp_channel
	wire          pixel_buffer_avalon_pixel_dma_master_limiter_rsp_src_startofpacket;                                                // Pixel_Buffer_avalon_pixel_dma_master_limiter:rsp_src_startofpacket -> Pixel_Buffer_avalon_pixel_dma_master_agent:rp_startofpacket
	wire          pixel_buffer_avalon_pixel_dma_master_limiter_rsp_src_endofpacket;                                                  // Pixel_Buffer_avalon_pixel_dma_master_limiter:rsp_src_endofpacket -> Pixel_Buffer_avalon_pixel_dma_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                                                              // router_001:src_valid -> CPU_data_master_limiter:cmd_sink_valid
	wire  [109:0] router_001_src_data;                                                                                               // router_001:src_data -> CPU_data_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                                              // CPU_data_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [8:0] router_001_src_channel;                                                                                            // router_001:src_channel -> CPU_data_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                                                      // router_001:src_startofpacket -> CPU_data_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                                                        // router_001:src_endofpacket -> CPU_data_master_limiter:cmd_sink_endofpacket
	wire  [109:0] cpu_data_master_limiter_cmd_src_data;                                                                              // CPU_data_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          cpu_data_master_limiter_cmd_src_ready;                                                                             // cmd_demux_001:sink_ready -> CPU_data_master_limiter:cmd_src_ready
	wire    [8:0] cpu_data_master_limiter_cmd_src_channel;                                                                           // CPU_data_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          cpu_data_master_limiter_cmd_src_startofpacket;                                                                     // CPU_data_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          cpu_data_master_limiter_cmd_src_endofpacket;                                                                       // CPU_data_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                                             // rsp_mux_001:src_valid -> CPU_data_master_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_001_src_data;                                                                                              // rsp_mux_001:src_data -> CPU_data_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                                             // CPU_data_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [8:0] rsp_mux_001_src_channel;                                                                                           // rsp_mux_001:src_channel -> CPU_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                                                     // rsp_mux_001:src_startofpacket -> CPU_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                                       // rsp_mux_001:src_endofpacket -> CPU_data_master_limiter:rsp_sink_endofpacket
	wire          cpu_data_master_limiter_rsp_src_valid;                                                                             // CPU_data_master_limiter:rsp_src_valid -> CPU_data_master_agent:rp_valid
	wire  [109:0] cpu_data_master_limiter_rsp_src_data;                                                                              // CPU_data_master_limiter:rsp_src_data -> CPU_data_master_agent:rp_data
	wire          cpu_data_master_limiter_rsp_src_ready;                                                                             // CPU_data_master_agent:rp_ready -> CPU_data_master_limiter:rsp_src_ready
	wire    [8:0] cpu_data_master_limiter_rsp_src_channel;                                                                           // CPU_data_master_limiter:rsp_src_channel -> CPU_data_master_agent:rp_channel
	wire          cpu_data_master_limiter_rsp_src_startofpacket;                                                                     // CPU_data_master_limiter:rsp_src_startofpacket -> CPU_data_master_agent:rp_startofpacket
	wire          cpu_data_master_limiter_rsp_src_endofpacket;                                                                       // CPU_data_master_limiter:rsp_src_endofpacket -> CPU_data_master_agent:rp_endofpacket
	wire          router_002_src_valid;                                                                                              // router_002:src_valid -> CPU_instruction_master_limiter:cmd_sink_valid
	wire  [109:0] router_002_src_data;                                                                                               // router_002:src_data -> CPU_instruction_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                                                              // CPU_instruction_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire    [8:0] router_002_src_channel;                                                                                            // router_002:src_channel -> CPU_instruction_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                                                      // router_002:src_startofpacket -> CPU_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                                                        // router_002:src_endofpacket -> CPU_instruction_master_limiter:cmd_sink_endofpacket
	wire  [109:0] cpu_instruction_master_limiter_cmd_src_data;                                                                       // CPU_instruction_master_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          cpu_instruction_master_limiter_cmd_src_ready;                                                                      // cmd_demux_002:sink_ready -> CPU_instruction_master_limiter:cmd_src_ready
	wire    [8:0] cpu_instruction_master_limiter_cmd_src_channel;                                                                    // CPU_instruction_master_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          cpu_instruction_master_limiter_cmd_src_startofpacket;                                                              // CPU_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          cpu_instruction_master_limiter_cmd_src_endofpacket;                                                                // CPU_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                                                             // rsp_mux_002:src_valid -> CPU_instruction_master_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_002_src_data;                                                                                              // rsp_mux_002:src_data -> CPU_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                                                             // CPU_instruction_master_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire    [8:0] rsp_mux_002_src_channel;                                                                                           // rsp_mux_002:src_channel -> CPU_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                                                     // rsp_mux_002:src_startofpacket -> CPU_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                                                       // rsp_mux_002:src_endofpacket -> CPU_instruction_master_limiter:rsp_sink_endofpacket
	wire          cpu_instruction_master_limiter_rsp_src_valid;                                                                      // CPU_instruction_master_limiter:rsp_src_valid -> CPU_instruction_master_agent:rp_valid
	wire  [109:0] cpu_instruction_master_limiter_rsp_src_data;                                                                       // CPU_instruction_master_limiter:rsp_src_data -> CPU_instruction_master_agent:rp_data
	wire          cpu_instruction_master_limiter_rsp_src_ready;                                                                      // CPU_instruction_master_agent:rp_ready -> CPU_instruction_master_limiter:rsp_src_ready
	wire    [8:0] cpu_instruction_master_limiter_rsp_src_channel;                                                                    // CPU_instruction_master_limiter:rsp_src_channel -> CPU_instruction_master_agent:rp_channel
	wire          cpu_instruction_master_limiter_rsp_src_startofpacket;                                                              // CPU_instruction_master_limiter:rsp_src_startofpacket -> CPU_instruction_master_agent:rp_startofpacket
	wire          cpu_instruction_master_limiter_rsp_src_endofpacket;                                                                // CPU_instruction_master_limiter:rsp_src_endofpacket -> CPU_instruction_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                                                                 // cmd_mux:src_valid -> Char_Buffer_avalon_char_buffer_slave_burst_adapter:sink0_valid
	wire   [82:0] cmd_mux_src_data;                                                                                                  // cmd_mux:src_data -> Char_Buffer_avalon_char_buffer_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                                                 // Char_Buffer_avalon_char_buffer_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [8:0] cmd_mux_src_channel;                                                                                               // cmd_mux:src_channel -> Char_Buffer_avalon_char_buffer_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                                                         // cmd_mux:src_startofpacket -> Char_Buffer_avalon_char_buffer_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                                           // cmd_mux:src_endofpacket -> Char_Buffer_avalon_char_buffer_slave_burst_adapter:sink0_endofpacket
	wire          char_buffer_avalon_char_buffer_slave_burst_adapter_source0_valid;                                                  // Char_Buffer_avalon_char_buffer_slave_burst_adapter:source0_valid -> Char_Buffer_avalon_char_buffer_slave_agent:cp_valid
	wire   [82:0] char_buffer_avalon_char_buffer_slave_burst_adapter_source0_data;                                                   // Char_Buffer_avalon_char_buffer_slave_burst_adapter:source0_data -> Char_Buffer_avalon_char_buffer_slave_agent:cp_data
	wire          char_buffer_avalon_char_buffer_slave_burst_adapter_source0_ready;                                                  // Char_Buffer_avalon_char_buffer_slave_agent:cp_ready -> Char_Buffer_avalon_char_buffer_slave_burst_adapter:source0_ready
	wire    [8:0] char_buffer_avalon_char_buffer_slave_burst_adapter_source0_channel;                                                // Char_Buffer_avalon_char_buffer_slave_burst_adapter:source0_channel -> Char_Buffer_avalon_char_buffer_slave_agent:cp_channel
	wire          char_buffer_avalon_char_buffer_slave_burst_adapter_source0_startofpacket;                                          // Char_Buffer_avalon_char_buffer_slave_burst_adapter:source0_startofpacket -> Char_Buffer_avalon_char_buffer_slave_agent:cp_startofpacket
	wire          char_buffer_avalon_char_buffer_slave_burst_adapter_source0_endofpacket;                                            // Char_Buffer_avalon_char_buffer_slave_burst_adapter:source0_endofpacket -> Char_Buffer_avalon_char_buffer_slave_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                                                             // cmd_mux_005:src_valid -> SDRAM_s1_burst_adapter:sink0_valid
	wire   [91:0] cmd_mux_005_src_data;                                                                                              // cmd_mux_005:src_data -> SDRAM_s1_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                                                             // SDRAM_s1_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire    [8:0] cmd_mux_005_src_channel;                                                                                           // cmd_mux_005:src_channel -> SDRAM_s1_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                                                                     // cmd_mux_005:src_startofpacket -> SDRAM_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                                       // cmd_mux_005:src_endofpacket -> SDRAM_s1_burst_adapter:sink0_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                                                              // SDRAM_s1_burst_adapter:source0_valid -> SDRAM_s1_agent:cp_valid
	wire   [91:0] sdram_s1_burst_adapter_source0_data;                                                                               // SDRAM_s1_burst_adapter:source0_data -> SDRAM_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                                                              // SDRAM_s1_agent:cp_ready -> SDRAM_s1_burst_adapter:source0_ready
	wire    [8:0] sdram_s1_burst_adapter_source0_channel;                                                                            // SDRAM_s1_burst_adapter:source0_channel -> SDRAM_s1_agent:cp_channel
	wire          sdram_s1_burst_adapter_source0_startofpacket;                                                                      // SDRAM_s1_burst_adapter:source0_startofpacket -> SDRAM_s1_agent:cp_startofpacket
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                                                        // SDRAM_s1_burst_adapter:source0_endofpacket -> SDRAM_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                                              // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire   [82:0] cmd_demux_src0_data;                                                                                               // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                                              // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [8:0] cmd_demux_src0_channel;                                                                                            // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                                                      // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                                        // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                                          // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [109:0] cmd_demux_001_src1_data;                                                                                           // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                                                                          // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [8:0] cmd_demux_001_src1_channel;                                                                                        // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                                                  // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                                                    // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                                                          // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [109:0] cmd_demux_001_src2_data;                                                                                           // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                                                                          // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [8:0] cmd_demux_001_src2_channel;                                                                                        // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                                                  // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                                                    // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                                                          // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [109:0] cmd_demux_001_src3_data;                                                                                           // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                                                                          // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire    [8:0] cmd_demux_001_src3_channel;                                                                                        // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                                                                  // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                                                    // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                                                          // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [109:0] cmd_demux_001_src4_data;                                                                                           // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                                                                          // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire    [8:0] cmd_demux_001_src4_channel;                                                                                        // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                                                                  // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                                                    // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                                                          // cmd_demux_001:src6_valid -> cmd_mux_006:sink0_valid
	wire  [109:0] cmd_demux_001_src6_data;                                                                                           // cmd_demux_001:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_001_src6_ready;                                                                                          // cmd_mux_006:sink0_ready -> cmd_demux_001:src6_ready
	wire    [8:0] cmd_demux_001_src6_channel;                                                                                        // cmd_demux_001:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_001_src6_startofpacket;                                                                                  // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                                                    // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_001_src7_valid;                                                                                          // cmd_demux_001:src7_valid -> cmd_mux_007:sink0_valid
	wire  [109:0] cmd_demux_001_src7_data;                                                                                           // cmd_demux_001:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_001_src7_ready;                                                                                          // cmd_mux_007:sink0_ready -> cmd_demux_001:src7_ready
	wire    [8:0] cmd_demux_001_src7_channel;                                                                                        // cmd_demux_001:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_001_src7_startofpacket;                                                                                  // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                                                    // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_001_src8_valid;                                                                                          // cmd_demux_001:src8_valid -> cmd_mux_008:sink0_valid
	wire  [109:0] cmd_demux_001_src8_data;                                                                                           // cmd_demux_001:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_001_src8_ready;                                                                                          // cmd_mux_008:sink0_ready -> cmd_demux_001:src8_ready
	wire    [8:0] cmd_demux_001_src8_channel;                                                                                        // cmd_demux_001:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_001_src8_startofpacket;                                                                                  // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                                                    // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                                          // cmd_demux_002:src0_valid -> cmd_mux_004:sink2_valid
	wire  [109:0] cmd_demux_002_src0_data;                                                                                           // cmd_demux_002:src0_data -> cmd_mux_004:sink2_data
	wire          cmd_demux_002_src0_ready;                                                                                          // cmd_mux_004:sink2_ready -> cmd_demux_002:src0_ready
	wire    [8:0] cmd_demux_002_src0_channel;                                                                                        // cmd_demux_002:src0_channel -> cmd_mux_004:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                                                  // cmd_demux_002:src0_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                                                    // cmd_demux_002:src0_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_002_src2_valid;                                                                                          // cmd_demux_002:src2_valid -> cmd_mux_007:sink1_valid
	wire  [109:0] cmd_demux_002_src2_data;                                                                                           // cmd_demux_002:src2_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_002_src2_ready;                                                                                          // cmd_mux_007:sink1_ready -> cmd_demux_002:src2_ready
	wire    [8:0] cmd_demux_002_src2_channel;                                                                                        // cmd_demux_002:src2_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_002_src2_startofpacket;                                                                                  // cmd_demux_002:src2_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                                                    // cmd_demux_002:src2_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_002_src3_valid;                                                                                          // cmd_demux_002:src3_valid -> cmd_mux_008:sink1_valid
	wire  [109:0] cmd_demux_002_src3_data;                                                                                           // cmd_demux_002:src3_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_002_src3_ready;                                                                                          // cmd_mux_008:sink1_ready -> cmd_demux_002:src3_ready
	wire    [8:0] cmd_demux_002_src3_channel;                                                                                        // cmd_demux_002:src3_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_002_src3_startofpacket;                                                                                  // cmd_demux_002:src3_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                                                    // cmd_demux_002:src3_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                                              // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire   [82:0] rsp_demux_src0_data;                                                                                               // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                                              // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [8:0] rsp_demux_src0_channel;                                                                                            // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                                                      // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                                        // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src1_valid;                                                                                          // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [109:0] rsp_demux_001_src1_data;                                                                                           // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                                                                          // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [8:0] rsp_demux_001_src1_channel;                                                                                        // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                                                                  // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                                                    // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src1_valid;                                                                                          // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [109:0] rsp_demux_002_src1_data;                                                                                           // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                                                                          // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [8:0] rsp_demux_002_src1_channel;                                                                                        // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                                                                  // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                                                    // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src1_valid;                                                                                          // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [109:0] rsp_demux_003_src1_data;                                                                                           // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                                                                          // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire    [8:0] rsp_demux_003_src1_channel;                                                                                        // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                                                                  // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                                                    // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src1_valid;                                                                                          // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [109:0] rsp_demux_004_src1_data;                                                                                           // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                                                                          // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire    [8:0] rsp_demux_004_src1_channel;                                                                                        // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                                                                  // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                                                    // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_004_src2_valid;                                                                                          // rsp_demux_004:src2_valid -> rsp_mux_002:sink0_valid
	wire  [109:0] rsp_demux_004_src2_data;                                                                                           // rsp_demux_004:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_004_src2_ready;                                                                                          // rsp_mux_002:sink0_ready -> rsp_demux_004:src2_ready
	wire    [8:0] rsp_demux_004_src2_channel;                                                                                        // rsp_demux_004:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_004_src2_startofpacket;                                                                                  // rsp_demux_004:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                                                                    // rsp_demux_004:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                                          // rsp_demux_006:src0_valid -> rsp_mux_001:sink6_valid
	wire  [109:0] rsp_demux_006_src0_data;                                                                                           // rsp_demux_006:src0_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                                          // rsp_mux_001:sink6_ready -> rsp_demux_006:src0_ready
	wire    [8:0] rsp_demux_006_src0_channel;                                                                                        // rsp_demux_006:src0_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                                                  // rsp_demux_006:src0_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                                                    // rsp_demux_006:src0_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                                          // rsp_demux_007:src0_valid -> rsp_mux_001:sink7_valid
	wire  [109:0] rsp_demux_007_src0_data;                                                                                           // rsp_demux_007:src0_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                                          // rsp_mux_001:sink7_ready -> rsp_demux_007:src0_ready
	wire    [8:0] rsp_demux_007_src0_channel;                                                                                        // rsp_demux_007:src0_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                                                  // rsp_demux_007:src0_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                                                    // rsp_demux_007:src0_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                                                          // rsp_demux_007:src1_valid -> rsp_mux_002:sink2_valid
	wire  [109:0] rsp_demux_007_src1_data;                                                                                           // rsp_demux_007:src1_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_007_src1_ready;                                                                                          // rsp_mux_002:sink2_ready -> rsp_demux_007:src1_ready
	wire    [8:0] rsp_demux_007_src1_channel;                                                                                        // rsp_demux_007:src1_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_007_src1_startofpacket;                                                                                  // rsp_demux_007:src1_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                                                    // rsp_demux_007:src1_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                                          // rsp_demux_008:src0_valid -> rsp_mux_001:sink8_valid
	wire  [109:0] rsp_demux_008_src0_data;                                                                                           // rsp_demux_008:src0_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src0_ready;                                                                                          // rsp_mux_001:sink8_ready -> rsp_demux_008:src0_ready
	wire    [8:0] rsp_demux_008_src0_channel;                                                                                        // rsp_demux_008:src0_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                                                  // rsp_demux_008:src0_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                                                    // rsp_demux_008:src0_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                                                          // rsp_demux_008:src1_valid -> rsp_mux_002:sink3_valid
	wire  [109:0] rsp_demux_008_src1_data;                                                                                           // rsp_demux_008:src1_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_008_src1_ready;                                                                                          // rsp_mux_002:sink3_ready -> rsp_demux_008:src1_ready
	wire    [8:0] rsp_demux_008_src1_channel;                                                                                        // rsp_demux_008:src1_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_008_src1_startofpacket;                                                                                  // rsp_demux_008:src1_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                                                    // rsp_demux_008:src1_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          cmd_demux_src1_valid;                                                                                              // cmd_demux:src1_valid -> Pixel_Buffer_avalon_pixel_dma_master_to_Char_Buffer_avalon_char_control_slave_cmd_width_adapter:in_valid
	wire   [82:0] cmd_demux_src1_data;                                                                                               // cmd_demux:src1_data -> Pixel_Buffer_avalon_pixel_dma_master_to_Char_Buffer_avalon_char_control_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src1_ready;                                                                                              // Pixel_Buffer_avalon_pixel_dma_master_to_Char_Buffer_avalon_char_control_slave_cmd_width_adapter:in_ready -> cmd_demux:src1_ready
	wire    [8:0] cmd_demux_src1_channel;                                                                                            // cmd_demux:src1_channel -> Pixel_Buffer_avalon_pixel_dma_master_to_Char_Buffer_avalon_char_control_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src1_startofpacket;                                                                                      // cmd_demux:src1_startofpacket -> Pixel_Buffer_avalon_pixel_dma_master_to_Char_Buffer_avalon_char_control_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                                        // cmd_demux:src1_endofpacket -> Pixel_Buffer_avalon_pixel_dma_master_to_Char_Buffer_avalon_char_control_slave_cmd_width_adapter:in_endofpacket
	wire          pixel_buffer_avalon_pixel_dma_master_to_char_buffer_avalon_char_control_slave_cmd_width_adapter_src_valid;         // Pixel_Buffer_avalon_pixel_dma_master_to_Char_Buffer_avalon_char_control_slave_cmd_width_adapter:out_valid -> cmd_mux_001:sink0_valid
	wire  [109:0] pixel_buffer_avalon_pixel_dma_master_to_char_buffer_avalon_char_control_slave_cmd_width_adapter_src_data;          // Pixel_Buffer_avalon_pixel_dma_master_to_Char_Buffer_avalon_char_control_slave_cmd_width_adapter:out_data -> cmd_mux_001:sink0_data
	wire          pixel_buffer_avalon_pixel_dma_master_to_char_buffer_avalon_char_control_slave_cmd_width_adapter_src_ready;         // cmd_mux_001:sink0_ready -> Pixel_Buffer_avalon_pixel_dma_master_to_Char_Buffer_avalon_char_control_slave_cmd_width_adapter:out_ready
	wire    [8:0] pixel_buffer_avalon_pixel_dma_master_to_char_buffer_avalon_char_control_slave_cmd_width_adapter_src_channel;       // Pixel_Buffer_avalon_pixel_dma_master_to_Char_Buffer_avalon_char_control_slave_cmd_width_adapter:out_channel -> cmd_mux_001:sink0_channel
	wire          pixel_buffer_avalon_pixel_dma_master_to_char_buffer_avalon_char_control_slave_cmd_width_adapter_src_startofpacket; // Pixel_Buffer_avalon_pixel_dma_master_to_Char_Buffer_avalon_char_control_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          pixel_buffer_avalon_pixel_dma_master_to_char_buffer_avalon_char_control_slave_cmd_width_adapter_src_endofpacket;   // Pixel_Buffer_avalon_pixel_dma_master_to_Char_Buffer_avalon_char_control_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                                              // cmd_demux:src2_valid -> Pixel_Buffer_avalon_pixel_dma_master_to_Pixel_Buffer_avalon_control_slave_cmd_width_adapter:in_valid
	wire   [82:0] cmd_demux_src2_data;                                                                                               // cmd_demux:src2_data -> Pixel_Buffer_avalon_pixel_dma_master_to_Pixel_Buffer_avalon_control_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src2_ready;                                                                                              // Pixel_Buffer_avalon_pixel_dma_master_to_Pixel_Buffer_avalon_control_slave_cmd_width_adapter:in_ready -> cmd_demux:src2_ready
	wire    [8:0] cmd_demux_src2_channel;                                                                                            // cmd_demux:src2_channel -> Pixel_Buffer_avalon_pixel_dma_master_to_Pixel_Buffer_avalon_control_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src2_startofpacket;                                                                                      // cmd_demux:src2_startofpacket -> Pixel_Buffer_avalon_pixel_dma_master_to_Pixel_Buffer_avalon_control_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                                        // cmd_demux:src2_endofpacket -> Pixel_Buffer_avalon_pixel_dma_master_to_Pixel_Buffer_avalon_control_slave_cmd_width_adapter:in_endofpacket
	wire          pixel_buffer_avalon_pixel_dma_master_to_pixel_buffer_avalon_control_slave_cmd_width_adapter_src_valid;             // Pixel_Buffer_avalon_pixel_dma_master_to_Pixel_Buffer_avalon_control_slave_cmd_width_adapter:out_valid -> cmd_mux_002:sink0_valid
	wire  [109:0] pixel_buffer_avalon_pixel_dma_master_to_pixel_buffer_avalon_control_slave_cmd_width_adapter_src_data;              // Pixel_Buffer_avalon_pixel_dma_master_to_Pixel_Buffer_avalon_control_slave_cmd_width_adapter:out_data -> cmd_mux_002:sink0_data
	wire          pixel_buffer_avalon_pixel_dma_master_to_pixel_buffer_avalon_control_slave_cmd_width_adapter_src_ready;             // cmd_mux_002:sink0_ready -> Pixel_Buffer_avalon_pixel_dma_master_to_Pixel_Buffer_avalon_control_slave_cmd_width_adapter:out_ready
	wire    [8:0] pixel_buffer_avalon_pixel_dma_master_to_pixel_buffer_avalon_control_slave_cmd_width_adapter_src_channel;           // Pixel_Buffer_avalon_pixel_dma_master_to_Pixel_Buffer_avalon_control_slave_cmd_width_adapter:out_channel -> cmd_mux_002:sink0_channel
	wire          pixel_buffer_avalon_pixel_dma_master_to_pixel_buffer_avalon_control_slave_cmd_width_adapter_src_startofpacket;     // Pixel_Buffer_avalon_pixel_dma_master_to_Pixel_Buffer_avalon_control_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          pixel_buffer_avalon_pixel_dma_master_to_pixel_buffer_avalon_control_slave_cmd_width_adapter_src_endofpacket;       // Pixel_Buffer_avalon_pixel_dma_master_to_Pixel_Buffer_avalon_control_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                                              // cmd_demux:src3_valid -> Pixel_Buffer_avalon_pixel_dma_master_to_RGB_Resampler_avalon_rgb_slave_cmd_width_adapter:in_valid
	wire   [82:0] cmd_demux_src3_data;                                                                                               // cmd_demux:src3_data -> Pixel_Buffer_avalon_pixel_dma_master_to_RGB_Resampler_avalon_rgb_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src3_ready;                                                                                              // Pixel_Buffer_avalon_pixel_dma_master_to_RGB_Resampler_avalon_rgb_slave_cmd_width_adapter:in_ready -> cmd_demux:src3_ready
	wire    [8:0] cmd_demux_src3_channel;                                                                                            // cmd_demux:src3_channel -> Pixel_Buffer_avalon_pixel_dma_master_to_RGB_Resampler_avalon_rgb_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src3_startofpacket;                                                                                      // cmd_demux:src3_startofpacket -> Pixel_Buffer_avalon_pixel_dma_master_to_RGB_Resampler_avalon_rgb_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                                                        // cmd_demux:src3_endofpacket -> Pixel_Buffer_avalon_pixel_dma_master_to_RGB_Resampler_avalon_rgb_slave_cmd_width_adapter:in_endofpacket
	wire          pixel_buffer_avalon_pixel_dma_master_to_rgb_resampler_avalon_rgb_slave_cmd_width_adapter_src_valid;                // Pixel_Buffer_avalon_pixel_dma_master_to_RGB_Resampler_avalon_rgb_slave_cmd_width_adapter:out_valid -> cmd_mux_003:sink0_valid
	wire  [109:0] pixel_buffer_avalon_pixel_dma_master_to_rgb_resampler_avalon_rgb_slave_cmd_width_adapter_src_data;                 // Pixel_Buffer_avalon_pixel_dma_master_to_RGB_Resampler_avalon_rgb_slave_cmd_width_adapter:out_data -> cmd_mux_003:sink0_data
	wire          pixel_buffer_avalon_pixel_dma_master_to_rgb_resampler_avalon_rgb_slave_cmd_width_adapter_src_ready;                // cmd_mux_003:sink0_ready -> Pixel_Buffer_avalon_pixel_dma_master_to_RGB_Resampler_avalon_rgb_slave_cmd_width_adapter:out_ready
	wire    [8:0] pixel_buffer_avalon_pixel_dma_master_to_rgb_resampler_avalon_rgb_slave_cmd_width_adapter_src_channel;              // Pixel_Buffer_avalon_pixel_dma_master_to_RGB_Resampler_avalon_rgb_slave_cmd_width_adapter:out_channel -> cmd_mux_003:sink0_channel
	wire          pixel_buffer_avalon_pixel_dma_master_to_rgb_resampler_avalon_rgb_slave_cmd_width_adapter_src_startofpacket;        // Pixel_Buffer_avalon_pixel_dma_master_to_RGB_Resampler_avalon_rgb_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          pixel_buffer_avalon_pixel_dma_master_to_rgb_resampler_avalon_rgb_slave_cmd_width_adapter_src_endofpacket;          // Pixel_Buffer_avalon_pixel_dma_master_to_RGB_Resampler_avalon_rgb_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                                              // cmd_demux:src4_valid -> Pixel_Buffer_avalon_pixel_dma_master_to_CPU_debug_mem_slave_cmd_width_adapter:in_valid
	wire   [82:0] cmd_demux_src4_data;                                                                                               // cmd_demux:src4_data -> Pixel_Buffer_avalon_pixel_dma_master_to_CPU_debug_mem_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src4_ready;                                                                                              // Pixel_Buffer_avalon_pixel_dma_master_to_CPU_debug_mem_slave_cmd_width_adapter:in_ready -> cmd_demux:src4_ready
	wire    [8:0] cmd_demux_src4_channel;                                                                                            // cmd_demux:src4_channel -> Pixel_Buffer_avalon_pixel_dma_master_to_CPU_debug_mem_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src4_startofpacket;                                                                                      // cmd_demux:src4_startofpacket -> Pixel_Buffer_avalon_pixel_dma_master_to_CPU_debug_mem_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                                                        // cmd_demux:src4_endofpacket -> Pixel_Buffer_avalon_pixel_dma_master_to_CPU_debug_mem_slave_cmd_width_adapter:in_endofpacket
	wire          pixel_buffer_avalon_pixel_dma_master_to_cpu_debug_mem_slave_cmd_width_adapter_src_valid;                           // Pixel_Buffer_avalon_pixel_dma_master_to_CPU_debug_mem_slave_cmd_width_adapter:out_valid -> cmd_mux_004:sink0_valid
	wire  [109:0] pixel_buffer_avalon_pixel_dma_master_to_cpu_debug_mem_slave_cmd_width_adapter_src_data;                            // Pixel_Buffer_avalon_pixel_dma_master_to_CPU_debug_mem_slave_cmd_width_adapter:out_data -> cmd_mux_004:sink0_data
	wire          pixel_buffer_avalon_pixel_dma_master_to_cpu_debug_mem_slave_cmd_width_adapter_src_ready;                           // cmd_mux_004:sink0_ready -> Pixel_Buffer_avalon_pixel_dma_master_to_CPU_debug_mem_slave_cmd_width_adapter:out_ready
	wire    [8:0] pixel_buffer_avalon_pixel_dma_master_to_cpu_debug_mem_slave_cmd_width_adapter_src_channel;                         // Pixel_Buffer_avalon_pixel_dma_master_to_CPU_debug_mem_slave_cmd_width_adapter:out_channel -> cmd_mux_004:sink0_channel
	wire          pixel_buffer_avalon_pixel_dma_master_to_cpu_debug_mem_slave_cmd_width_adapter_src_startofpacket;                   // Pixel_Buffer_avalon_pixel_dma_master_to_CPU_debug_mem_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          pixel_buffer_avalon_pixel_dma_master_to_cpu_debug_mem_slave_cmd_width_adapter_src_endofpacket;                     // Pixel_Buffer_avalon_pixel_dma_master_to_CPU_debug_mem_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                                              // cmd_demux:src5_valid -> Pixel_Buffer_avalon_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire   [82:0] cmd_demux_src5_data;                                                                                               // cmd_demux:src5_data -> Pixel_Buffer_avalon_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_src5_ready;                                                                                              // Pixel_Buffer_avalon_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux:src5_ready
	wire    [8:0] cmd_demux_src5_channel;                                                                                            // cmd_demux:src5_channel -> Pixel_Buffer_avalon_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_src5_startofpacket;                                                                                      // cmd_demux:src5_startofpacket -> Pixel_Buffer_avalon_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                                                        // cmd_demux:src5_endofpacket -> Pixel_Buffer_avalon_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          pixel_buffer_avalon_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_valid;                                      // Pixel_Buffer_avalon_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_005:sink0_valid
	wire   [91:0] pixel_buffer_avalon_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_data;                                       // Pixel_Buffer_avalon_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux_005:sink0_data
	wire          pixel_buffer_avalon_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_ready;                                      // cmd_mux_005:sink0_ready -> Pixel_Buffer_avalon_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire    [8:0] pixel_buffer_avalon_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_channel;                                    // Pixel_Buffer_avalon_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_005:sink0_channel
	wire          pixel_buffer_avalon_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                              // Pixel_Buffer_avalon_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          pixel_buffer_avalon_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                                // Pixel_Buffer_avalon_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                                          // cmd_demux_001:src0_valid -> CPU_data_master_to_Char_Buffer_avalon_char_buffer_slave_cmd_width_adapter:in_valid
	wire  [109:0] cmd_demux_001_src0_data;                                                                                           // cmd_demux_001:src0_data -> CPU_data_master_to_Char_Buffer_avalon_char_buffer_slave_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                                                          // CPU_data_master_to_Char_Buffer_avalon_char_buffer_slave_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire    [8:0] cmd_demux_001_src0_channel;                                                                                        // cmd_demux_001:src0_channel -> CPU_data_master_to_Char_Buffer_avalon_char_buffer_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                                                  // cmd_demux_001:src0_startofpacket -> CPU_data_master_to_Char_Buffer_avalon_char_buffer_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                                                    // cmd_demux_001:src0_endofpacket -> CPU_data_master_to_Char_Buffer_avalon_char_buffer_slave_cmd_width_adapter:in_endofpacket
	wire          cpu_data_master_to_char_buffer_avalon_char_buffer_slave_cmd_width_adapter_src_valid;                               // CPU_data_master_to_Char_Buffer_avalon_char_buffer_slave_cmd_width_adapter:out_valid -> cmd_mux:sink1_valid
	wire   [82:0] cpu_data_master_to_char_buffer_avalon_char_buffer_slave_cmd_width_adapter_src_data;                                // CPU_data_master_to_Char_Buffer_avalon_char_buffer_slave_cmd_width_adapter:out_data -> cmd_mux:sink1_data
	wire          cpu_data_master_to_char_buffer_avalon_char_buffer_slave_cmd_width_adapter_src_ready;                               // cmd_mux:sink1_ready -> CPU_data_master_to_Char_Buffer_avalon_char_buffer_slave_cmd_width_adapter:out_ready
	wire    [8:0] cpu_data_master_to_char_buffer_avalon_char_buffer_slave_cmd_width_adapter_src_channel;                             // CPU_data_master_to_Char_Buffer_avalon_char_buffer_slave_cmd_width_adapter:out_channel -> cmd_mux:sink1_channel
	wire          cpu_data_master_to_char_buffer_avalon_char_buffer_slave_cmd_width_adapter_src_startofpacket;                       // CPU_data_master_to_Char_Buffer_avalon_char_buffer_slave_cmd_width_adapter:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cpu_data_master_to_char_buffer_avalon_char_buffer_slave_cmd_width_adapter_src_endofpacket;                         // CPU_data_master_to_Char_Buffer_avalon_char_buffer_slave_cmd_width_adapter:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                                                          // cmd_demux_001:src5_valid -> CPU_data_master_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [109:0] cmd_demux_001_src5_data;                                                                                           // cmd_demux_001:src5_data -> CPU_data_master_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_001_src5_ready;                                                                                          // CPU_data_master_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_001:src5_ready
	wire    [8:0] cmd_demux_001_src5_channel;                                                                                        // cmd_demux_001:src5_channel -> CPU_data_master_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src5_startofpacket;                                                                                  // cmd_demux_001:src5_startofpacket -> CPU_data_master_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                                                    // cmd_demux_001:src5_endofpacket -> CPU_data_master_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          cpu_data_master_to_sdram_s1_cmd_width_adapter_src_valid;                                                           // CPU_data_master_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_005:sink1_valid
	wire   [91:0] cpu_data_master_to_sdram_s1_cmd_width_adapter_src_data;                                                            // CPU_data_master_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux_005:sink1_data
	wire          cpu_data_master_to_sdram_s1_cmd_width_adapter_src_ready;                                                           // cmd_mux_005:sink1_ready -> CPU_data_master_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire    [8:0] cpu_data_master_to_sdram_s1_cmd_width_adapter_src_channel;                                                         // CPU_data_master_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_005:sink1_channel
	wire          cpu_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                                                   // CPU_data_master_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cpu_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                                                     // CPU_data_master_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                                          // cmd_demux_002:src1_valid -> CPU_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [109:0] cmd_demux_002_src1_data;                                                                                           // cmd_demux_002:src1_data -> CPU_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_002_src1_ready;                                                                                          // CPU_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src1_ready
	wire    [8:0] cmd_demux_002_src1_channel;                                                                                        // cmd_demux_002:src1_channel -> CPU_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src1_startofpacket;                                                                                  // cmd_demux_002:src1_startofpacket -> CPU_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                                                    // cmd_demux_002:src1_endofpacket -> CPU_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          cpu_instruction_master_to_sdram_s1_cmd_width_adapter_src_valid;                                                    // CPU_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_005:sink2_valid
	wire   [91:0] cpu_instruction_master_to_sdram_s1_cmd_width_adapter_src_data;                                                     // CPU_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux_005:sink2_data
	wire          cpu_instruction_master_to_sdram_s1_cmd_width_adapter_src_ready;                                                    // cmd_mux_005:sink2_ready -> CPU_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire    [8:0] cpu_instruction_master_to_sdram_s1_cmd_width_adapter_src_channel;                                                  // CPU_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_005:sink2_channel
	wire          cpu_instruction_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                                            // CPU_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire          cpu_instruction_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                                              // CPU_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          rsp_demux_src1_valid;                                                                                              // rsp_demux:src1_valid -> Char_Buffer_avalon_char_buffer_slave_to_CPU_data_master_rsp_width_adapter:in_valid
	wire   [82:0] rsp_demux_src1_data;                                                                                               // rsp_demux:src1_data -> Char_Buffer_avalon_char_buffer_slave_to_CPU_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_src1_ready;                                                                                              // Char_Buffer_avalon_char_buffer_slave_to_CPU_data_master_rsp_width_adapter:in_ready -> rsp_demux:src1_ready
	wire    [8:0] rsp_demux_src1_channel;                                                                                            // rsp_demux:src1_channel -> Char_Buffer_avalon_char_buffer_slave_to_CPU_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src1_startofpacket;                                                                                      // rsp_demux:src1_startofpacket -> Char_Buffer_avalon_char_buffer_slave_to_CPU_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                                        // rsp_demux:src1_endofpacket -> Char_Buffer_avalon_char_buffer_slave_to_CPU_data_master_rsp_width_adapter:in_endofpacket
	wire          char_buffer_avalon_char_buffer_slave_to_cpu_data_master_rsp_width_adapter_src_valid;                               // Char_Buffer_avalon_char_buffer_slave_to_CPU_data_master_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	wire  [109:0] char_buffer_avalon_char_buffer_slave_to_cpu_data_master_rsp_width_adapter_src_data;                                // Char_Buffer_avalon_char_buffer_slave_to_CPU_data_master_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	wire          char_buffer_avalon_char_buffer_slave_to_cpu_data_master_rsp_width_adapter_src_ready;                               // rsp_mux_001:sink0_ready -> Char_Buffer_avalon_char_buffer_slave_to_CPU_data_master_rsp_width_adapter:out_ready
	wire    [8:0] char_buffer_avalon_char_buffer_slave_to_cpu_data_master_rsp_width_adapter_src_channel;                             // Char_Buffer_avalon_char_buffer_slave_to_CPU_data_master_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	wire          char_buffer_avalon_char_buffer_slave_to_cpu_data_master_rsp_width_adapter_src_startofpacket;                       // Char_Buffer_avalon_char_buffer_slave_to_CPU_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          char_buffer_avalon_char_buffer_slave_to_cpu_data_master_rsp_width_adapter_src_endofpacket;                         // Char_Buffer_avalon_char_buffer_slave_to_CPU_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                                          // rsp_demux_001:src0_valid -> Char_Buffer_avalon_char_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_valid
	wire  [109:0] rsp_demux_001_src0_data;                                                                                           // rsp_demux_001:src0_data -> Char_Buffer_avalon_char_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_data
	wire          rsp_demux_001_src0_ready;                                                                                          // Char_Buffer_avalon_char_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_ready -> rsp_demux_001:src0_ready
	wire    [8:0] rsp_demux_001_src0_channel;                                                                                        // rsp_demux_001:src0_channel -> Char_Buffer_avalon_char_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                                                  // rsp_demux_001:src0_startofpacket -> Char_Buffer_avalon_char_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                                                    // rsp_demux_001:src0_endofpacket -> Char_Buffer_avalon_char_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_endofpacket
	wire          char_buffer_avalon_char_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_valid;         // Char_Buffer_avalon_char_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_valid -> rsp_mux:sink1_valid
	wire   [82:0] char_buffer_avalon_char_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_data;          // Char_Buffer_avalon_char_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_data -> rsp_mux:sink1_data
	wire          char_buffer_avalon_char_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_ready;         // rsp_mux:sink1_ready -> Char_Buffer_avalon_char_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_ready
	wire    [8:0] char_buffer_avalon_char_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_channel;       // Char_Buffer_avalon_char_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_channel -> rsp_mux:sink1_channel
	wire          char_buffer_avalon_char_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_startofpacket; // Char_Buffer_avalon_char_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          char_buffer_avalon_char_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_endofpacket;   // Char_Buffer_avalon_char_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                                          // rsp_demux_002:src0_valid -> Pixel_Buffer_avalon_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_valid
	wire  [109:0] rsp_demux_002_src0_data;                                                                                           // rsp_demux_002:src0_data -> Pixel_Buffer_avalon_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_data
	wire          rsp_demux_002_src0_ready;                                                                                          // Pixel_Buffer_avalon_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_ready -> rsp_demux_002:src0_ready
	wire    [8:0] rsp_demux_002_src0_channel;                                                                                        // rsp_demux_002:src0_channel -> Pixel_Buffer_avalon_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                                                                  // rsp_demux_002:src0_startofpacket -> Pixel_Buffer_avalon_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                                                    // rsp_demux_002:src0_endofpacket -> Pixel_Buffer_avalon_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_endofpacket
	wire          pixel_buffer_avalon_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_valid;             // Pixel_Buffer_avalon_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_valid -> rsp_mux:sink2_valid
	wire   [82:0] pixel_buffer_avalon_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_data;              // Pixel_Buffer_avalon_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_data -> rsp_mux:sink2_data
	wire          pixel_buffer_avalon_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_ready;             // rsp_mux:sink2_ready -> Pixel_Buffer_avalon_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_ready
	wire    [8:0] pixel_buffer_avalon_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_channel;           // Pixel_Buffer_avalon_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_channel -> rsp_mux:sink2_channel
	wire          pixel_buffer_avalon_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_startofpacket;     // Pixel_Buffer_avalon_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          pixel_buffer_avalon_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_endofpacket;       // Pixel_Buffer_avalon_control_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                                          // rsp_demux_003:src0_valid -> RGB_Resampler_avalon_rgb_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_valid
	wire  [109:0] rsp_demux_003_src0_data;                                                                                           // rsp_demux_003:src0_data -> RGB_Resampler_avalon_rgb_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_data
	wire          rsp_demux_003_src0_ready;                                                                                          // RGB_Resampler_avalon_rgb_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_ready -> rsp_demux_003:src0_ready
	wire    [8:0] rsp_demux_003_src0_channel;                                                                                        // rsp_demux_003:src0_channel -> RGB_Resampler_avalon_rgb_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                                                                  // rsp_demux_003:src0_startofpacket -> RGB_Resampler_avalon_rgb_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                                                    // rsp_demux_003:src0_endofpacket -> RGB_Resampler_avalon_rgb_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_endofpacket
	wire          rgb_resampler_avalon_rgb_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_valid;                // RGB_Resampler_avalon_rgb_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_valid -> rsp_mux:sink3_valid
	wire   [82:0] rgb_resampler_avalon_rgb_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_data;                 // RGB_Resampler_avalon_rgb_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_data -> rsp_mux:sink3_data
	wire          rgb_resampler_avalon_rgb_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_ready;                // rsp_mux:sink3_ready -> RGB_Resampler_avalon_rgb_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_ready
	wire    [8:0] rgb_resampler_avalon_rgb_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_channel;              // RGB_Resampler_avalon_rgb_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_channel -> rsp_mux:sink3_channel
	wire          rgb_resampler_avalon_rgb_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_startofpacket;        // RGB_Resampler_avalon_rgb_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rgb_resampler_avalon_rgb_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_endofpacket;          // RGB_Resampler_avalon_rgb_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                                          // rsp_demux_004:src0_valid -> CPU_debug_mem_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_valid
	wire  [109:0] rsp_demux_004_src0_data;                                                                                           // rsp_demux_004:src0_data -> CPU_debug_mem_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_data
	wire          rsp_demux_004_src0_ready;                                                                                          // CPU_debug_mem_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_ready -> rsp_demux_004:src0_ready
	wire    [8:0] rsp_demux_004_src0_channel;                                                                                        // rsp_demux_004:src0_channel -> CPU_debug_mem_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                                                                  // rsp_demux_004:src0_startofpacket -> CPU_debug_mem_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                                                    // rsp_demux_004:src0_endofpacket -> CPU_debug_mem_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_endofpacket
	wire          cpu_debug_mem_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_valid;                           // CPU_debug_mem_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_valid -> rsp_mux:sink4_valid
	wire   [82:0] cpu_debug_mem_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_data;                            // CPU_debug_mem_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_data -> rsp_mux:sink4_data
	wire          cpu_debug_mem_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_ready;                           // rsp_mux:sink4_ready -> CPU_debug_mem_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_ready
	wire    [8:0] cpu_debug_mem_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_channel;                         // CPU_debug_mem_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_channel -> rsp_mux:sink4_channel
	wire          cpu_debug_mem_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_startofpacket;                   // CPU_debug_mem_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          cpu_debug_mem_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_endofpacket;                     // CPU_debug_mem_slave_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                                          // rsp_demux_005:src0_valid -> SDRAM_s1_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_valid
	wire   [91:0] rsp_demux_005_src0_data;                                                                                           // rsp_demux_005:src0_data -> SDRAM_s1_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_data
	wire          rsp_demux_005_src0_ready;                                                                                          // SDRAM_s1_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_ready -> rsp_demux_005:src0_ready
	wire    [8:0] rsp_demux_005_src0_channel;                                                                                        // rsp_demux_005:src0_channel -> SDRAM_s1_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                                                                  // rsp_demux_005:src0_startofpacket -> SDRAM_s1_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                                                    // rsp_demux_005:src0_endofpacket -> SDRAM_s1_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_valid;                                      // SDRAM_s1_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_valid -> rsp_mux:sink5_valid
	wire   [82:0] sdram_s1_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_data;                                       // SDRAM_s1_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_data -> rsp_mux:sink5_data
	wire          sdram_s1_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_ready;                                      // rsp_mux:sink5_ready -> SDRAM_s1_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_ready
	wire    [8:0] sdram_s1_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_channel;                                    // SDRAM_s1_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_channel -> rsp_mux:sink5_channel
	wire          sdram_s1_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_startofpacket;                              // SDRAM_s1_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          sdram_s1_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_endofpacket;                                // SDRAM_s1_to_Pixel_Buffer_avalon_pixel_dma_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                                                          // rsp_demux_005:src1_valid -> SDRAM_s1_to_CPU_data_master_rsp_width_adapter:in_valid
	wire   [91:0] rsp_demux_005_src1_data;                                                                                           // rsp_demux_005:src1_data -> SDRAM_s1_to_CPU_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_005_src1_ready;                                                                                          // SDRAM_s1_to_CPU_data_master_rsp_width_adapter:in_ready -> rsp_demux_005:src1_ready
	wire    [8:0] rsp_demux_005_src1_channel;                                                                                        // rsp_demux_005:src1_channel -> SDRAM_s1_to_CPU_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_005_src1_startofpacket;                                                                                  // rsp_demux_005:src1_startofpacket -> SDRAM_s1_to_CPU_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                                                    // rsp_demux_005:src1_endofpacket -> SDRAM_s1_to_CPU_data_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_cpu_data_master_rsp_width_adapter_src_valid;                                                           // SDRAM_s1_to_CPU_data_master_rsp_width_adapter:out_valid -> rsp_mux_001:sink5_valid
	wire  [109:0] sdram_s1_to_cpu_data_master_rsp_width_adapter_src_data;                                                            // SDRAM_s1_to_CPU_data_master_rsp_width_adapter:out_data -> rsp_mux_001:sink5_data
	wire          sdram_s1_to_cpu_data_master_rsp_width_adapter_src_ready;                                                           // rsp_mux_001:sink5_ready -> SDRAM_s1_to_CPU_data_master_rsp_width_adapter:out_ready
	wire    [8:0] sdram_s1_to_cpu_data_master_rsp_width_adapter_src_channel;                                                         // SDRAM_s1_to_CPU_data_master_rsp_width_adapter:out_channel -> rsp_mux_001:sink5_channel
	wire          sdram_s1_to_cpu_data_master_rsp_width_adapter_src_startofpacket;                                                   // SDRAM_s1_to_CPU_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          sdram_s1_to_cpu_data_master_rsp_width_adapter_src_endofpacket;                                                     // SDRAM_s1_to_CPU_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_005_src2_valid;                                                                                          // rsp_demux_005:src2_valid -> SDRAM_s1_to_CPU_instruction_master_rsp_width_adapter:in_valid
	wire   [91:0] rsp_demux_005_src2_data;                                                                                           // rsp_demux_005:src2_data -> SDRAM_s1_to_CPU_instruction_master_rsp_width_adapter:in_data
	wire          rsp_demux_005_src2_ready;                                                                                          // SDRAM_s1_to_CPU_instruction_master_rsp_width_adapter:in_ready -> rsp_demux_005:src2_ready
	wire    [8:0] rsp_demux_005_src2_channel;                                                                                        // rsp_demux_005:src2_channel -> SDRAM_s1_to_CPU_instruction_master_rsp_width_adapter:in_channel
	wire          rsp_demux_005_src2_startofpacket;                                                                                  // rsp_demux_005:src2_startofpacket -> SDRAM_s1_to_CPU_instruction_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_005_src2_endofpacket;                                                                                    // rsp_demux_005:src2_endofpacket -> SDRAM_s1_to_CPU_instruction_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_cpu_instruction_master_rsp_width_adapter_src_valid;                                                    // SDRAM_s1_to_CPU_instruction_master_rsp_width_adapter:out_valid -> rsp_mux_002:sink1_valid
	wire  [109:0] sdram_s1_to_cpu_instruction_master_rsp_width_adapter_src_data;                                                     // SDRAM_s1_to_CPU_instruction_master_rsp_width_adapter:out_data -> rsp_mux_002:sink1_data
	wire          sdram_s1_to_cpu_instruction_master_rsp_width_adapter_src_ready;                                                    // rsp_mux_002:sink1_ready -> SDRAM_s1_to_CPU_instruction_master_rsp_width_adapter:out_ready
	wire    [8:0] sdram_s1_to_cpu_instruction_master_rsp_width_adapter_src_channel;                                                  // SDRAM_s1_to_CPU_instruction_master_rsp_width_adapter:out_channel -> rsp_mux_002:sink1_channel
	wire          sdram_s1_to_cpu_instruction_master_rsp_width_adapter_src_startofpacket;                                            // SDRAM_s1_to_CPU_instruction_master_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          sdram_s1_to_cpu_instruction_master_rsp_width_adapter_src_endofpacket;                                              // SDRAM_s1_to_CPU_instruction_master_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire    [8:0] pixel_buffer_avalon_pixel_dma_master_limiter_cmd_valid_data;                                                       // Pixel_Buffer_avalon_pixel_dma_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [8:0] cpu_data_master_limiter_cmd_valid_data;                                                                            // CPU_data_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire    [8:0] cpu_instruction_master_limiter_cmd_valid_data;                                                                     // CPU_instruction_master_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire          char_buffer_avalon_char_buffer_slave_agent_rdata_fifo_src_valid;                                                   // Char_Buffer_avalon_char_buffer_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire    [9:0] char_buffer_avalon_char_buffer_slave_agent_rdata_fifo_src_data;                                                    // Char_Buffer_avalon_char_buffer_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          char_buffer_avalon_char_buffer_slave_agent_rdata_fifo_src_ready;                                                   // avalon_st_adapter:in_0_ready -> Char_Buffer_avalon_char_buffer_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                                                     // avalon_st_adapter:out_0_valid -> Char_Buffer_avalon_char_buffer_slave_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_out_0_data;                                                                                      // avalon_st_adapter:out_0_data -> Char_Buffer_avalon_char_buffer_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                                                     // Char_Buffer_avalon_char_buffer_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                                                     // avalon_st_adapter:out_0_error -> Char_Buffer_avalon_char_buffer_slave_agent:rdata_fifo_sink_error
	wire          char_buffer_avalon_char_control_slave_agent_rdata_fifo_src_valid;                                                  // Char_Buffer_avalon_char_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] char_buffer_avalon_char_control_slave_agent_rdata_fifo_src_data;                                                   // Char_Buffer_avalon_char_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          char_buffer_avalon_char_control_slave_agent_rdata_fifo_src_ready;                                                  // avalon_st_adapter_001:in_0_ready -> Char_Buffer_avalon_char_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                                                 // avalon_st_adapter_001:out_0_valid -> Char_Buffer_avalon_char_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                                                  // avalon_st_adapter_001:out_0_data -> Char_Buffer_avalon_char_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                                                 // Char_Buffer_avalon_char_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                                                 // avalon_st_adapter_001:out_0_error -> Char_Buffer_avalon_char_control_slave_agent:rdata_fifo_sink_error
	wire          pixel_buffer_avalon_control_slave_agent_rdata_fifo_src_valid;                                                      // Pixel_Buffer_avalon_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] pixel_buffer_avalon_control_slave_agent_rdata_fifo_src_data;                                                       // Pixel_Buffer_avalon_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          pixel_buffer_avalon_control_slave_agent_rdata_fifo_src_ready;                                                      // avalon_st_adapter_002:in_0_ready -> Pixel_Buffer_avalon_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                                                 // avalon_st_adapter_002:out_0_valid -> Pixel_Buffer_avalon_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                                                  // avalon_st_adapter_002:out_0_data -> Pixel_Buffer_avalon_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                                                 // Pixel_Buffer_avalon_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                                                 // avalon_st_adapter_002:out_0_error -> Pixel_Buffer_avalon_control_slave_agent:rdata_fifo_sink_error
	wire          rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_src_valid;                                                         // RGB_Resampler_avalon_rgb_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_src_data;                                                          // RGB_Resampler_avalon_rgb_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_src_ready;                                                         // avalon_st_adapter_003:in_0_ready -> RGB_Resampler_avalon_rgb_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                                                 // avalon_st_adapter_003:out_0_valid -> RGB_Resampler_avalon_rgb_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                                                  // avalon_st_adapter_003:out_0_data -> RGB_Resampler_avalon_rgb_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                                                 // RGB_Resampler_avalon_rgb_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                                                 // avalon_st_adapter_003:out_0_error -> RGB_Resampler_avalon_rgb_slave_agent:rdata_fifo_sink_error
	wire          cpu_debug_mem_slave_agent_rdata_fifo_src_valid;                                                                    // CPU_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] cpu_debug_mem_slave_agent_rdata_fifo_src_data;                                                                     // CPU_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          cpu_debug_mem_slave_agent_rdata_fifo_src_ready;                                                                    // avalon_st_adapter_004:in_0_ready -> CPU_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                                                 // avalon_st_adapter_004:out_0_valid -> CPU_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                                                  // avalon_st_adapter_004:out_0_data -> CPU_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                                                 // CPU_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                                                 // avalon_st_adapter_004:out_0_error -> CPU_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                                                               // SDRAM_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                                                                // SDRAM_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                                                               // avalon_st_adapter_005:in_0_ready -> SDRAM_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                                                 // avalon_st_adapter_005:out_0_valid -> SDRAM_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_005_out_0_data;                                                                                  // avalon_st_adapter_005:out_0_data -> SDRAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                                                 // SDRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                                                 // avalon_st_adapter_005:out_0_error -> SDRAM_s1_agent:rdata_fifo_sink_error
	wire          audio_avalon_audio_slave_agent_rdata_fifo_src_valid;                                                               // Audio_avalon_audio_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] audio_avalon_audio_slave_agent_rdata_fifo_src_data;                                                                // Audio_avalon_audio_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          audio_avalon_audio_slave_agent_rdata_fifo_src_ready;                                                               // avalon_st_adapter_006:in_0_ready -> Audio_avalon_audio_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                                                 // avalon_st_adapter_006:out_0_valid -> Audio_avalon_audio_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                                                  // avalon_st_adapter_006:out_0_data -> Audio_avalon_audio_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                                                 // Audio_avalon_audio_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                                                 // avalon_st_adapter_006:out_0_error -> Audio_avalon_audio_slave_agent:rdata_fifo_sink_error
	wire          jtag_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                                                 // JTAG_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] jtag_avalon_jtag_slave_agent_rdata_fifo_src_data;                                                                  // JTAG_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          jtag_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                                                 // avalon_st_adapter_007:in_0_ready -> JTAG_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                                                 // avalon_st_adapter_007:out_0_valid -> JTAG_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                                                  // avalon_st_adapter_007:out_0_data -> JTAG_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                                                 // JTAG_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                                                 // avalon_st_adapter_007:out_0_error -> JTAG_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          timer_0_s1_agent_rdata_fifo_src_valid;                                                                             // timer_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_src_data;                                                                              // timer_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          timer_0_s1_agent_rdata_fifo_src_ready;                                                                             // avalon_st_adapter_008:in_0_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                                                 // avalon_st_adapter_008:out_0_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                                                  // avalon_st_adapter_008:out_0_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                                                 // timer_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                                                 // avalon_st_adapter_008:out_0_error -> timer_0_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (8),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (1),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (1),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (1),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pixel_buffer_avalon_pixel_dma_master_translator (
		.clk                    (Sys_Clk_sys_clk_clk),                                                                     //                       clk.clk
		.reset                  (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                          //                     reset.reset
		.uav_address            (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Pixel_Buffer_avalon_pixel_dma_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Pixel_Buffer_avalon_pixel_dma_master_waitrequest),                                        //                          .waitrequest
		.av_read                (Pixel_Buffer_avalon_pixel_dma_master_read),                                               //                          .read
		.av_readdata            (Pixel_Buffer_avalon_pixel_dma_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (Pixel_Buffer_avalon_pixel_dma_master_readdatavalid),                                      //                          .readdatavalid
		.av_lock                (Pixel_Buffer_avalon_pixel_dma_master_lock),                                               //                          .lock
		.av_burstcount          (1'b1),                                                                                    //               (terminated)
		.av_byteenable          (1'b1),                                                                                    //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                                    //               (terminated)
		.av_write               (1'b0),                                                                                    //               (terminated)
		.av_writedata           (8'b00000000),                                                                             //               (terminated)
		.av_debugaccess         (1'b0),                                                                                    //               (terminated)
		.uav_clken              (),                                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                                   //               (terminated)
		.av_response            (),                                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                                         //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_data_master_translator (
		.clk                    (Sys_Clk_sys_clk_clk),                                                //                       clk.clk
		.reset                  (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPU_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPU_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (CPU_data_master_byteenable),                                         //                          .byteenable
		.av_read                (CPU_data_master_read),                                               //                          .read
		.av_readdata            (CPU_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPU_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (CPU_data_master_write),                                              //                          .write
		.av_writedata           (CPU_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (CPU_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_instruction_master_translator (
		.clk                    (Sys_Clk_sys_clk_clk),                                                       //                       clk.clk
		.reset                  (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (CPU_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (CPU_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (CPU_instruction_master_read),                                               //                          .read
		.av_readdata            (CPU_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (CPU_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) char_buffer_avalon_char_buffer_slave_translator (
		.clk                    (Sys_Clk_sys_clk_clk),                                         //                      clk.clk
		.reset                  (Pixel_Buffer_reset_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address            (char_buffer_avalon_char_buffer_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (char_buffer_avalon_char_buffer_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (char_buffer_avalon_char_buffer_slave_agent_m0_read),          //                         .read
		.uav_write              (char_buffer_avalon_char_buffer_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (char_buffer_avalon_char_buffer_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (char_buffer_avalon_char_buffer_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (char_buffer_avalon_char_buffer_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (char_buffer_avalon_char_buffer_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (char_buffer_avalon_char_buffer_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (char_buffer_avalon_char_buffer_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (char_buffer_avalon_char_buffer_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Char_Buffer_avalon_char_buffer_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Char_Buffer_avalon_char_buffer_slave_write),                  //                         .write
		.av_read                (Char_Buffer_avalon_char_buffer_slave_read),                   //                         .read
		.av_readdata            (Char_Buffer_avalon_char_buffer_slave_readdata),               //                         .readdata
		.av_writedata           (Char_Buffer_avalon_char_buffer_slave_writedata),              //                         .writedata
		.av_byteenable          (Char_Buffer_avalon_char_buffer_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (Char_Buffer_avalon_char_buffer_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (Char_Buffer_avalon_char_buffer_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) char_buffer_avalon_char_control_slave_translator (
		.clk                    (Sys_Clk_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Pixel_Buffer_reset_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (char_buffer_avalon_char_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (char_buffer_avalon_char_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (char_buffer_avalon_char_control_slave_agent_m0_read),          //                         .read
		.uav_write              (char_buffer_avalon_char_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (char_buffer_avalon_char_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (char_buffer_avalon_char_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (char_buffer_avalon_char_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (char_buffer_avalon_char_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (char_buffer_avalon_char_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (char_buffer_avalon_char_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (char_buffer_avalon_char_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Char_Buffer_avalon_char_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Char_Buffer_avalon_char_control_slave_write),                  //                         .write
		.av_read                (Char_Buffer_avalon_char_control_slave_read),                   //                         .read
		.av_readdata            (Char_Buffer_avalon_char_control_slave_readdata),               //                         .readdata
		.av_writedata           (Char_Buffer_avalon_char_control_slave_writedata),              //                         .writedata
		.av_byteenable          (Char_Buffer_avalon_char_control_slave_byteenable),             //                         .byteenable
		.av_chipselect          (Char_Buffer_avalon_char_control_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pixel_buffer_avalon_control_slave_translator (
		.clk                    (Sys_Clk_sys_clk_clk),                                      //                      clk.clk
		.reset                  (Pixel_Buffer_reset_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (pixel_buffer_avalon_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pixel_buffer_avalon_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pixel_buffer_avalon_control_slave_agent_m0_read),          //                         .read
		.uav_write              (pixel_buffer_avalon_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (pixel_buffer_avalon_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pixel_buffer_avalon_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pixel_buffer_avalon_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pixel_buffer_avalon_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pixel_buffer_avalon_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pixel_buffer_avalon_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pixel_buffer_avalon_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Pixel_Buffer_avalon_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Pixel_Buffer_avalon_control_slave_write),                  //                         .write
		.av_read                (Pixel_Buffer_avalon_control_slave_read),                   //                         .read
		.av_readdata            (Pixel_Buffer_avalon_control_slave_readdata),               //                         .readdata
		.av_writedata           (Pixel_Buffer_avalon_control_slave_writedata),              //                         .writedata
		.av_byteenable          (Pixel_Buffer_avalon_control_slave_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                                         //              (terminated)
		.av_beginbursttransfer  (),                                                         //              (terminated)
		.av_burstcount          (),                                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                                     //              (terminated)
		.av_waitrequest         (1'b0),                                                     //              (terminated)
		.av_writebyteenable     (),                                                         //              (terminated)
		.av_lock                (),                                                         //              (terminated)
		.av_chipselect          (),                                                         //              (terminated)
		.av_clken               (),                                                         //              (terminated)
		.uav_clken              (1'b0),                                                     //              (terminated)
		.av_debugaccess         (),                                                         //              (terminated)
		.av_outputenable        (),                                                         //              (terminated)
		.uav_response           (),                                                         //              (terminated)
		.av_response            (2'b00),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rgb_resampler_avalon_rgb_slave_translator (
		.clk                    (Sys_Clk_sys_clk_clk),                                   //                      clk.clk
		.reset                  (Pixel_Buffer_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (rgb_resampler_avalon_rgb_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (rgb_resampler_avalon_rgb_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (rgb_resampler_avalon_rgb_slave_agent_m0_read),          //                         .read
		.uav_write              (rgb_resampler_avalon_rgb_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (rgb_resampler_avalon_rgb_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (rgb_resampler_avalon_rgb_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (rgb_resampler_avalon_rgb_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (rgb_resampler_avalon_rgb_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (rgb_resampler_avalon_rgb_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (rgb_resampler_avalon_rgb_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (rgb_resampler_avalon_rgb_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_read                (RGB_Resampler_avalon_rgb_slave_read),                   //      avalon_anti_slave_0.read
		.av_readdata            (RGB_Resampler_avalon_rgb_slave_readdata),               //                         .readdata
		.av_address             (),                                                      //              (terminated)
		.av_write               (),                                                      //              (terminated)
		.av_writedata           (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_debug_mem_slave_translator (
		.clk                    (Sys_Clk_sys_clk_clk),                            //                      clk.clk
		.reset                  (Pixel_Buffer_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (cpu_debug_mem_slave_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_debug_mem_slave_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (cpu_debug_mem_slave_agent_m0_read),              //                         .read
		.uav_write              (cpu_debug_mem_slave_agent_m0_write),             //                         .write
		.uav_waitrequest        (cpu_debug_mem_slave_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (cpu_debug_mem_slave_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (cpu_debug_mem_slave_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (cpu_debug_mem_slave_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (cpu_debug_mem_slave_agent_m0_writedata),         //                         .writedata
		.uav_lock               (cpu_debug_mem_slave_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (cpu_debug_mem_slave_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (CPU_debug_mem_slave_address),                    //      avalon_anti_slave_0.address
		.av_write               (CPU_debug_mem_slave_write),                      //                         .write
		.av_read                (CPU_debug_mem_slave_read),                       //                         .read
		.av_readdata            (CPU_debug_mem_slave_readdata),                   //                         .readdata
		.av_writedata           (CPU_debug_mem_slave_writedata),                  //                         .writedata
		.av_byteenable          (CPU_debug_mem_slave_byteenable),                 //                         .byteenable
		.av_waitrequest         (CPU_debug_mem_slave_waitrequest),                //                         .waitrequest
		.av_debugaccess         (CPU_debug_mem_slave_debugaccess),                //                         .debugaccess
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (Sys_Clk_sys_clk_clk),                            //                      clk.clk
		.reset                  (Pixel_Buffer_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                         //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (SDRAM_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (SDRAM_s1_write),                                 //                         .write
		.av_read                (SDRAM_s1_read),                                  //                         .read
		.av_readdata            (SDRAM_s1_readdata),                              //                         .readdata
		.av_writedata           (SDRAM_s1_writedata),                             //                         .writedata
		.av_byteenable          (SDRAM_s1_byteenable),                            //                         .byteenable
		.av_readdatavalid       (SDRAM_s1_readdatavalid),                         //                         .readdatavalid
		.av_waitrequest         (SDRAM_s1_waitrequest),                           //                         .waitrequest
		.av_chipselect          (SDRAM_s1_chipselect),                            //                         .chipselect
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_avalon_audio_slave_translator (
		.clk                    (Sys_Clk_sys_clk_clk),                             //                      clk.clk
		.reset                  (Pixel_Buffer_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (audio_avalon_audio_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (audio_avalon_audio_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (audio_avalon_audio_slave_agent_m0_read),          //                         .read
		.uav_write              (audio_avalon_audio_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (audio_avalon_audio_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (audio_avalon_audio_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (audio_avalon_audio_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (audio_avalon_audio_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (audio_avalon_audio_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (audio_avalon_audio_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (audio_avalon_audio_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Audio_avalon_audio_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Audio_avalon_audio_slave_write),                  //                         .write
		.av_read                (Audio_avalon_audio_slave_read),                   //                         .read
		.av_readdata            (Audio_avalon_audio_slave_readdata),               //                         .readdata
		.av_writedata           (Audio_avalon_audio_slave_writedata),              //                         .writedata
		.av_chipselect          (Audio_avalon_audio_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_avalon_jtag_slave_translator (
		.clk                    (Sys_Clk_sys_clk_clk),                           //                      clk.clk
		.reset                  (JTAG_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (jtag_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAG_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAG_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAG_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAG_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAG_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAG_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAG_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                    (Sys_Clk_sys_clk_clk),                    //                      clk.clk
		.reset                  (JTAG_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_0_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (timer_0_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (timer_0_s1_agent_m0_read),               //                         .read
		.uav_write              (timer_0_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (timer_0_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (timer_0_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (timer_0_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (timer_0_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (timer_0_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (timer_0_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (timer_0_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (timer_0_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (timer_0_s1_write),                       //                         .write
		.av_readdata            (timer_0_s1_readdata),                    //                         .readdata
		.av_writedata           (timer_0_s1_writedata),                   //                         .writedata
		.av_chipselect          (timer_0_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                       //              (terminated)
		.av_begintransfer       (),                                       //              (terminated)
		.av_beginbursttransfer  (),                                       //              (terminated)
		.av_burstcount          (),                                       //              (terminated)
		.av_byteenable          (),                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                   //              (terminated)
		.av_waitrequest         (1'b0),                                   //              (terminated)
		.av_writebyteenable     (),                                       //              (terminated)
		.av_lock                (),                                       //              (terminated)
		.av_clken               (),                                       //              (terminated)
		.uav_clken              (1'b0),                                   //              (terminated)
		.av_debugaccess         (),                                       //              (terminated)
		.av_outputenable        (),                                       //              (terminated)
		.uav_response           (),                                       //              (terminated)
		.av_response            (2'b00),                                  //              (terminated)
		.uav_writeresponsevalid (),                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                    //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_QOS_H                 (61),
		.PKT_QOS_L                 (61),
		.PKT_DATA_SIDEBAND_H       (59),
		.PKT_DATA_SIDEBAND_L       (59),
		.PKT_ADDR_SIDEBAND_H       (58),
		.PKT_ADDR_SIDEBAND_L       (58),
		.PKT_BURST_TYPE_H          (57),
		.PKT_BURST_TYPE_L          (56),
		.PKT_CACHE_H               (77),
		.PKT_CACHE_L               (74),
		.PKT_THREAD_ID_H           (70),
		.PKT_THREAD_ID_L           (70),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_EXCLUSIVE       (46),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (66),
		.ST_DATA_W                 (83),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (1),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pixel_buffer_avalon_pixel_dma_master_agent (
		.clk                   (Sys_Clk_sys_clk_clk),                                                                     //       clk.clk
		.reset                 (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.av_address            (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (pixel_buffer_avalon_pixel_dma_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (pixel_buffer_avalon_pixel_dma_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (pixel_buffer_avalon_pixel_dma_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (pixel_buffer_avalon_pixel_dma_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (pixel_buffer_avalon_pixel_dma_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (pixel_buffer_avalon_pixel_dma_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (pixel_buffer_avalon_pixel_dma_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (pixel_buffer_avalon_pixel_dma_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (pixel_buffer_avalon_pixel_dma_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (pixel_buffer_avalon_pixel_dma_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (pixel_buffer_avalon_pixel_dma_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (pixel_buffer_avalon_pixel_dma_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                                         // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_data_master_agent (
		.clk                   (Sys_Clk_sys_clk_clk),                                                //       clk.clk
		.reset                 (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_instruction_master_agent (
		.clk                   (Sys_Clk_sys_clk_clk),                                                       //       clk.clk
		.reset                 (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (66),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) char_buffer_avalon_char_buffer_slave_agent (
		.clk                     (Sys_Clk_sys_clk_clk),                                                      //             clk.clk
		.reset                   (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (char_buffer_avalon_char_buffer_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (char_buffer_avalon_char_buffer_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (char_buffer_avalon_char_buffer_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (char_buffer_avalon_char_buffer_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (char_buffer_avalon_char_buffer_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (char_buffer_avalon_char_buffer_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (char_buffer_avalon_char_buffer_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (char_buffer_avalon_char_buffer_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (char_buffer_avalon_char_buffer_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (char_buffer_avalon_char_buffer_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (char_buffer_avalon_char_buffer_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (char_buffer_avalon_char_buffer_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (char_buffer_avalon_char_buffer_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (char_buffer_avalon_char_buffer_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (char_buffer_avalon_char_buffer_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (char_buffer_avalon_char_buffer_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (char_buffer_avalon_char_buffer_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (char_buffer_avalon_char_buffer_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (char_buffer_avalon_char_buffer_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (char_buffer_avalon_char_buffer_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (char_buffer_avalon_char_buffer_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (char_buffer_avalon_char_buffer_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (char_buffer_avalon_char_buffer_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (char_buffer_avalon_char_buffer_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (char_buffer_avalon_char_buffer_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (char_buffer_avalon_char_buffer_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (char_buffer_avalon_char_buffer_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (char_buffer_avalon_char_buffer_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (char_buffer_avalon_char_buffer_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (char_buffer_avalon_char_buffer_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (char_buffer_avalon_char_buffer_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (char_buffer_avalon_char_buffer_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                            //                .error
		.rdata_fifo_src_ready    (char_buffer_avalon_char_buffer_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (char_buffer_avalon_char_buffer_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (char_buffer_avalon_char_buffer_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) char_buffer_avalon_char_buffer_slave_agent_rsp_fifo (
		.clk               (Sys_Clk_sys_clk_clk),                                                   //       clk.clk
		.reset             (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (char_buffer_avalon_char_buffer_slave_agent_rf_source_data),             //        in.data
		.in_valid          (char_buffer_avalon_char_buffer_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (char_buffer_avalon_char_buffer_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (char_buffer_avalon_char_buffer_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (char_buffer_avalon_char_buffer_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (char_buffer_avalon_char_buffer_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (char_buffer_avalon_char_buffer_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (char_buffer_avalon_char_buffer_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (char_buffer_avalon_char_buffer_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (char_buffer_avalon_char_buffer_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) char_buffer_avalon_char_control_slave_agent (
		.clk                     (Sys_Clk_sys_clk_clk),                                                    //             clk.clk
		.reset                   (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (char_buffer_avalon_char_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (char_buffer_avalon_char_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (char_buffer_avalon_char_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (char_buffer_avalon_char_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (char_buffer_avalon_char_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (char_buffer_avalon_char_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (char_buffer_avalon_char_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (char_buffer_avalon_char_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (char_buffer_avalon_char_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (char_buffer_avalon_char_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (char_buffer_avalon_char_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (char_buffer_avalon_char_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (char_buffer_avalon_char_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (char_buffer_avalon_char_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (char_buffer_avalon_char_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (char_buffer_avalon_char_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                                  //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                                  //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                                   //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                            //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                                //                .channel
		.rf_sink_ready           (char_buffer_avalon_char_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (char_buffer_avalon_char_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (char_buffer_avalon_char_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (char_buffer_avalon_char_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (char_buffer_avalon_char_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (char_buffer_avalon_char_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (char_buffer_avalon_char_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (char_buffer_avalon_char_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (char_buffer_avalon_char_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (char_buffer_avalon_char_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (char_buffer_avalon_char_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (char_buffer_avalon_char_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (char_buffer_avalon_char_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) char_buffer_avalon_char_control_slave_agent_rsp_fifo (
		.clk               (Sys_Clk_sys_clk_clk),                                                    //       clk.clk
		.reset             (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (char_buffer_avalon_char_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (char_buffer_avalon_char_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (char_buffer_avalon_char_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (char_buffer_avalon_char_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (char_buffer_avalon_char_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (char_buffer_avalon_char_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (char_buffer_avalon_char_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (char_buffer_avalon_char_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (char_buffer_avalon_char_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (char_buffer_avalon_char_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pixel_buffer_avalon_control_slave_agent (
		.clk                     (Sys_Clk_sys_clk_clk),                                                //             clk.clk
		.reset                   (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (pixel_buffer_avalon_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pixel_buffer_avalon_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pixel_buffer_avalon_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pixel_buffer_avalon_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pixel_buffer_avalon_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (pixel_buffer_avalon_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pixel_buffer_avalon_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pixel_buffer_avalon_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (pixel_buffer_avalon_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pixel_buffer_avalon_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (pixel_buffer_avalon_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (pixel_buffer_avalon_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pixel_buffer_avalon_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (pixel_buffer_avalon_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (pixel_buffer_avalon_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (pixel_buffer_avalon_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                            //                .channel
		.rf_sink_ready           (pixel_buffer_avalon_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pixel_buffer_avalon_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pixel_buffer_avalon_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pixel_buffer_avalon_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pixel_buffer_avalon_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pixel_buffer_avalon_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pixel_buffer_avalon_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pixel_buffer_avalon_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pixel_buffer_avalon_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pixel_buffer_avalon_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (pixel_buffer_avalon_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pixel_buffer_avalon_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pixel_buffer_avalon_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_buffer_avalon_control_slave_agent_rsp_fifo (
		.clk               (Sys_Clk_sys_clk_clk),                                                //       clk.clk
		.reset             (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (pixel_buffer_avalon_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pixel_buffer_avalon_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pixel_buffer_avalon_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pixel_buffer_avalon_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pixel_buffer_avalon_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pixel_buffer_avalon_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pixel_buffer_avalon_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pixel_buffer_avalon_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pixel_buffer_avalon_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pixel_buffer_avalon_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rgb_resampler_avalon_rgb_slave_agent (
		.clk                     (Sys_Clk_sys_clk_clk),                                             //             clk.clk
		.reset                   (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (rgb_resampler_avalon_rgb_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (rgb_resampler_avalon_rgb_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (rgb_resampler_avalon_rgb_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (rgb_resampler_avalon_rgb_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (rgb_resampler_avalon_rgb_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (rgb_resampler_avalon_rgb_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (rgb_resampler_avalon_rgb_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (rgb_resampler_avalon_rgb_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (rgb_resampler_avalon_rgb_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (rgb_resampler_avalon_rgb_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (rgb_resampler_avalon_rgb_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (rgb_resampler_avalon_rgb_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (rgb_resampler_avalon_rgb_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (rgb_resampler_avalon_rgb_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (rgb_resampler_avalon_rgb_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (rgb_resampler_avalon_rgb_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                         //                .channel
		.rf_sink_ready           (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (rgb_resampler_avalon_rgb_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (rgb_resampler_avalon_rgb_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (rgb_resampler_avalon_rgb_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (rgb_resampler_avalon_rgb_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (rgb_resampler_avalon_rgb_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rgb_resampler_avalon_rgb_slave_agent_rsp_fifo (
		.clk               (Sys_Clk_sys_clk_clk),                                             //       clk.clk
		.reset             (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (rgb_resampler_avalon_rgb_slave_agent_rf_source_data),             //        in.data
		.in_valid          (rgb_resampler_avalon_rgb_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (rgb_resampler_avalon_rgb_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (rgb_resampler_avalon_rgb_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (rgb_resampler_avalon_rgb_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (rgb_resampler_avalon_rgb_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpu_debug_mem_slave_agent (
		.clk                     (Sys_Clk_sys_clk_clk),                                  //             clk.clk
		.reset                   (Pixel_Buffer_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (cpu_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                              //                .channel
		.rf_sink_ready           (cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (cpu_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_debug_mem_slave_agent_rsp_fifo (
		.clk               (Sys_Clk_sys_clk_clk),                                  //       clk.clk
		.reset             (Pixel_Buffer_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (cpu_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (Sys_Clk_sys_clk_clk),                            //             clk.clk
		.reset                   (Pixel_Buffer_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),              //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (Sys_Clk_sys_clk_clk),                            //       clk.clk
		.reset             (Pixel_Buffer_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (Sys_Clk_sys_clk_clk),                            //       clk.clk
		.reset             (Pixel_Buffer_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) audio_avalon_audio_slave_agent (
		.clk                     (Sys_Clk_sys_clk_clk),                                       //             clk.clk
		.reset                   (Pixel_Buffer_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (audio_avalon_audio_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (audio_avalon_audio_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (audio_avalon_audio_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (audio_avalon_audio_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (audio_avalon_audio_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (audio_avalon_audio_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (audio_avalon_audio_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (audio_avalon_audio_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (audio_avalon_audio_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (audio_avalon_audio_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (audio_avalon_audio_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (audio_avalon_audio_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (audio_avalon_audio_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (audio_avalon_audio_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (audio_avalon_audio_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (audio_avalon_audio_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                   //                .channel
		.rf_sink_ready           (audio_avalon_audio_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (audio_avalon_audio_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (audio_avalon_audio_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (audio_avalon_audio_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (audio_avalon_audio_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (audio_avalon_audio_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (audio_avalon_audio_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (audio_avalon_audio_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (audio_avalon_audio_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (audio_avalon_audio_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (audio_avalon_audio_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_avalon_audio_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (audio_avalon_audio_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_avalon_audio_slave_agent_rsp_fifo (
		.clk               (Sys_Clk_sys_clk_clk),                                       //       clk.clk
		.reset             (Pixel_Buffer_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (audio_avalon_audio_slave_agent_rf_source_data),             //        in.data
		.in_valid          (audio_avalon_audio_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_avalon_audio_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_avalon_audio_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_avalon_audio_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_avalon_audio_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_avalon_audio_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_avalon_audio_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_avalon_audio_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_avalon_audio_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_avalon_jtag_slave_agent (
		.clk                     (Sys_Clk_sys_clk_clk),                                     //             clk.clk
		.reset                   (JTAG_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                 //                .channel
		.rf_sink_ready           (jtag_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (jtag_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (Sys_Clk_sys_clk_clk),                                     //       clk.clk
		.reset             (JTAG_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_0_s1_agent (
		.clk                     (Sys_Clk_sys_clk_clk),                         //             clk.clk
		.reset                   (JTAG_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_008_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                     //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),           //                .error
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (Sys_Clk_sys_clk_clk),                         //       clk.clk
		.reset             (JTAG_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	test_mm_interconnect_0_router router (
		.sink_ready         (pixel_buffer_avalon_pixel_dma_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (pixel_buffer_avalon_pixel_dma_master_agent_cp_valid),         //          .valid
		.sink_data          (pixel_buffer_avalon_pixel_dma_master_agent_cp_data),          //          .data
		.sink_startofpacket (pixel_buffer_avalon_pixel_dma_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pixel_buffer_avalon_pixel_dma_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (Sys_Clk_sys_clk_clk),                                         //       clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_src_ready),                                            //       src.ready
		.src_valid          (router_src_valid),                                            //          .valid
		.src_data           (router_src_data),                                             //          .data
		.src_channel        (router_src_channel),                                          //          .channel
		.src_startofpacket  (router_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                       //          .endofpacket
	);

	test_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cpu_data_master_agent_cp_ready),                 //      sink.ready
		.sink_valid         (cpu_data_master_agent_cp_valid),                 //          .valid
		.sink_data          (cpu_data_master_agent_cp_data),                  //          .data
		.sink_startofpacket (cpu_data_master_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (cpu_data_master_agent_cp_endofpacket),           //          .endofpacket
		.clk                (Sys_Clk_sys_clk_clk),                            //       clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                           //       src.ready
		.src_valid          (router_001_src_valid),                           //          .valid
		.src_data           (router_001_src_data),                            //          .data
		.src_channel        (router_001_src_channel),                         //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                      //          .endofpacket
	);

	test_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (cpu_instruction_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (cpu_instruction_master_agent_cp_valid),          //          .valid
		.sink_data          (cpu_instruction_master_agent_cp_data),           //          .data
		.sink_startofpacket (cpu_instruction_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (cpu_instruction_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (Sys_Clk_sys_clk_clk),                            //       clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                           //       src.ready
		.src_valid          (router_002_src_valid),                           //          .valid
		.src_data           (router_002_src_data),                            //          .data
		.src_channel        (router_002_src_channel),                         //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                      //          .endofpacket
	);

	test_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (char_buffer_avalon_char_buffer_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (char_buffer_avalon_char_buffer_slave_agent_rp_valid),         //          .valid
		.sink_data          (char_buffer_avalon_char_buffer_slave_agent_rp_data),          //          .data
		.sink_startofpacket (char_buffer_avalon_char_buffer_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (char_buffer_avalon_char_buffer_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (Sys_Clk_sys_clk_clk),                                         //       clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_003_src_ready),                                        //       src.ready
		.src_valid          (router_003_src_valid),                                        //          .valid
		.src_data           (router_003_src_data),                                         //          .data
		.src_channel        (router_003_src_channel),                                      //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                   //          .endofpacket
	);

	test_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (char_buffer_avalon_char_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (char_buffer_avalon_char_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (char_buffer_avalon_char_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (char_buffer_avalon_char_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (char_buffer_avalon_char_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (Sys_Clk_sys_clk_clk),                                          //       clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_004_src_ready),                                         //       src.ready
		.src_valid          (router_004_src_valid),                                         //          .valid
		.src_data           (router_004_src_data),                                          //          .data
		.src_channel        (router_004_src_channel),                                       //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                    //          .endofpacket
	);

	test_mm_interconnect_0_router_004 router_005 (
		.sink_ready         (pixel_buffer_avalon_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (pixel_buffer_avalon_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (pixel_buffer_avalon_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (pixel_buffer_avalon_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pixel_buffer_avalon_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (Sys_Clk_sys_clk_clk),                                      //       clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_005_src_ready),                                     //       src.ready
		.src_valid          (router_005_src_valid),                                     //          .valid
		.src_data           (router_005_src_data),                                      //          .data
		.src_channel        (router_005_src_channel),                                   //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                //          .endofpacket
	);

	test_mm_interconnect_0_router_004 router_006 (
		.sink_ready         (rgb_resampler_avalon_rgb_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (rgb_resampler_avalon_rgb_slave_agent_rp_valid),         //          .valid
		.sink_data          (rgb_resampler_avalon_rgb_slave_agent_rp_data),          //          .data
		.sink_startofpacket (rgb_resampler_avalon_rgb_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (rgb_resampler_avalon_rgb_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (Sys_Clk_sys_clk_clk),                                   //       clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_006_src_ready),                                  //       src.ready
		.src_valid          (router_006_src_valid),                                  //          .valid
		.src_data           (router_006_src_data),                                   //          .data
		.src_channel        (router_006_src_channel),                                //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                             //          .endofpacket
	);

	test_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (cpu_debug_mem_slave_agent_rp_ready),             //      sink.ready
		.sink_valid         (cpu_debug_mem_slave_agent_rp_valid),             //          .valid
		.sink_data          (cpu_debug_mem_slave_agent_rp_data),              //          .data
		.sink_startofpacket (cpu_debug_mem_slave_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (cpu_debug_mem_slave_agent_rp_endofpacket),       //          .endofpacket
		.clk                (Sys_Clk_sys_clk_clk),                            //       clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                           //       src.ready
		.src_valid          (router_007_src_valid),                           //          .valid
		.src_data           (router_007_src_data),                            //          .data
		.src_channel        (router_007_src_channel),                         //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                      //          .endofpacket
	);

	test_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (sdram_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                        //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (Sys_Clk_sys_clk_clk),                            //       clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                           //       src.ready
		.src_valid          (router_008_src_valid),                           //          .valid
		.src_data           (router_008_src_data),                            //          .data
		.src_channel        (router_008_src_channel),                         //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                      //          .endofpacket
	);

	test_mm_interconnect_0_router_009 router_009 (
		.sink_ready         (audio_avalon_audio_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (audio_avalon_audio_slave_agent_rp_valid),         //          .valid
		.sink_data          (audio_avalon_audio_slave_agent_rp_data),          //          .data
		.sink_startofpacket (audio_avalon_audio_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (audio_avalon_audio_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (Sys_Clk_sys_clk_clk),                             //       clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_009_src_ready),                            //       src.ready
		.src_valid          (router_009_src_valid),                            //          .valid
		.src_data           (router_009_src_data),                             //          .data
		.src_channel        (router_009_src_channel),                          //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                       //          .endofpacket
	);

	test_mm_interconnect_0_router_010 router_010 (
		.sink_ready         (jtag_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (Sys_Clk_sys_clk_clk),                           //       clk.clk
		.reset              (JTAG_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_010_src_ready),                          //       src.ready
		.src_valid          (router_010_src_valid),                          //          .valid
		.src_data           (router_010_src_data),                           //          .data
		.src_channel        (router_010_src_channel),                        //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                     //          .endofpacket
	);

	test_mm_interconnect_0_router_010 router_011 (
		.sink_ready         (timer_0_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (timer_0_s1_agent_rp_valid),              //          .valid
		.sink_data          (timer_0_s1_agent_rp_data),               //          .data
		.sink_startofpacket (timer_0_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (timer_0_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (Sys_Clk_sys_clk_clk),                    //       clk.clk
		.reset              (JTAG_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                   //       src.ready
		.src_valid          (router_011_src_valid),                   //          .valid
		.src_data           (router_011_src_data),                    //          .data
		.src_channel        (router_011_src_channel),                 //          .channel
		.src_startofpacket  (router_011_src_startofpacket),           //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)              //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (66),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (62),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (83),
		.ST_CHANNEL_W              (9),
		.VALID_WIDTH               (9),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) pixel_buffer_avalon_pixel_dma_master_limiter (
		.clk                    (Sys_Clk_sys_clk_clk),                                                //       clk.clk
		.reset                  (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                   //          .valid
		.cmd_sink_data          (router_src_data),                                                    //          .data
		.cmd_sink_channel       (router_src_channel),                                                 //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                           //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                             //          .endofpacket
		.cmd_src_ready          (pixel_buffer_avalon_pixel_dma_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (pixel_buffer_avalon_pixel_dma_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (pixel_buffer_avalon_pixel_dma_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (pixel_buffer_avalon_pixel_dma_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (pixel_buffer_avalon_pixel_dma_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                  //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                   //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                            //          .endofpacket
		.rsp_src_ready          (pixel_buffer_avalon_pixel_dma_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (pixel_buffer_avalon_pixel_dma_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (pixel_buffer_avalon_pixel_dma_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (pixel_buffer_avalon_pixel_dma_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (pixel_buffer_avalon_pixel_dma_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (pixel_buffer_avalon_pixel_dma_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (pixel_buffer_avalon_pixel_dma_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (9),
		.VALID_WIDTH               (9),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_data_master_limiter (
		.clk                    (Sys_Clk_sys_clk_clk),                            //       clk.clk
		.reset                  (Pixel_Buffer_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                           //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                           //          .valid
		.cmd_sink_data          (router_001_src_data),                            //          .data
		.cmd_sink_channel       (router_001_src_channel),                         //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                   //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                     //          .endofpacket
		.cmd_src_ready          (cpu_data_master_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (cpu_data_master_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (cpu_data_master_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (cpu_data_master_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (cpu_data_master_limiter_cmd_src_endofpacket),    //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                          //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                          //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                        //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                           //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                  //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                    //          .endofpacket
		.rsp_src_ready          (cpu_data_master_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (cpu_data_master_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (cpu_data_master_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (cpu_data_master_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (cpu_data_master_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (cpu_data_master_limiter_rsp_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (cpu_data_master_limiter_cmd_valid_data)          // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (9),
		.VALID_WIDTH               (9),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_instruction_master_limiter (
		.clk                    (Sys_Clk_sys_clk_clk),                                  //       clk.clk
		.reset                  (Pixel_Buffer_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                 //          .valid
		.cmd_sink_data          (router_002_src_data),                                  //          .data
		.cmd_sink_channel       (router_002_src_channel),                               //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                         //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                           //          .endofpacket
		.cmd_src_ready          (cpu_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                              //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                          //          .endofpacket
		.rsp_src_ready          (cpu_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (60),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_BURST_TYPE_H          (57),
		.PKT_BURST_TYPE_L          (56),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (83),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (52),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) char_buffer_avalon_char_buffer_slave_burst_adapter (
		.clk                   (Sys_Clk_sys_clk_clk),                                                      //       cr0.clk
		.reset                 (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                           // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                        //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                         //          .data
		.sink0_channel         (cmd_mux_src_channel),                                                      //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                        //          .ready
		.source0_valid         (char_buffer_avalon_char_buffer_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (char_buffer_avalon_char_buffer_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (char_buffer_avalon_char_buffer_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (char_buffer_avalon_char_buffer_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (char_buffer_avalon_char_buffer_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (char_buffer_avalon_char_buffer_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (69),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (61),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (Sys_Clk_sys_clk_clk),                            //       cr0.clk
		.reset                 (Pixel_Buffer_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                          //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                           //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                        //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                    //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                          //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),            //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)            //          .ready
	);

	test_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (Sys_Clk_sys_clk_clk),                                                //        clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                     //  clk_reset.reset
		.sink_ready         (pixel_buffer_avalon_pixel_dma_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (pixel_buffer_avalon_pixel_dma_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (pixel_buffer_avalon_pixel_dma_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (pixel_buffer_avalon_pixel_dma_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (pixel_buffer_avalon_pixel_dma_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (pixel_buffer_avalon_pixel_dma_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                               //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                               //           .valid
		.src0_data          (cmd_demux_src0_data),                                                //           .data
		.src0_channel       (cmd_demux_src0_channel),                                             //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                       //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                         //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                               //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                               //           .valid
		.src1_data          (cmd_demux_src1_data),                                                //           .data
		.src1_channel       (cmd_demux_src1_channel),                                             //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                       //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                         //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                               //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                               //           .valid
		.src2_data          (cmd_demux_src2_data),                                                //           .data
		.src2_channel       (cmd_demux_src2_channel),                                             //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                       //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                         //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                               //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                               //           .valid
		.src3_data          (cmd_demux_src3_data),                                                //           .data
		.src3_channel       (cmd_demux_src3_channel),                                             //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                       //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                         //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                               //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                               //           .valid
		.src4_data          (cmd_demux_src4_data),                                                //           .data
		.src4_channel       (cmd_demux_src4_channel),                                             //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                                       //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                                         //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                               //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                               //           .valid
		.src5_data          (cmd_demux_src5_data),                                                //           .data
		.src5_channel       (cmd_demux_src5_channel),                                             //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                                       //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket)                                          //           .endofpacket
	);

	test_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (Sys_Clk_sys_clk_clk),                            //        clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (cpu_data_master_limiter_cmd_src_ready),          //       sink.ready
		.sink_channel       (cpu_data_master_limiter_cmd_src_channel),        //           .channel
		.sink_data          (cpu_data_master_limiter_cmd_src_data),           //           .data
		.sink_startofpacket (cpu_data_master_limiter_cmd_src_startofpacket),  //           .startofpacket
		.sink_endofpacket   (cpu_data_master_limiter_cmd_src_endofpacket),    //           .endofpacket
		.sink_valid         (cpu_data_master_limiter_cmd_valid_data),         // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                       //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                       //           .valid
		.src0_data          (cmd_demux_001_src0_data),                        //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                     //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),               //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                 //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                       //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                       //           .valid
		.src1_data          (cmd_demux_001_src1_data),                        //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                     //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),               //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                 //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                       //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                       //           .valid
		.src2_data          (cmd_demux_001_src2_data),                        //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                     //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),               //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                 //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                       //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                       //           .valid
		.src3_data          (cmd_demux_001_src3_data),                        //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                     //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),               //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                 //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                       //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                       //           .valid
		.src4_data          (cmd_demux_001_src4_data),                        //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                     //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),               //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),                 //           .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                       //       src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                       //           .valid
		.src5_data          (cmd_demux_001_src5_data),                        //           .data
		.src5_channel       (cmd_demux_001_src5_channel),                     //           .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),               //           .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket),                 //           .endofpacket
		.src6_ready         (cmd_demux_001_src6_ready),                       //       src6.ready
		.src6_valid         (cmd_demux_001_src6_valid),                       //           .valid
		.src6_data          (cmd_demux_001_src6_data),                        //           .data
		.src6_channel       (cmd_demux_001_src6_channel),                     //           .channel
		.src6_startofpacket (cmd_demux_001_src6_startofpacket),               //           .startofpacket
		.src6_endofpacket   (cmd_demux_001_src6_endofpacket),                 //           .endofpacket
		.src7_ready         (cmd_demux_001_src7_ready),                       //       src7.ready
		.src7_valid         (cmd_demux_001_src7_valid),                       //           .valid
		.src7_data          (cmd_demux_001_src7_data),                        //           .data
		.src7_channel       (cmd_demux_001_src7_channel),                     //           .channel
		.src7_startofpacket (cmd_demux_001_src7_startofpacket),               //           .startofpacket
		.src7_endofpacket   (cmd_demux_001_src7_endofpacket),                 //           .endofpacket
		.src8_ready         (cmd_demux_001_src8_ready),                       //       src8.ready
		.src8_valid         (cmd_demux_001_src8_valid),                       //           .valid
		.src8_data          (cmd_demux_001_src8_data),                        //           .data
		.src8_channel       (cmd_demux_001_src8_channel),                     //           .channel
		.src8_startofpacket (cmd_demux_001_src8_startofpacket),               //           .startofpacket
		.src8_endofpacket   (cmd_demux_001_src8_endofpacket)                  //           .endofpacket
	);

	test_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (Sys_Clk_sys_clk_clk),                                  //        clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset),       //  clk_reset.reset
		.sink_ready         (cpu_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpu_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpu_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpu_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpu_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpu_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                             //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                             //           .valid
		.src0_data          (cmd_demux_002_src0_data),                              //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                           //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                     //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                       //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                             //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                             //           .valid
		.src1_data          (cmd_demux_002_src1_data),                              //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                           //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                     //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),                       //           .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                             //       src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                             //           .valid
		.src2_data          (cmd_demux_002_src2_data),                              //           .data
		.src2_channel       (cmd_demux_002_src2_channel),                           //           .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),                     //           .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket),                       //           .endofpacket
		.src3_ready         (cmd_demux_002_src3_ready),                             //       src3.ready
		.src3_valid         (cmd_demux_002_src3_valid),                             //           .valid
		.src3_data          (cmd_demux_002_src3_data),                              //           .data
		.src3_channel       (cmd_demux_002_src3_channel),                           //           .channel
		.src3_startofpacket (cmd_demux_002_src3_startofpacket),                     //           .startofpacket
		.src3_endofpacket   (cmd_demux_002_src3_endofpacket)                        //           .endofpacket
	);

	test_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (Sys_Clk_sys_clk_clk),                                                                         //       clk.clk
		.reset               (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                                           //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                                           //          .valid
		.src_data            (cmd_mux_src_data),                                                                            //          .data
		.src_channel         (cmd_mux_src_channel),                                                                         //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                                                        //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                                                        //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                                                      //          .channel
		.sink0_data          (cmd_demux_src0_data),                                                                         //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                                                  //          .endofpacket
		.sink1_ready         (cpu_data_master_to_char_buffer_avalon_char_buffer_slave_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (cpu_data_master_to_char_buffer_avalon_char_buffer_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (cpu_data_master_to_char_buffer_avalon_char_buffer_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (cpu_data_master_to_char_buffer_avalon_char_buffer_slave_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (cpu_data_master_to_char_buffer_avalon_char_buffer_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (cpu_data_master_to_char_buffer_avalon_char_buffer_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	test_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (Sys_Clk_sys_clk_clk),                                                                                               //       clk.clk
		.reset               (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                                                    // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                                                             //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                                                             //          .valid
		.src_data            (cmd_mux_001_src_data),                                                                                              //          .data
		.src_channel         (cmd_mux_001_src_channel),                                                                                           //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                                                                     //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                                                                       //          .endofpacket
		.sink0_ready         (pixel_buffer_avalon_pixel_dma_master_to_char_buffer_avalon_char_control_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pixel_buffer_avalon_pixel_dma_master_to_char_buffer_avalon_char_control_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pixel_buffer_avalon_pixel_dma_master_to_char_buffer_avalon_char_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pixel_buffer_avalon_pixel_dma_master_to_char_buffer_avalon_char_control_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pixel_buffer_avalon_pixel_dma_master_to_char_buffer_avalon_char_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pixel_buffer_avalon_pixel_dma_master_to_char_buffer_avalon_char_control_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                                                                                          //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                                                                                          //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                                                                                        //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                                                                                           //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                                                                                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                                                                                     //          .endofpacket
	);

	test_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (Sys_Clk_sys_clk_clk),                                                                                           //       clk.clk
		.reset               (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                                                // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                                                                         //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                                                                         //          .valid
		.src_data            (cmd_mux_002_src_data),                                                                                          //          .data
		.src_channel         (cmd_mux_002_src_channel),                                                                                       //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                                                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                                                                   //          .endofpacket
		.sink0_ready         (pixel_buffer_avalon_pixel_dma_master_to_pixel_buffer_avalon_control_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pixel_buffer_avalon_pixel_dma_master_to_pixel_buffer_avalon_control_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pixel_buffer_avalon_pixel_dma_master_to_pixel_buffer_avalon_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pixel_buffer_avalon_pixel_dma_master_to_pixel_buffer_avalon_control_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pixel_buffer_avalon_pixel_dma_master_to_pixel_buffer_avalon_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pixel_buffer_avalon_pixel_dma_master_to_pixel_buffer_avalon_control_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                                                                                      //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                                                                                      //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                                                                                    //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                                                                                       //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                                                                              //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                                                                                 //          .endofpacket
	);

	test_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (Sys_Clk_sys_clk_clk),                                                                                        //       clk.clk
		.reset               (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                                             // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                                                                      //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                                                                      //          .valid
		.src_data            (cmd_mux_003_src_data),                                                                                       //          .data
		.src_channel         (cmd_mux_003_src_channel),                                                                                    //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                                                              //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                                                                //          .endofpacket
		.sink0_ready         (pixel_buffer_avalon_pixel_dma_master_to_rgb_resampler_avalon_rgb_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pixel_buffer_avalon_pixel_dma_master_to_rgb_resampler_avalon_rgb_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pixel_buffer_avalon_pixel_dma_master_to_rgb_resampler_avalon_rgb_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pixel_buffer_avalon_pixel_dma_master_to_rgb_resampler_avalon_rgb_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pixel_buffer_avalon_pixel_dma_master_to_rgb_resampler_avalon_rgb_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pixel_buffer_avalon_pixel_dma_master_to_rgb_resampler_avalon_rgb_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                                                                                   //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                                                                                   //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                                                                                 //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                                                                                    //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                                                                           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)                                                                              //          .endofpacket
	);

	test_mm_interconnect_0_cmd_mux_004 cmd_mux_004 (
		.clk                 (Sys_Clk_sys_clk_clk),                                                                             //       clk.clk
		.reset               (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                                                           //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                                                           //          .valid
		.src_data            (cmd_mux_004_src_data),                                                                            //          .data
		.src_channel         (cmd_mux_004_src_channel),                                                                         //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                                                     //          .endofpacket
		.sink0_ready         (pixel_buffer_avalon_pixel_dma_master_to_cpu_debug_mem_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pixel_buffer_avalon_pixel_dma_master_to_cpu_debug_mem_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pixel_buffer_avalon_pixel_dma_master_to_cpu_debug_mem_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pixel_buffer_avalon_pixel_dma_master_to_cpu_debug_mem_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pixel_buffer_avalon_pixel_dma_master_to_cpu_debug_mem_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pixel_buffer_avalon_pixel_dma_master_to_cpu_debug_mem_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                                                                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                                                                        //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                                                                      //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                                                                         //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),                                                                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket),                                                                  //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                                                                        //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                                                                        //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                                                                      //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                                                                         //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                                                                //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)                                                                   //          .endofpacket
	);

	test_mm_interconnect_0_cmd_mux_005 cmd_mux_005 (
		.clk                 (Sys_Clk_sys_clk_clk),                                                                  //       clk.clk
		.reset               (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                                                //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                                                //          .valid
		.src_data            (cmd_mux_005_src_data),                                                                 //          .data
		.src_channel         (cmd_mux_005_src_channel),                                                              //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                                                        //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                                          //          .endofpacket
		.sink0_ready         (pixel_buffer_avalon_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (pixel_buffer_avalon_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (pixel_buffer_avalon_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (pixel_buffer_avalon_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (pixel_buffer_avalon_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (pixel_buffer_avalon_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (cpu_data_master_to_sdram_s1_cmd_width_adapter_src_ready),                              //     sink1.ready
		.sink1_valid         (cpu_data_master_to_sdram_s1_cmd_width_adapter_src_valid),                              //          .valid
		.sink1_channel       (cpu_data_master_to_sdram_s1_cmd_width_adapter_src_channel),                            //          .channel
		.sink1_data          (cpu_data_master_to_sdram_s1_cmd_width_adapter_src_data),                               //          .data
		.sink1_startofpacket (cpu_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket),                      //          .startofpacket
		.sink1_endofpacket   (cpu_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),                        //          .endofpacket
		.sink2_ready         (cpu_instruction_master_to_sdram_s1_cmd_width_adapter_src_ready),                       //     sink2.ready
		.sink2_valid         (cpu_instruction_master_to_sdram_s1_cmd_width_adapter_src_valid),                       //          .valid
		.sink2_channel       (cpu_instruction_master_to_sdram_s1_cmd_width_adapter_src_channel),                     //          .channel
		.sink2_data          (cpu_instruction_master_to_sdram_s1_cmd_width_adapter_src_data),                        //          .data
		.sink2_startofpacket (cpu_instruction_master_to_sdram_s1_cmd_width_adapter_src_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cpu_instruction_master_to_sdram_s1_cmd_width_adapter_src_endofpacket)                  //          .endofpacket
	);

	test_mm_interconnect_0_cmd_mux_006 cmd_mux_006 (
		.clk                 (Sys_Clk_sys_clk_clk),                            //       clk.clk
		.reset               (Pixel_Buffer_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                          //          .valid
		.src_data            (cmd_mux_006_src_data),                           //          .data
		.src_channel         (cmd_mux_006_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_001_src6_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_001_src6_valid),                       //          .valid
		.sink0_channel       (cmd_demux_001_src6_channel),                     //          .channel
		.sink0_data          (cmd_demux_001_src6_data),                        //          .data
		.sink0_startofpacket (cmd_demux_001_src6_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src6_endofpacket)                  //          .endofpacket
	);

	test_mm_interconnect_0_cmd_mux_001 cmd_mux_007 (
		.clk                 (Sys_Clk_sys_clk_clk),                    //       clk.clk
		.reset               (JTAG_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                  //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                  //          .valid
		.src_data            (cmd_mux_007_src_data),                   //          .data
		.src_channel         (cmd_mux_007_src_channel),                //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),            //          .endofpacket
		.sink0_ready         (cmd_demux_001_src7_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src7_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src7_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src7_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src7_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src7_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_demux_002_src2_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_002_src2_valid),               //          .valid
		.sink1_channel       (cmd_demux_002_src2_channel),             //          .channel
		.sink1_data          (cmd_demux_002_src2_data),                //          .data
		.sink1_startofpacket (cmd_demux_002_src2_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src2_endofpacket)          //          .endofpacket
	);

	test_mm_interconnect_0_cmd_mux_001 cmd_mux_008 (
		.clk                 (Sys_Clk_sys_clk_clk),                    //       clk.clk
		.reset               (JTAG_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                  //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                  //          .valid
		.src_data            (cmd_mux_008_src_data),                   //          .data
		.src_channel         (cmd_mux_008_src_channel),                //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),            //          .endofpacket
		.sink0_ready         (cmd_demux_001_src8_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_001_src8_valid),               //          .valid
		.sink0_channel       (cmd_demux_001_src8_channel),             //          .channel
		.sink0_data          (cmd_demux_001_src8_data),                //          .data
		.sink0_startofpacket (cmd_demux_001_src8_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src8_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_demux_002_src3_ready),               //     sink1.ready
		.sink1_valid         (cmd_demux_002_src3_valid),               //          .valid
		.sink1_channel       (cmd_demux_002_src3_channel),             //          .channel
		.sink1_data          (cmd_demux_002_src3_data),                //          .data
		.sink1_startofpacket (cmd_demux_002_src3_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src3_endofpacket)          //          .endofpacket
	);

	test_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (Sys_Clk_sys_clk_clk),                            //       clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                           //      sink.ready
		.sink_channel       (router_003_src_channel),                         //          .channel
		.sink_data          (router_003_src_data),                            //          .data
		.sink_startofpacket (router_003_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_003_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_src0_data),                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_src1_data),                            //          .data
		.src1_channel       (rsp_demux_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                      //          .endofpacket
	);

	test_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (Sys_Clk_sys_clk_clk),                            //       clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                           //      sink.ready
		.sink_channel       (router_004_src_channel),                         //          .channel
		.sink_data          (router_004_src_data),                            //          .data
		.sink_startofpacket (router_004_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_004_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_001_src0_data),                        //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_001_src1_data),                        //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                  //          .endofpacket
	);

	test_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (Sys_Clk_sys_clk_clk),                            //       clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                           //      sink.ready
		.sink_channel       (router_005_src_channel),                         //          .channel
		.sink_data          (router_005_src_data),                            //          .data
		.sink_startofpacket (router_005_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_005_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_002_src0_data),                        //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_002_src1_data),                        //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                  //          .endofpacket
	);

	test_mm_interconnect_0_rsp_demux_001 rsp_demux_003 (
		.clk                (Sys_Clk_sys_clk_clk),                            //       clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                           //      sink.ready
		.sink_channel       (router_006_src_channel),                         //          .channel
		.sink_data          (router_006_src_data),                            //          .data
		.sink_startofpacket (router_006_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_006_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_003_src0_data),                        //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_003_src1_data),                        //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                  //          .endofpacket
	);

	test_mm_interconnect_0_rsp_demux_004 rsp_demux_004 (
		.clk                (Sys_Clk_sys_clk_clk),                            //       clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                           //      sink.ready
		.sink_channel       (router_007_src_channel),                         //          .channel
		.sink_data          (router_007_src_data),                            //          .data
		.sink_startofpacket (router_007_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_007_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_004_src0_data),                        //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_004_src1_data),                        //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                       //          .valid
		.src2_data          (rsp_demux_004_src2_data),                        //          .data
		.src2_channel       (rsp_demux_004_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket)                  //          .endofpacket
	);

	test_mm_interconnect_0_rsp_demux_005 rsp_demux_005 (
		.clk                (Sys_Clk_sys_clk_clk),                            //       clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                           //      sink.ready
		.sink_channel       (router_008_src_channel),                         //          .channel
		.sink_data          (router_008_src_data),                            //          .data
		.sink_startofpacket (router_008_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_008_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_005_src0_data),                        //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_005_src1_data),                        //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),                       //          .valid
		.src2_data          (rsp_demux_005_src2_data),                        //          .data
		.src2_channel       (rsp_demux_005_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket)                  //          .endofpacket
	);

	test_mm_interconnect_0_rsp_demux_006 rsp_demux_006 (
		.clk                (Sys_Clk_sys_clk_clk),                            //       clk.clk
		.reset              (Pixel_Buffer_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                           //      sink.ready
		.sink_channel       (router_009_src_channel),                         //          .channel
		.sink_data          (router_009_src_data),                            //          .data
		.sink_startofpacket (router_009_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_009_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_006_src0_data),                        //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                  //          .endofpacket
	);

	test_mm_interconnect_0_rsp_demux_001 rsp_demux_007 (
		.clk                (Sys_Clk_sys_clk_clk),                    //       clk.clk
		.reset              (JTAG_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                   //      sink.ready
		.sink_channel       (router_010_src_channel),                 //          .channel
		.sink_data          (router_010_src_data),                    //          .data
		.sink_startofpacket (router_010_src_startofpacket),           //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),             //          .endofpacket
		.sink_valid         (router_010_src_valid),                   //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),               //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),               //          .valid
		.src0_data          (rsp_demux_007_src0_data),                //          .data
		.src0_channel       (rsp_demux_007_src0_channel),             //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),               //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),               //          .valid
		.src1_data          (rsp_demux_007_src1_data),                //          .data
		.src1_channel       (rsp_demux_007_src1_channel),             //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)          //          .endofpacket
	);

	test_mm_interconnect_0_rsp_demux_001 rsp_demux_008 (
		.clk                (Sys_Clk_sys_clk_clk),                    //       clk.clk
		.reset              (JTAG_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                   //      sink.ready
		.sink_channel       (router_011_src_channel),                 //          .channel
		.sink_data          (router_011_src_data),                    //          .data
		.sink_startofpacket (router_011_src_startofpacket),           //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),             //          .endofpacket
		.sink_valid         (router_011_src_valid),                   //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),               //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),               //          .valid
		.src0_data          (rsp_demux_008_src0_data),                //          .data
		.src0_channel       (rsp_demux_008_src0_channel),             //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),         //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),               //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),               //          .valid
		.src1_data          (rsp_demux_008_src1_data),                //          .data
		.src1_channel       (rsp_demux_008_src1_channel),             //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),       //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)          //          .endofpacket
	);

	test_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (Sys_Clk_sys_clk_clk),                                                                                               //       clk.clk
		.reset               (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                                                    // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                                                                 //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                                                                 //          .valid
		.src_data            (rsp_mux_src_data),                                                                                                  //          .data
		.src_channel         (rsp_mux_src_channel),                                                                                               //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                                                                         //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                                                                           //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                                                              //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                                                              //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                                                                            //          .channel
		.sink0_data          (rsp_demux_src0_data),                                                                                               //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                                                                      //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                                                                        //          .endofpacket
		.sink1_ready         (char_buffer_avalon_char_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (char_buffer_avalon_char_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_valid),         //          .valid
		.sink1_channel       (char_buffer_avalon_char_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_channel),       //          .channel
		.sink1_data          (char_buffer_avalon_char_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_data),          //          .data
		.sink1_startofpacket (char_buffer_avalon_char_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (char_buffer_avalon_char_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (pixel_buffer_avalon_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_ready),             //     sink2.ready
		.sink2_valid         (pixel_buffer_avalon_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_valid),             //          .valid
		.sink2_channel       (pixel_buffer_avalon_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_channel),           //          .channel
		.sink2_data          (pixel_buffer_avalon_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_data),              //          .data
		.sink2_startofpacket (pixel_buffer_avalon_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.sink2_endofpacket   (pixel_buffer_avalon_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_endofpacket),       //          .endofpacket
		.sink3_ready         (rgb_resampler_avalon_rgb_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_ready),                //     sink3.ready
		.sink3_valid         (rgb_resampler_avalon_rgb_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_valid),                //          .valid
		.sink3_channel       (rgb_resampler_avalon_rgb_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_channel),              //          .channel
		.sink3_data          (rgb_resampler_avalon_rgb_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_data),                 //          .data
		.sink3_startofpacket (rgb_resampler_avalon_rgb_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_startofpacket),        //          .startofpacket
		.sink3_endofpacket   (rgb_resampler_avalon_rgb_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_endofpacket),          //          .endofpacket
		.sink4_ready         (cpu_debug_mem_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_ready),                           //     sink4.ready
		.sink4_valid         (cpu_debug_mem_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_valid),                           //          .valid
		.sink4_channel       (cpu_debug_mem_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_channel),                         //          .channel
		.sink4_data          (cpu_debug_mem_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_data),                            //          .data
		.sink4_startofpacket (cpu_debug_mem_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_startofpacket),                   //          .startofpacket
		.sink4_endofpacket   (cpu_debug_mem_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_endofpacket),                     //          .endofpacket
		.sink5_ready         (sdram_s1_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_ready),                                      //     sink5.ready
		.sink5_valid         (sdram_s1_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_valid),                                      //          .valid
		.sink5_channel       (sdram_s1_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_channel),                                    //          .channel
		.sink5_data          (sdram_s1_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_data),                                       //          .data
		.sink5_startofpacket (sdram_s1_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_startofpacket),                              //          .startofpacket
		.sink5_endofpacket   (sdram_s1_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_endofpacket)                                 //          .endofpacket
	);

	test_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (Sys_Clk_sys_clk_clk),                                                                         //       clk.clk
		.reset               (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                                                       //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                                                       //          .valid
		.src_data            (rsp_mux_001_src_data),                                                                        //          .data
		.src_channel         (rsp_mux_001_src_channel),                                                                     //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                                               //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                                                 //          .endofpacket
		.sink0_ready         (char_buffer_avalon_char_buffer_slave_to_cpu_data_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (char_buffer_avalon_char_buffer_slave_to_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (char_buffer_avalon_char_buffer_slave_to_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (char_buffer_avalon_char_buffer_slave_to_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (char_buffer_avalon_char_buffer_slave_to_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (char_buffer_avalon_char_buffer_slave_to_cpu_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                                                                    //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                                                                    //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                                                                  //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                                                                     //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                                                            //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                                                              //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                                                                    //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                                                                    //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                                                                  //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                                                                     //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                                                            //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),                                                              //          .endofpacket
		.sink3_ready         (rsp_demux_003_src1_ready),                                                                    //     sink3.ready
		.sink3_valid         (rsp_demux_003_src1_valid),                                                                    //          .valid
		.sink3_channel       (rsp_demux_003_src1_channel),                                                                  //          .channel
		.sink3_data          (rsp_demux_003_src1_data),                                                                     //          .data
		.sink3_startofpacket (rsp_demux_003_src1_startofpacket),                                                            //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src1_endofpacket),                                                              //          .endofpacket
		.sink4_ready         (rsp_demux_004_src1_ready),                                                                    //     sink4.ready
		.sink4_valid         (rsp_demux_004_src1_valid),                                                                    //          .valid
		.sink4_channel       (rsp_demux_004_src1_channel),                                                                  //          .channel
		.sink4_data          (rsp_demux_004_src1_data),                                                                     //          .data
		.sink4_startofpacket (rsp_demux_004_src1_startofpacket),                                                            //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src1_endofpacket),                                                              //          .endofpacket
		.sink5_ready         (sdram_s1_to_cpu_data_master_rsp_width_adapter_src_ready),                                     //     sink5.ready
		.sink5_valid         (sdram_s1_to_cpu_data_master_rsp_width_adapter_src_valid),                                     //          .valid
		.sink5_channel       (sdram_s1_to_cpu_data_master_rsp_width_adapter_src_channel),                                   //          .channel
		.sink5_data          (sdram_s1_to_cpu_data_master_rsp_width_adapter_src_data),                                      //          .data
		.sink5_startofpacket (sdram_s1_to_cpu_data_master_rsp_width_adapter_src_startofpacket),                             //          .startofpacket
		.sink5_endofpacket   (sdram_s1_to_cpu_data_master_rsp_width_adapter_src_endofpacket),                               //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                                                                    //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                                                                    //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                                                                  //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                                                                     //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),                                                            //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),                                                              //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                                                                    //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                                                                    //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),                                                                  //          .channel
		.sink7_data          (rsp_demux_007_src0_data),                                                                     //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),                                                            //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket),                                                              //          .endofpacket
		.sink8_ready         (rsp_demux_008_src0_ready),                                                                    //     sink8.ready
		.sink8_valid         (rsp_demux_008_src0_valid),                                                                    //          .valid
		.sink8_channel       (rsp_demux_008_src0_channel),                                                                  //          .channel
		.sink8_data          (rsp_demux_008_src0_data),                                                                     //          .data
		.sink8_startofpacket (rsp_demux_008_src0_startofpacket),                                                            //          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src0_endofpacket)                                                               //          .endofpacket
	);

	test_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (Sys_Clk_sys_clk_clk),                                                    //       clk.clk
		.reset               (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                                  //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                                  //          .valid
		.src_data            (rsp_mux_002_src_data),                                                   //          .data
		.src_channel         (rsp_mux_002_src_channel),                                                //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                            //          .endofpacket
		.sink0_ready         (rsp_demux_004_src2_ready),                                               //     sink0.ready
		.sink0_valid         (rsp_demux_004_src2_valid),                                               //          .valid
		.sink0_channel       (rsp_demux_004_src2_channel),                                             //          .channel
		.sink0_data          (rsp_demux_004_src2_data),                                                //          .data
		.sink0_startofpacket (rsp_demux_004_src2_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (rsp_demux_004_src2_endofpacket),                                         //          .endofpacket
		.sink1_ready         (sdram_s1_to_cpu_instruction_master_rsp_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (sdram_s1_to_cpu_instruction_master_rsp_width_adapter_src_valid),         //          .valid
		.sink1_channel       (sdram_s1_to_cpu_instruction_master_rsp_width_adapter_src_channel),       //          .channel
		.sink1_data          (sdram_s1_to_cpu_instruction_master_rsp_width_adapter_src_data),          //          .data
		.sink1_startofpacket (sdram_s1_to_cpu_instruction_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (sdram_s1_to_cpu_instruction_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready         (rsp_demux_007_src1_ready),                                               //     sink2.ready
		.sink2_valid         (rsp_demux_007_src1_valid),                                               //          .valid
		.sink2_channel       (rsp_demux_007_src1_channel),                                             //          .channel
		.sink2_data          (rsp_demux_007_src1_data),                                                //          .data
		.sink2_startofpacket (rsp_demux_007_src1_startofpacket),                                       //          .startofpacket
		.sink2_endofpacket   (rsp_demux_007_src1_endofpacket),                                         //          .endofpacket
		.sink3_ready         (rsp_demux_008_src1_ready),                                               //     sink3.ready
		.sink3_valid         (rsp_demux_008_src1_valid),                                               //          .valid
		.sink3_channel       (rsp_demux_008_src1_channel),                                             //          .channel
		.sink3_data          (rsp_demux_008_src1_data),                                                //          .data
		.sink3_startofpacket (rsp_demux_008_src1_startofpacket),                                       //          .startofpacket
		.sink3_endofpacket   (rsp_demux_008_src1_endofpacket)                                          //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (49),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (52),
		.IN_PKT_BURSTWRAP_L            (50),
		.IN_PKT_BURST_SIZE_H           (55),
		.IN_PKT_BURST_SIZE_L           (53),
		.IN_PKT_RESPONSE_STATUS_H      (79),
		.IN_PKT_RESPONSE_STATUS_L      (78),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (57),
		.IN_PKT_BURST_TYPE_L           (56),
		.IN_PKT_ORI_BURST_SIZE_L       (80),
		.IN_PKT_ORI_BURST_SIZE_H       (82),
		.IN_ST_DATA_W                  (83),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pixel_buffer_avalon_pixel_dma_master_to_char_buffer_avalon_char_control_slave_cmd_width_adapter (
		.clk                  (Sys_Clk_sys_clk_clk),                                                                                               //       clk.clk
		.reset                (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                                                    // clk_reset.reset
		.in_valid             (cmd_demux_src1_valid),                                                                                              //      sink.valid
		.in_channel           (cmd_demux_src1_channel),                                                                                            //          .channel
		.in_startofpacket     (cmd_demux_src1_startofpacket),                                                                                      //          .startofpacket
		.in_endofpacket       (cmd_demux_src1_endofpacket),                                                                                        //          .endofpacket
		.in_ready             (cmd_demux_src1_ready),                                                                                              //          .ready
		.in_data              (cmd_demux_src1_data),                                                                                               //          .data
		.out_endofpacket      (pixel_buffer_avalon_pixel_dma_master_to_char_buffer_avalon_char_control_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pixel_buffer_avalon_pixel_dma_master_to_char_buffer_avalon_char_control_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pixel_buffer_avalon_pixel_dma_master_to_char_buffer_avalon_char_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pixel_buffer_avalon_pixel_dma_master_to_char_buffer_avalon_char_control_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pixel_buffer_avalon_pixel_dma_master_to_char_buffer_avalon_char_control_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pixel_buffer_avalon_pixel_dma_master_to_char_buffer_avalon_char_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (49),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (52),
		.IN_PKT_BURSTWRAP_L            (50),
		.IN_PKT_BURST_SIZE_H           (55),
		.IN_PKT_BURST_SIZE_L           (53),
		.IN_PKT_RESPONSE_STATUS_H      (79),
		.IN_PKT_RESPONSE_STATUS_L      (78),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (57),
		.IN_PKT_BURST_TYPE_L           (56),
		.IN_PKT_ORI_BURST_SIZE_L       (80),
		.IN_PKT_ORI_BURST_SIZE_H       (82),
		.IN_ST_DATA_W                  (83),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pixel_buffer_avalon_pixel_dma_master_to_pixel_buffer_avalon_control_slave_cmd_width_adapter (
		.clk                  (Sys_Clk_sys_clk_clk),                                                                                           //       clk.clk
		.reset                (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                                                // clk_reset.reset
		.in_valid             (cmd_demux_src2_valid),                                                                                          //      sink.valid
		.in_channel           (cmd_demux_src2_channel),                                                                                        //          .channel
		.in_startofpacket     (cmd_demux_src2_startofpacket),                                                                                  //          .startofpacket
		.in_endofpacket       (cmd_demux_src2_endofpacket),                                                                                    //          .endofpacket
		.in_ready             (cmd_demux_src2_ready),                                                                                          //          .ready
		.in_data              (cmd_demux_src2_data),                                                                                           //          .data
		.out_endofpacket      (pixel_buffer_avalon_pixel_dma_master_to_pixel_buffer_avalon_control_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pixel_buffer_avalon_pixel_dma_master_to_pixel_buffer_avalon_control_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pixel_buffer_avalon_pixel_dma_master_to_pixel_buffer_avalon_control_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pixel_buffer_avalon_pixel_dma_master_to_pixel_buffer_avalon_control_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pixel_buffer_avalon_pixel_dma_master_to_pixel_buffer_avalon_control_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pixel_buffer_avalon_pixel_dma_master_to_pixel_buffer_avalon_control_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (49),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (52),
		.IN_PKT_BURSTWRAP_L            (50),
		.IN_PKT_BURST_SIZE_H           (55),
		.IN_PKT_BURST_SIZE_L           (53),
		.IN_PKT_RESPONSE_STATUS_H      (79),
		.IN_PKT_RESPONSE_STATUS_L      (78),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (57),
		.IN_PKT_BURST_TYPE_L           (56),
		.IN_PKT_ORI_BURST_SIZE_L       (80),
		.IN_PKT_ORI_BURST_SIZE_H       (82),
		.IN_ST_DATA_W                  (83),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pixel_buffer_avalon_pixel_dma_master_to_rgb_resampler_avalon_rgb_slave_cmd_width_adapter (
		.clk                  (Sys_Clk_sys_clk_clk),                                                                                        //       clk.clk
		.reset                (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                                             // clk_reset.reset
		.in_valid             (cmd_demux_src3_valid),                                                                                       //      sink.valid
		.in_channel           (cmd_demux_src3_channel),                                                                                     //          .channel
		.in_startofpacket     (cmd_demux_src3_startofpacket),                                                                               //          .startofpacket
		.in_endofpacket       (cmd_demux_src3_endofpacket),                                                                                 //          .endofpacket
		.in_ready             (cmd_demux_src3_ready),                                                                                       //          .ready
		.in_data              (cmd_demux_src3_data),                                                                                        //          .data
		.out_endofpacket      (pixel_buffer_avalon_pixel_dma_master_to_rgb_resampler_avalon_rgb_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pixel_buffer_avalon_pixel_dma_master_to_rgb_resampler_avalon_rgb_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pixel_buffer_avalon_pixel_dma_master_to_rgb_resampler_avalon_rgb_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pixel_buffer_avalon_pixel_dma_master_to_rgb_resampler_avalon_rgb_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pixel_buffer_avalon_pixel_dma_master_to_rgb_resampler_avalon_rgb_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pixel_buffer_avalon_pixel_dma_master_to_rgb_resampler_avalon_rgb_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (49),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (52),
		.IN_PKT_BURSTWRAP_L            (50),
		.IN_PKT_BURST_SIZE_H           (55),
		.IN_PKT_BURST_SIZE_L           (53),
		.IN_PKT_RESPONSE_STATUS_H      (79),
		.IN_PKT_RESPONSE_STATUS_L      (78),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (57),
		.IN_PKT_BURST_TYPE_L           (56),
		.IN_PKT_ORI_BURST_SIZE_L       (80),
		.IN_PKT_ORI_BURST_SIZE_H       (82),
		.IN_ST_DATA_W                  (83),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pixel_buffer_avalon_pixel_dma_master_to_cpu_debug_mem_slave_cmd_width_adapter (
		.clk                  (Sys_Clk_sys_clk_clk),                                                                             //       clk.clk
		.reset                (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.in_valid             (cmd_demux_src4_valid),                                                                            //      sink.valid
		.in_channel           (cmd_demux_src4_channel),                                                                          //          .channel
		.in_startofpacket     (cmd_demux_src4_startofpacket),                                                                    //          .startofpacket
		.in_endofpacket       (cmd_demux_src4_endofpacket),                                                                      //          .endofpacket
		.in_ready             (cmd_demux_src4_ready),                                                                            //          .ready
		.in_data              (cmd_demux_src4_data),                                                                             //          .data
		.out_endofpacket      (pixel_buffer_avalon_pixel_dma_master_to_cpu_debug_mem_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pixel_buffer_avalon_pixel_dma_master_to_cpu_debug_mem_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pixel_buffer_avalon_pixel_dma_master_to_cpu_debug_mem_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pixel_buffer_avalon_pixel_dma_master_to_cpu_debug_mem_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pixel_buffer_avalon_pixel_dma_master_to_cpu_debug_mem_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pixel_buffer_avalon_pixel_dma_master_to_cpu_debug_mem_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (49),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (52),
		.IN_PKT_BURSTWRAP_L            (50),
		.IN_PKT_BURST_SIZE_H           (55),
		.IN_PKT_BURST_SIZE_L           (53),
		.IN_PKT_RESPONSE_STATUS_H      (79),
		.IN_PKT_RESPONSE_STATUS_L      (78),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (57),
		.IN_PKT_BURST_TYPE_L           (56),
		.IN_PKT_ORI_BURST_SIZE_L       (80),
		.IN_PKT_ORI_BURST_SIZE_H       (82),
		.IN_ST_DATA_W                  (83),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (88),
		.OUT_PKT_RESPONSE_STATUS_L     (87),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (89),
		.OUT_PKT_ORI_BURST_SIZE_H      (91),
		.OUT_ST_DATA_W                 (92),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pixel_buffer_avalon_pixel_dma_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (Sys_Clk_sys_clk_clk),                                                                  //       clk.clk
		.reset                (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.in_valid             (cmd_demux_src5_valid),                                                                 //      sink.valid
		.in_channel           (cmd_demux_src5_channel),                                                               //          .channel
		.in_startofpacket     (cmd_demux_src5_startofpacket),                                                         //          .startofpacket
		.in_endofpacket       (cmd_demux_src5_endofpacket),                                                           //          .endofpacket
		.in_ready             (cmd_demux_src5_ready),                                                                 //          .ready
		.in_data              (cmd_demux_src5_data),                                                                  //          .data
		.out_endofpacket      (pixel_buffer_avalon_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pixel_buffer_avalon_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pixel_buffer_avalon_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pixel_buffer_avalon_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pixel_buffer_avalon_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pixel_buffer_avalon_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (49),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (55),
		.OUT_PKT_BURST_SIZE_L          (53),
		.OUT_PKT_RESPONSE_STATUS_H     (79),
		.OUT_PKT_RESPONSE_STATUS_L     (78),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (57),
		.OUT_PKT_BURST_TYPE_L          (56),
		.OUT_PKT_ORI_BURST_SIZE_L      (80),
		.OUT_PKT_ORI_BURST_SIZE_H      (82),
		.OUT_ST_DATA_W                 (83),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) cpu_data_master_to_char_buffer_avalon_char_buffer_slave_cmd_width_adapter (
		.clk                  (Sys_Clk_sys_clk_clk),                                                                         //       clk.clk
		.reset                (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                                                    //      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                                                  //          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                                            //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                                              //          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                                                    //          .ready
		.in_data              (cmd_demux_001_src0_data),                                                                     //          .data
		.out_endofpacket      (cpu_data_master_to_char_buffer_avalon_char_buffer_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (cpu_data_master_to_char_buffer_avalon_char_buffer_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (cpu_data_master_to_char_buffer_avalon_char_buffer_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (cpu_data_master_to_char_buffer_avalon_char_buffer_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (cpu_data_master_to_char_buffer_avalon_char_buffer_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (cpu_data_master_to_char_buffer_avalon_char_buffer_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (88),
		.OUT_PKT_RESPONSE_STATUS_L     (87),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (89),
		.OUT_PKT_ORI_BURST_SIZE_H      (91),
		.OUT_ST_DATA_W                 (92),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) cpu_data_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (Sys_Clk_sys_clk_clk),                                             //       clk.clk
		.reset                (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_demux_001_src5_valid),                                        //      sink.valid
		.in_channel           (cmd_demux_001_src5_channel),                                      //          .channel
		.in_startofpacket     (cmd_demux_001_src5_startofpacket),                                //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src5_endofpacket),                                  //          .endofpacket
		.in_ready             (cmd_demux_001_src5_ready),                                        //          .ready
		.in_data              (cmd_demux_001_src5_data),                                         //          .data
		.out_endofpacket      (cpu_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (cpu_data_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (cpu_data_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (cpu_data_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (cpu_data_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (cpu_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (88),
		.OUT_PKT_RESPONSE_STATUS_L     (87),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (89),
		.OUT_PKT_ORI_BURST_SIZE_H      (91),
		.OUT_ST_DATA_W                 (92),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) cpu_instruction_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (Sys_Clk_sys_clk_clk),                                                    //       clk.clk
		.reset                (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (cmd_demux_002_src1_valid),                                               //      sink.valid
		.in_channel           (cmd_demux_002_src1_channel),                                             //          .channel
		.in_startofpacket     (cmd_demux_002_src1_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src1_endofpacket),                                         //          .endofpacket
		.in_ready             (cmd_demux_002_src1_ready),                                               //          .ready
		.in_data              (cmd_demux_002_src1_data),                                                //          .data
		.out_endofpacket      (cpu_instruction_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (cpu_instruction_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (cpu_instruction_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (cpu_instruction_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (cpu_instruction_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (cpu_instruction_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (49),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (52),
		.IN_PKT_BURSTWRAP_L            (50),
		.IN_PKT_BURST_SIZE_H           (55),
		.IN_PKT_BURST_SIZE_L           (53),
		.IN_PKT_RESPONSE_STATUS_H      (79),
		.IN_PKT_RESPONSE_STATUS_L      (78),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (57),
		.IN_PKT_BURST_TYPE_L           (56),
		.IN_PKT_ORI_BURST_SIZE_L       (80),
		.IN_PKT_ORI_BURST_SIZE_H       (82),
		.IN_ST_DATA_W                  (83),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) char_buffer_avalon_char_buffer_slave_to_cpu_data_master_rsp_width_adapter (
		.clk                  (Sys_Clk_sys_clk_clk),                                                                         //       clk.clk
		.reset                (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.in_valid             (rsp_demux_src1_valid),                                                                        //      sink.valid
		.in_channel           (rsp_demux_src1_channel),                                                                      //          .channel
		.in_startofpacket     (rsp_demux_src1_startofpacket),                                                                //          .startofpacket
		.in_endofpacket       (rsp_demux_src1_endofpacket),                                                                  //          .endofpacket
		.in_ready             (rsp_demux_src1_ready),                                                                        //          .ready
		.in_data              (rsp_demux_src1_data),                                                                         //          .data
		.out_endofpacket      (char_buffer_avalon_char_buffer_slave_to_cpu_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (char_buffer_avalon_char_buffer_slave_to_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (char_buffer_avalon_char_buffer_slave_to_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (char_buffer_avalon_char_buffer_slave_to_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (char_buffer_avalon_char_buffer_slave_to_cpu_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (char_buffer_avalon_char_buffer_slave_to_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                       // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (49),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (55),
		.OUT_PKT_BURST_SIZE_L          (53),
		.OUT_PKT_RESPONSE_STATUS_H     (79),
		.OUT_PKT_RESPONSE_STATUS_L     (78),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (57),
		.OUT_PKT_BURST_TYPE_L          (56),
		.OUT_PKT_ORI_BURST_SIZE_L      (80),
		.OUT_PKT_ORI_BURST_SIZE_H      (82),
		.OUT_ST_DATA_W                 (83),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) char_buffer_avalon_char_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter (
		.clk                  (Sys_Clk_sys_clk_clk),                                                                                               //       clk.clk
		.reset                (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                                                    // clk_reset.reset
		.in_valid             (rsp_demux_001_src0_valid),                                                                                          //      sink.valid
		.in_channel           (rsp_demux_001_src0_channel),                                                                                        //          .channel
		.in_startofpacket     (rsp_demux_001_src0_startofpacket),                                                                                  //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src0_endofpacket),                                                                                    //          .endofpacket
		.in_ready             (rsp_demux_001_src0_ready),                                                                                          //          .ready
		.in_data              (rsp_demux_001_src0_data),                                                                                           //          .data
		.out_endofpacket      (char_buffer_avalon_char_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (char_buffer_avalon_char_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (char_buffer_avalon_char_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (char_buffer_avalon_char_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (char_buffer_avalon_char_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (char_buffer_avalon_char_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (49),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (55),
		.OUT_PKT_BURST_SIZE_L          (53),
		.OUT_PKT_RESPONSE_STATUS_H     (79),
		.OUT_PKT_RESPONSE_STATUS_L     (78),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (57),
		.OUT_PKT_BURST_TYPE_L          (56),
		.OUT_PKT_ORI_BURST_SIZE_L      (80),
		.OUT_PKT_ORI_BURST_SIZE_H      (82),
		.OUT_ST_DATA_W                 (83),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pixel_buffer_avalon_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter (
		.clk                  (Sys_Clk_sys_clk_clk),                                                                                           //       clk.clk
		.reset                (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                                                // clk_reset.reset
		.in_valid             (rsp_demux_002_src0_valid),                                                                                      //      sink.valid
		.in_channel           (rsp_demux_002_src0_channel),                                                                                    //          .channel
		.in_startofpacket     (rsp_demux_002_src0_startofpacket),                                                                              //          .startofpacket
		.in_endofpacket       (rsp_demux_002_src0_endofpacket),                                                                                //          .endofpacket
		.in_ready             (rsp_demux_002_src0_ready),                                                                                      //          .ready
		.in_data              (rsp_demux_002_src0_data),                                                                                       //          .data
		.out_endofpacket      (pixel_buffer_avalon_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pixel_buffer_avalon_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pixel_buffer_avalon_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pixel_buffer_avalon_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pixel_buffer_avalon_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pixel_buffer_avalon_control_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (49),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (55),
		.OUT_PKT_BURST_SIZE_L          (53),
		.OUT_PKT_RESPONSE_STATUS_H     (79),
		.OUT_PKT_RESPONSE_STATUS_L     (78),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (57),
		.OUT_PKT_BURST_TYPE_L          (56),
		.OUT_PKT_ORI_BURST_SIZE_L      (80),
		.OUT_PKT_ORI_BURST_SIZE_H      (82),
		.OUT_ST_DATA_W                 (83),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) rgb_resampler_avalon_rgb_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter (
		.clk                  (Sys_Clk_sys_clk_clk),                                                                                        //       clk.clk
		.reset                (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                                             // clk_reset.reset
		.in_valid             (rsp_demux_003_src0_valid),                                                                                   //      sink.valid
		.in_channel           (rsp_demux_003_src0_channel),                                                                                 //          .channel
		.in_startofpacket     (rsp_demux_003_src0_startofpacket),                                                                           //          .startofpacket
		.in_endofpacket       (rsp_demux_003_src0_endofpacket),                                                                             //          .endofpacket
		.in_ready             (rsp_demux_003_src0_ready),                                                                                   //          .ready
		.in_data              (rsp_demux_003_src0_data),                                                                                    //          .data
		.out_endofpacket      (rgb_resampler_avalon_rgb_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (rgb_resampler_avalon_rgb_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (rgb_resampler_avalon_rgb_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (rgb_resampler_avalon_rgb_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (rgb_resampler_avalon_rgb_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (rgb_resampler_avalon_rgb_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (49),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (55),
		.OUT_PKT_BURST_SIZE_L          (53),
		.OUT_PKT_RESPONSE_STATUS_H     (79),
		.OUT_PKT_RESPONSE_STATUS_L     (78),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (57),
		.OUT_PKT_BURST_TYPE_L          (56),
		.OUT_PKT_ORI_BURST_SIZE_L      (80),
		.OUT_PKT_ORI_BURST_SIZE_H      (82),
		.OUT_ST_DATA_W                 (83),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) cpu_debug_mem_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter (
		.clk                  (Sys_Clk_sys_clk_clk),                                                                             //       clk.clk
		.reset                (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.in_valid             (rsp_demux_004_src0_valid),                                                                        //      sink.valid
		.in_channel           (rsp_demux_004_src0_channel),                                                                      //          .channel
		.in_startofpacket     (rsp_demux_004_src0_startofpacket),                                                                //          .startofpacket
		.in_endofpacket       (rsp_demux_004_src0_endofpacket),                                                                  //          .endofpacket
		.in_ready             (rsp_demux_004_src0_ready),                                                                        //          .ready
		.in_data              (rsp_demux_004_src0_data),                                                                         //          .data
		.out_endofpacket      (cpu_debug_mem_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (cpu_debug_mem_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (cpu_debug_mem_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (cpu_debug_mem_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (cpu_debug_mem_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (cpu_debug_mem_slave_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (88),
		.IN_PKT_RESPONSE_STATUS_L      (87),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (89),
		.IN_PKT_ORI_BURST_SIZE_H       (91),
		.IN_ST_DATA_W                  (92),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (49),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (55),
		.OUT_PKT_BURST_SIZE_L          (53),
		.OUT_PKT_RESPONSE_STATUS_H     (79),
		.OUT_PKT_RESPONSE_STATUS_L     (78),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (57),
		.OUT_PKT_BURST_TYPE_L          (56),
		.OUT_PKT_ORI_BURST_SIZE_L      (80),
		.OUT_PKT_ORI_BURST_SIZE_H      (82),
		.OUT_ST_DATA_W                 (83),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter (
		.clk                  (Sys_Clk_sys_clk_clk),                                                                  //       clk.clk
		.reset                (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.in_valid             (rsp_demux_005_src0_valid),                                                             //      sink.valid
		.in_channel           (rsp_demux_005_src0_channel),                                                           //          .channel
		.in_startofpacket     (rsp_demux_005_src0_startofpacket),                                                     //          .startofpacket
		.in_endofpacket       (rsp_demux_005_src0_endofpacket),                                                       //          .endofpacket
		.in_ready             (rsp_demux_005_src0_ready),                                                             //          .ready
		.in_data              (rsp_demux_005_src0_data),                                                              //          .data
		.out_endofpacket      (sdram_s1_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_pixel_buffer_avalon_pixel_dma_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (88),
		.IN_PKT_RESPONSE_STATUS_L      (87),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (89),
		.IN_PKT_ORI_BURST_SIZE_H       (91),
		.IN_ST_DATA_W                  (92),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_to_cpu_data_master_rsp_width_adapter (
		.clk                  (Sys_Clk_sys_clk_clk),                                             //       clk.clk
		.reset                (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (rsp_demux_005_src1_valid),                                        //      sink.valid
		.in_channel           (rsp_demux_005_src1_channel),                                      //          .channel
		.in_startofpacket     (rsp_demux_005_src1_startofpacket),                                //          .startofpacket
		.in_endofpacket       (rsp_demux_005_src1_endofpacket),                                  //          .endofpacket
		.in_ready             (rsp_demux_005_src1_ready),                                        //          .ready
		.in_data              (rsp_demux_005_src1_data),                                         //          .data
		.out_endofpacket      (sdram_s1_to_cpu_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_cpu_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_cpu_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_cpu_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_cpu_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_cpu_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (88),
		.IN_PKT_RESPONSE_STATUS_L      (87),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (89),
		.IN_PKT_ORI_BURST_SIZE_H       (91),
		.IN_ST_DATA_W                  (92),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_s1_to_cpu_instruction_master_rsp_width_adapter (
		.clk                  (Sys_Clk_sys_clk_clk),                                                    //       clk.clk
		.reset                (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_valid             (rsp_demux_005_src2_valid),                                               //      sink.valid
		.in_channel           (rsp_demux_005_src2_channel),                                             //          .channel
		.in_startofpacket     (rsp_demux_005_src2_startofpacket),                                       //          .startofpacket
		.in_endofpacket       (rsp_demux_005_src2_endofpacket),                                         //          .endofpacket
		.in_ready             (rsp_demux_005_src2_ready),                                               //          .ready
		.in_data              (rsp_demux_005_src2_data),                                                //          .data
		.out_endofpacket      (sdram_s1_to_cpu_instruction_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_cpu_instruction_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_cpu_instruction_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_cpu_instruction_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_cpu_instruction_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_cpu_instruction_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                  // (terminated)
	);

	test_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (Sys_Clk_sys_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                  // in_rst_0.reset
		.in_0_data      (char_buffer_avalon_char_buffer_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (char_buffer_avalon_char_buffer_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (char_buffer_avalon_char_buffer_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                    //         .error
	);

	test_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (Sys_Clk_sys_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (Pixel_Buffer_reset_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.in_0_data      (char_buffer_avalon_char_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (char_buffer_avalon_char_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (char_buffer_avalon_char_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                 //         .error
	);

	test_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (Sys_Clk_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Pixel_Buffer_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (pixel_buffer_avalon_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (pixel_buffer_avalon_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (pixel_buffer_avalon_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                             //         .error
	);

	test_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (Sys_Clk_sys_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (Pixel_Buffer_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (rgb_resampler_avalon_rgb_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                          //         .error
	);

	test_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (Sys_Clk_sys_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (Pixel_Buffer_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (cpu_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (cpu_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (cpu_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)               //         .error
	);

	test_mm_interconnect_0_avalon_st_adapter_005 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (Sys_Clk_sys_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (Pixel_Buffer_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)               //         .error
	);

	test_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (Sys_Clk_sys_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (Pixel_Buffer_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (audio_avalon_audio_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (audio_avalon_audio_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (audio_avalon_audio_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                    //         .error
	);

	test_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (Sys_Clk_sys_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (JTAG_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (jtag_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                  //         .error
	);

	test_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (Sys_Clk_sys_clk_clk),                    // in_clk_0.clk
		.in_rst_0_reset (JTAG_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_0_s1_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (timer_0_s1_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (timer_0_s1_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),       //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),      //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),      //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)       //         .error
	);

endmodule
