// System_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module System_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                  //                          clk_0_clk.clk
		input  wire        JTAG_reset_reset_bridge_in_reset_reset,         //   JTAG_reset_reset_bridge_in_reset.reset
		input  wire        NIOSII_reset_reset_bridge_in_reset_reset,       // NIOSII_reset_reset_bridge_in_reset.reset
		input  wire [18:0] NIOSII_data_master_address,                     //                 NIOSII_data_master.address
		output wire        NIOSII_data_master_waitrequest,                 //                                   .waitrequest
		input  wire [3:0]  NIOSII_data_master_byteenable,                  //                                   .byteenable
		input  wire        NIOSII_data_master_read,                        //                                   .read
		output wire [31:0] NIOSII_data_master_readdata,                    //                                   .readdata
		output wire        NIOSII_data_master_readdatavalid,               //                                   .readdatavalid
		input  wire        NIOSII_data_master_write,                       //                                   .write
		input  wire [31:0] NIOSII_data_master_writedata,                   //                                   .writedata
		input  wire        NIOSII_data_master_debugaccess,                 //                                   .debugaccess
		input  wire [18:0] NIOSII_instruction_master_address,              //          NIOSII_instruction_master.address
		output wire        NIOSII_instruction_master_waitrequest,          //                                   .waitrequest
		input  wire        NIOSII_instruction_master_read,                 //                                   .read
		output wire [31:0] NIOSII_instruction_master_readdata,             //                                   .readdata
		output wire        NIOSII_instruction_master_readdatavalid,        //                                   .readdatavalid
		output wire [1:0]  Audio_Video_avalon_av_config_slave_address,     // Audio_Video_avalon_av_config_slave.address
		output wire        Audio_Video_avalon_av_config_slave_write,       //                                   .write
		output wire        Audio_Video_avalon_av_config_slave_read,        //                                   .read
		input  wire [31:0] Audio_Video_avalon_av_config_slave_readdata,    //                                   .readdata
		output wire [31:0] Audio_Video_avalon_av_config_slave_writedata,   //                                   .writedata
		output wire [3:0]  Audio_Video_avalon_av_config_slave_byteenable,  //                                   .byteenable
		input  wire        Audio_Video_avalon_av_config_slave_waitrequest, //                                   .waitrequest
		output wire [0:0]  JTAG_avalon_jtag_slave_address,                 //             JTAG_avalon_jtag_slave.address
		output wire        JTAG_avalon_jtag_slave_write,                   //                                   .write
		output wire        JTAG_avalon_jtag_slave_read,                    //                                   .read
		input  wire [31:0] JTAG_avalon_jtag_slave_readdata,                //                                   .readdata
		output wire [31:0] JTAG_avalon_jtag_slave_writedata,               //                                   .writedata
		input  wire        JTAG_avalon_jtag_slave_waitrequest,             //                                   .waitrequest
		output wire        JTAG_avalon_jtag_slave_chipselect,              //                                   .chipselect
		output wire [1:0]  key_0_s1_address,                               //                           key_0_s1.address
		output wire        key_0_s1_write,                                 //                                   .write
		input  wire [31:0] key_0_s1_readdata,                              //                                   .readdata
		output wire [31:0] key_0_s1_writedata,                             //                                   .writedata
		output wire        key_0_s1_chipselect,                            //                                   .chipselect
		output wire [1:0]  key_1_s1_address,                               //                           key_1_s1.address
		output wire        key_1_s1_write,                                 //                                   .write
		input  wire [31:0] key_1_s1_readdata,                              //                                   .readdata
		output wire [31:0] key_1_s1_writedata,                             //                                   .writedata
		output wire        key_1_s1_chipselect,                            //                                   .chipselect
		output wire [1:0]  key_2_s1_address,                               //                           key_2_s1.address
		output wire        key_2_s1_write,                                 //                                   .write
		input  wire [31:0] key_2_s1_readdata,                              //                                   .readdata
		output wire [31:0] key_2_s1_writedata,                             //                                   .writedata
		output wire        key_2_s1_chipselect,                            //                                   .chipselect
		output wire [1:0]  key_3_s1_address,                               //                           key_3_s1.address
		output wire        key_3_s1_write,                                 //                                   .write
		input  wire [31:0] key_3_s1_readdata,                              //                                   .readdata
		output wire [31:0] key_3_s1_writedata,                             //                                   .writedata
		output wire        key_3_s1_chipselect,                            //                                   .chipselect
		output wire [8:0]  NIOSII_debug_mem_slave_address,                 //             NIOSII_debug_mem_slave.address
		output wire        NIOSII_debug_mem_slave_write,                   //                                   .write
		output wire        NIOSII_debug_mem_slave_read,                    //                                   .read
		input  wire [31:0] NIOSII_debug_mem_slave_readdata,                //                                   .readdata
		output wire [31:0] NIOSII_debug_mem_slave_writedata,               //                                   .writedata
		output wire [3:0]  NIOSII_debug_mem_slave_byteenable,              //                                   .byteenable
		input  wire        NIOSII_debug_mem_slave_waitrequest,             //                                   .waitrequest
		output wire        NIOSII_debug_mem_slave_debugaccess,             //                                   .debugaccess
		output wire [1:0]  red_leds_s1_address,                            //                        red_leds_s1.address
		output wire        red_leds_s1_write,                              //                                   .write
		input  wire [31:0] red_leds_s1_readdata,                           //                                   .readdata
		output wire [31:0] red_leds_s1_writedata,                          //                                   .writedata
		output wire        red_leds_s1_chipselect,                         //                                   .chipselect
		output wire [14:0] SDRAM_s1_address,                               //                           SDRAM_s1.address
		output wire        SDRAM_s1_write,                                 //                                   .write
		input  wire [31:0] SDRAM_s1_readdata,                              //                                   .readdata
		output wire [31:0] SDRAM_s1_writedata,                             //                                   .writedata
		output wire [3:0]  SDRAM_s1_byteenable,                            //                                   .byteenable
		output wire        SDRAM_s1_chipselect,                            //                                   .chipselect
		output wire        SDRAM_s1_clken,                                 //                                   .clken
		output wire [1:0]  seven_seg_0_s1_address,                         //                     seven_seg_0_s1.address
		output wire        seven_seg_0_s1_write,                           //                                   .write
		input  wire [31:0] seven_seg_0_s1_readdata,                        //                                   .readdata
		output wire [31:0] seven_seg_0_s1_writedata,                       //                                   .writedata
		output wire        seven_seg_0_s1_chipselect,                      //                                   .chipselect
		output wire [1:0]  seven_seg_1_s1_address,                         //                     seven_seg_1_s1.address
		output wire        seven_seg_1_s1_write,                           //                                   .write
		input  wire [31:0] seven_seg_1_s1_readdata,                        //                                   .readdata
		output wire [31:0] seven_seg_1_s1_writedata,                       //                                   .writedata
		output wire        seven_seg_1_s1_chipselect,                      //                                   .chipselect
		output wire [1:0]  seven_seg_2_s1_address,                         //                     seven_seg_2_s1.address
		output wire        seven_seg_2_s1_write,                           //                                   .write
		input  wire [31:0] seven_seg_2_s1_readdata,                        //                                   .readdata
		output wire [31:0] seven_seg_2_s1_writedata,                       //                                   .writedata
		output wire        seven_seg_2_s1_chipselect,                      //                                   .chipselect
		output wire [1:0]  seven_seg_3_s1_address,                         //                     seven_seg_3_s1.address
		output wire        seven_seg_3_s1_write,                           //                                   .write
		input  wire [31:0] seven_seg_3_s1_readdata,                        //                                   .readdata
		output wire [31:0] seven_seg_3_s1_writedata,                       //                                   .writedata
		output wire        seven_seg_3_s1_chipselect,                      //                                   .chipselect
		output wire [1:0]  seven_seg_4_s1_address,                         //                     seven_seg_4_s1.address
		output wire        seven_seg_4_s1_write,                           //                                   .write
		input  wire [31:0] seven_seg_4_s1_readdata,                        //                                   .readdata
		output wire [31:0] seven_seg_4_s1_writedata,                       //                                   .writedata
		output wire        seven_seg_4_s1_chipselect,                      //                                   .chipselect
		output wire [1:0]  seven_seg_5_s1_address,                         //                     seven_seg_5_s1.address
		output wire        seven_seg_5_s1_write,                           //                                   .write
		input  wire [31:0] seven_seg_5_s1_readdata,                        //                                   .readdata
		output wire [31:0] seven_seg_5_s1_writedata,                       //                                   .writedata
		output wire        seven_seg_5_s1_chipselect,                      //                                   .chipselect
		output wire [1:0]  switches_s1_address,                            //                        switches_s1.address
		input  wire [31:0] switches_s1_readdata,                           //                                   .readdata
		output wire [2:0]  Timer_s1_address,                               //                           Timer_s1.address
		output wire        Timer_s1_write,                                 //                                   .write
		input  wire [15:0] Timer_s1_readdata,                              //                                   .readdata
		output wire [15:0] Timer_s1_writedata,                             //                                   .writedata
		output wire        Timer_s1_chipselect                             //                                   .chipselect
	);

	wire         niosii_data_master_translator_avalon_universal_master_0_waitrequest;          // NIOSII_data_master_agent:av_waitrequest -> NIOSII_data_master_translator:uav_waitrequest
	wire  [31:0] niosii_data_master_translator_avalon_universal_master_0_readdata;             // NIOSII_data_master_agent:av_readdata -> NIOSII_data_master_translator:uav_readdata
	wire         niosii_data_master_translator_avalon_universal_master_0_debugaccess;          // NIOSII_data_master_translator:uav_debugaccess -> NIOSII_data_master_agent:av_debugaccess
	wire  [18:0] niosii_data_master_translator_avalon_universal_master_0_address;              // NIOSII_data_master_translator:uav_address -> NIOSII_data_master_agent:av_address
	wire         niosii_data_master_translator_avalon_universal_master_0_read;                 // NIOSII_data_master_translator:uav_read -> NIOSII_data_master_agent:av_read
	wire   [3:0] niosii_data_master_translator_avalon_universal_master_0_byteenable;           // NIOSII_data_master_translator:uav_byteenable -> NIOSII_data_master_agent:av_byteenable
	wire         niosii_data_master_translator_avalon_universal_master_0_readdatavalid;        // NIOSII_data_master_agent:av_readdatavalid -> NIOSII_data_master_translator:uav_readdatavalid
	wire         niosii_data_master_translator_avalon_universal_master_0_lock;                 // NIOSII_data_master_translator:uav_lock -> NIOSII_data_master_agent:av_lock
	wire         niosii_data_master_translator_avalon_universal_master_0_write;                // NIOSII_data_master_translator:uav_write -> NIOSII_data_master_agent:av_write
	wire  [31:0] niosii_data_master_translator_avalon_universal_master_0_writedata;            // NIOSII_data_master_translator:uav_writedata -> NIOSII_data_master_agent:av_writedata
	wire   [2:0] niosii_data_master_translator_avalon_universal_master_0_burstcount;           // NIOSII_data_master_translator:uav_burstcount -> NIOSII_data_master_agent:av_burstcount
	wire         niosii_instruction_master_translator_avalon_universal_master_0_waitrequest;   // NIOSII_instruction_master_agent:av_waitrequest -> NIOSII_instruction_master_translator:uav_waitrequest
	wire  [31:0] niosii_instruction_master_translator_avalon_universal_master_0_readdata;      // NIOSII_instruction_master_agent:av_readdata -> NIOSII_instruction_master_translator:uav_readdata
	wire         niosii_instruction_master_translator_avalon_universal_master_0_debugaccess;   // NIOSII_instruction_master_translator:uav_debugaccess -> NIOSII_instruction_master_agent:av_debugaccess
	wire  [18:0] niosii_instruction_master_translator_avalon_universal_master_0_address;       // NIOSII_instruction_master_translator:uav_address -> NIOSII_instruction_master_agent:av_address
	wire         niosii_instruction_master_translator_avalon_universal_master_0_read;          // NIOSII_instruction_master_translator:uav_read -> NIOSII_instruction_master_agent:av_read
	wire   [3:0] niosii_instruction_master_translator_avalon_universal_master_0_byteenable;    // NIOSII_instruction_master_translator:uav_byteenable -> NIOSII_instruction_master_agent:av_byteenable
	wire         niosii_instruction_master_translator_avalon_universal_master_0_readdatavalid; // NIOSII_instruction_master_agent:av_readdatavalid -> NIOSII_instruction_master_translator:uav_readdatavalid
	wire         niosii_instruction_master_translator_avalon_universal_master_0_lock;          // NIOSII_instruction_master_translator:uav_lock -> NIOSII_instruction_master_agent:av_lock
	wire         niosii_instruction_master_translator_avalon_universal_master_0_write;         // NIOSII_instruction_master_translator:uav_write -> NIOSII_instruction_master_agent:av_write
	wire  [31:0] niosii_instruction_master_translator_avalon_universal_master_0_writedata;     // NIOSII_instruction_master_translator:uav_writedata -> NIOSII_instruction_master_agent:av_writedata
	wire   [2:0] niosii_instruction_master_translator_avalon_universal_master_0_burstcount;    // NIOSII_instruction_master_translator:uav_burstcount -> NIOSII_instruction_master_agent:av_burstcount
	wire  [31:0] audio_video_avalon_av_config_slave_agent_m0_readdata;                         // Audio_Video_avalon_av_config_slave_translator:uav_readdata -> Audio_Video_avalon_av_config_slave_agent:m0_readdata
	wire         audio_video_avalon_av_config_slave_agent_m0_waitrequest;                      // Audio_Video_avalon_av_config_slave_translator:uav_waitrequest -> Audio_Video_avalon_av_config_slave_agent:m0_waitrequest
	wire         audio_video_avalon_av_config_slave_agent_m0_debugaccess;                      // Audio_Video_avalon_av_config_slave_agent:m0_debugaccess -> Audio_Video_avalon_av_config_slave_translator:uav_debugaccess
	wire  [18:0] audio_video_avalon_av_config_slave_agent_m0_address;                          // Audio_Video_avalon_av_config_slave_agent:m0_address -> Audio_Video_avalon_av_config_slave_translator:uav_address
	wire   [3:0] audio_video_avalon_av_config_slave_agent_m0_byteenable;                       // Audio_Video_avalon_av_config_slave_agent:m0_byteenable -> Audio_Video_avalon_av_config_slave_translator:uav_byteenable
	wire         audio_video_avalon_av_config_slave_agent_m0_read;                             // Audio_Video_avalon_av_config_slave_agent:m0_read -> Audio_Video_avalon_av_config_slave_translator:uav_read
	wire         audio_video_avalon_av_config_slave_agent_m0_readdatavalid;                    // Audio_Video_avalon_av_config_slave_translator:uav_readdatavalid -> Audio_Video_avalon_av_config_slave_agent:m0_readdatavalid
	wire         audio_video_avalon_av_config_slave_agent_m0_lock;                             // Audio_Video_avalon_av_config_slave_agent:m0_lock -> Audio_Video_avalon_av_config_slave_translator:uav_lock
	wire  [31:0] audio_video_avalon_av_config_slave_agent_m0_writedata;                        // Audio_Video_avalon_av_config_slave_agent:m0_writedata -> Audio_Video_avalon_av_config_slave_translator:uav_writedata
	wire         audio_video_avalon_av_config_slave_agent_m0_write;                            // Audio_Video_avalon_av_config_slave_agent:m0_write -> Audio_Video_avalon_av_config_slave_translator:uav_write
	wire   [2:0] audio_video_avalon_av_config_slave_agent_m0_burstcount;                       // Audio_Video_avalon_av_config_slave_agent:m0_burstcount -> Audio_Video_avalon_av_config_slave_translator:uav_burstcount
	wire         audio_video_avalon_av_config_slave_agent_rf_source_valid;                     // Audio_Video_avalon_av_config_slave_agent:rf_source_valid -> Audio_Video_avalon_av_config_slave_agent_rsp_fifo:in_valid
	wire  [99:0] audio_video_avalon_av_config_slave_agent_rf_source_data;                      // Audio_Video_avalon_av_config_slave_agent:rf_source_data -> Audio_Video_avalon_av_config_slave_agent_rsp_fifo:in_data
	wire         audio_video_avalon_av_config_slave_agent_rf_source_ready;                     // Audio_Video_avalon_av_config_slave_agent_rsp_fifo:in_ready -> Audio_Video_avalon_av_config_slave_agent:rf_source_ready
	wire         audio_video_avalon_av_config_slave_agent_rf_source_startofpacket;             // Audio_Video_avalon_av_config_slave_agent:rf_source_startofpacket -> Audio_Video_avalon_av_config_slave_agent_rsp_fifo:in_startofpacket
	wire         audio_video_avalon_av_config_slave_agent_rf_source_endofpacket;               // Audio_Video_avalon_av_config_slave_agent:rf_source_endofpacket -> Audio_Video_avalon_av_config_slave_agent_rsp_fifo:in_endofpacket
	wire         audio_video_avalon_av_config_slave_agent_rsp_fifo_out_valid;                  // Audio_Video_avalon_av_config_slave_agent_rsp_fifo:out_valid -> Audio_Video_avalon_av_config_slave_agent:rf_sink_valid
	wire  [99:0] audio_video_avalon_av_config_slave_agent_rsp_fifo_out_data;                   // Audio_Video_avalon_av_config_slave_agent_rsp_fifo:out_data -> Audio_Video_avalon_av_config_slave_agent:rf_sink_data
	wire         audio_video_avalon_av_config_slave_agent_rsp_fifo_out_ready;                  // Audio_Video_avalon_av_config_slave_agent:rf_sink_ready -> Audio_Video_avalon_av_config_slave_agent_rsp_fifo:out_ready
	wire         audio_video_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket;          // Audio_Video_avalon_av_config_slave_agent_rsp_fifo:out_startofpacket -> Audio_Video_avalon_av_config_slave_agent:rf_sink_startofpacket
	wire         audio_video_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket;            // Audio_Video_avalon_av_config_slave_agent_rsp_fifo:out_endofpacket -> Audio_Video_avalon_av_config_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_src_valid;                                                            // cmd_mux:src_valid -> Audio_Video_avalon_av_config_slave_agent:cp_valid
	wire  [98:0] cmd_mux_src_data;                                                             // cmd_mux:src_data -> Audio_Video_avalon_av_config_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                            // Audio_Video_avalon_av_config_slave_agent:cp_ready -> cmd_mux:src_ready
	wire  [16:0] cmd_mux_src_channel;                                                          // cmd_mux:src_channel -> Audio_Video_avalon_av_config_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                    // cmd_mux:src_startofpacket -> Audio_Video_avalon_av_config_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                      // cmd_mux:src_endofpacket -> Audio_Video_avalon_av_config_slave_agent:cp_endofpacket
	wire  [31:0] jtag_avalon_jtag_slave_agent_m0_readdata;                                     // JTAG_avalon_jtag_slave_translator:uav_readdata -> JTAG_avalon_jtag_slave_agent:m0_readdata
	wire         jtag_avalon_jtag_slave_agent_m0_waitrequest;                                  // JTAG_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_avalon_jtag_slave_agent:m0_waitrequest
	wire         jtag_avalon_jtag_slave_agent_m0_debugaccess;                                  // JTAG_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_avalon_jtag_slave_translator:uav_debugaccess
	wire  [18:0] jtag_avalon_jtag_slave_agent_m0_address;                                      // JTAG_avalon_jtag_slave_agent:m0_address -> JTAG_avalon_jtag_slave_translator:uav_address
	wire   [3:0] jtag_avalon_jtag_slave_agent_m0_byteenable;                                   // JTAG_avalon_jtag_slave_agent:m0_byteenable -> JTAG_avalon_jtag_slave_translator:uav_byteenable
	wire         jtag_avalon_jtag_slave_agent_m0_read;                                         // JTAG_avalon_jtag_slave_agent:m0_read -> JTAG_avalon_jtag_slave_translator:uav_read
	wire         jtag_avalon_jtag_slave_agent_m0_readdatavalid;                                // JTAG_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_avalon_jtag_slave_agent:m0_readdatavalid
	wire         jtag_avalon_jtag_slave_agent_m0_lock;                                         // JTAG_avalon_jtag_slave_agent:m0_lock -> JTAG_avalon_jtag_slave_translator:uav_lock
	wire  [31:0] jtag_avalon_jtag_slave_agent_m0_writedata;                                    // JTAG_avalon_jtag_slave_agent:m0_writedata -> JTAG_avalon_jtag_slave_translator:uav_writedata
	wire         jtag_avalon_jtag_slave_agent_m0_write;                                        // JTAG_avalon_jtag_slave_agent:m0_write -> JTAG_avalon_jtag_slave_translator:uav_write
	wire   [2:0] jtag_avalon_jtag_slave_agent_m0_burstcount;                                   // JTAG_avalon_jtag_slave_agent:m0_burstcount -> JTAG_avalon_jtag_slave_translator:uav_burstcount
	wire         jtag_avalon_jtag_slave_agent_rf_source_valid;                                 // JTAG_avalon_jtag_slave_agent:rf_source_valid -> JTAG_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [99:0] jtag_avalon_jtag_slave_agent_rf_source_data;                                  // JTAG_avalon_jtag_slave_agent:rf_source_data -> JTAG_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire         jtag_avalon_jtag_slave_agent_rf_source_ready;                                 // JTAG_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_avalon_jtag_slave_agent:rf_source_ready
	wire         jtag_avalon_jtag_slave_agent_rf_source_startofpacket;                         // JTAG_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire         jtag_avalon_jtag_slave_agent_rf_source_endofpacket;                           // JTAG_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire         jtag_avalon_jtag_slave_agent_rsp_fifo_out_valid;                              // JTAG_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_avalon_jtag_slave_agent:rf_sink_valid
	wire  [99:0] jtag_avalon_jtag_slave_agent_rsp_fifo_out_data;                               // JTAG_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_avalon_jtag_slave_agent:rf_sink_data
	wire         jtag_avalon_jtag_slave_agent_rsp_fifo_out_ready;                              // JTAG_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire         jtag_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                      // JTAG_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire         jtag_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                        // JTAG_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                        // cmd_mux_001:src_valid -> JTAG_avalon_jtag_slave_agent:cp_valid
	wire  [98:0] cmd_mux_001_src_data;                                                         // cmd_mux_001:src_data -> JTAG_avalon_jtag_slave_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                        // JTAG_avalon_jtag_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire  [16:0] cmd_mux_001_src_channel;                                                      // cmd_mux_001:src_channel -> JTAG_avalon_jtag_slave_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                                // cmd_mux_001:src_startofpacket -> JTAG_avalon_jtag_slave_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                  // cmd_mux_001:src_endofpacket -> JTAG_avalon_jtag_slave_agent:cp_endofpacket
	wire  [31:0] niosii_debug_mem_slave_agent_m0_readdata;                                     // NIOSII_debug_mem_slave_translator:uav_readdata -> NIOSII_debug_mem_slave_agent:m0_readdata
	wire         niosii_debug_mem_slave_agent_m0_waitrequest;                                  // NIOSII_debug_mem_slave_translator:uav_waitrequest -> NIOSII_debug_mem_slave_agent:m0_waitrequest
	wire         niosii_debug_mem_slave_agent_m0_debugaccess;                                  // NIOSII_debug_mem_slave_agent:m0_debugaccess -> NIOSII_debug_mem_slave_translator:uav_debugaccess
	wire  [18:0] niosii_debug_mem_slave_agent_m0_address;                                      // NIOSII_debug_mem_slave_agent:m0_address -> NIOSII_debug_mem_slave_translator:uav_address
	wire   [3:0] niosii_debug_mem_slave_agent_m0_byteenable;                                   // NIOSII_debug_mem_slave_agent:m0_byteenable -> NIOSII_debug_mem_slave_translator:uav_byteenable
	wire         niosii_debug_mem_slave_agent_m0_read;                                         // NIOSII_debug_mem_slave_agent:m0_read -> NIOSII_debug_mem_slave_translator:uav_read
	wire         niosii_debug_mem_slave_agent_m0_readdatavalid;                                // NIOSII_debug_mem_slave_translator:uav_readdatavalid -> NIOSII_debug_mem_slave_agent:m0_readdatavalid
	wire         niosii_debug_mem_slave_agent_m0_lock;                                         // NIOSII_debug_mem_slave_agent:m0_lock -> NIOSII_debug_mem_slave_translator:uav_lock
	wire  [31:0] niosii_debug_mem_slave_agent_m0_writedata;                                    // NIOSII_debug_mem_slave_agent:m0_writedata -> NIOSII_debug_mem_slave_translator:uav_writedata
	wire         niosii_debug_mem_slave_agent_m0_write;                                        // NIOSII_debug_mem_slave_agent:m0_write -> NIOSII_debug_mem_slave_translator:uav_write
	wire   [2:0] niosii_debug_mem_slave_agent_m0_burstcount;                                   // NIOSII_debug_mem_slave_agent:m0_burstcount -> NIOSII_debug_mem_slave_translator:uav_burstcount
	wire         niosii_debug_mem_slave_agent_rf_source_valid;                                 // NIOSII_debug_mem_slave_agent:rf_source_valid -> NIOSII_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [99:0] niosii_debug_mem_slave_agent_rf_source_data;                                  // NIOSII_debug_mem_slave_agent:rf_source_data -> NIOSII_debug_mem_slave_agent_rsp_fifo:in_data
	wire         niosii_debug_mem_slave_agent_rf_source_ready;                                 // NIOSII_debug_mem_slave_agent_rsp_fifo:in_ready -> NIOSII_debug_mem_slave_agent:rf_source_ready
	wire         niosii_debug_mem_slave_agent_rf_source_startofpacket;                         // NIOSII_debug_mem_slave_agent:rf_source_startofpacket -> NIOSII_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire         niosii_debug_mem_slave_agent_rf_source_endofpacket;                           // NIOSII_debug_mem_slave_agent:rf_source_endofpacket -> NIOSII_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire         niosii_debug_mem_slave_agent_rsp_fifo_out_valid;                              // NIOSII_debug_mem_slave_agent_rsp_fifo:out_valid -> NIOSII_debug_mem_slave_agent:rf_sink_valid
	wire  [99:0] niosii_debug_mem_slave_agent_rsp_fifo_out_data;                               // NIOSII_debug_mem_slave_agent_rsp_fifo:out_data -> NIOSII_debug_mem_slave_agent:rf_sink_data
	wire         niosii_debug_mem_slave_agent_rsp_fifo_out_ready;                              // NIOSII_debug_mem_slave_agent:rf_sink_ready -> NIOSII_debug_mem_slave_agent_rsp_fifo:out_ready
	wire         niosii_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // NIOSII_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> NIOSII_debug_mem_slave_agent:rf_sink_startofpacket
	wire         niosii_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // NIOSII_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> NIOSII_debug_mem_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                        // cmd_mux_002:src_valid -> NIOSII_debug_mem_slave_agent:cp_valid
	wire  [98:0] cmd_mux_002_src_data;                                                         // cmd_mux_002:src_data -> NIOSII_debug_mem_slave_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                        // NIOSII_debug_mem_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire  [16:0] cmd_mux_002_src_channel;                                                      // cmd_mux_002:src_channel -> NIOSII_debug_mem_slave_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                                // cmd_mux_002:src_startofpacket -> NIOSII_debug_mem_slave_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                                  // cmd_mux_002:src_endofpacket -> NIOSII_debug_mem_slave_agent:cp_endofpacket
	wire  [31:0] red_leds_s1_agent_m0_readdata;                                                // red_leds_s1_translator:uav_readdata -> red_leds_s1_agent:m0_readdata
	wire         red_leds_s1_agent_m0_waitrequest;                                             // red_leds_s1_translator:uav_waitrequest -> red_leds_s1_agent:m0_waitrequest
	wire         red_leds_s1_agent_m0_debugaccess;                                             // red_leds_s1_agent:m0_debugaccess -> red_leds_s1_translator:uav_debugaccess
	wire  [18:0] red_leds_s1_agent_m0_address;                                                 // red_leds_s1_agent:m0_address -> red_leds_s1_translator:uav_address
	wire   [3:0] red_leds_s1_agent_m0_byteenable;                                              // red_leds_s1_agent:m0_byteenable -> red_leds_s1_translator:uav_byteenable
	wire         red_leds_s1_agent_m0_read;                                                    // red_leds_s1_agent:m0_read -> red_leds_s1_translator:uav_read
	wire         red_leds_s1_agent_m0_readdatavalid;                                           // red_leds_s1_translator:uav_readdatavalid -> red_leds_s1_agent:m0_readdatavalid
	wire         red_leds_s1_agent_m0_lock;                                                    // red_leds_s1_agent:m0_lock -> red_leds_s1_translator:uav_lock
	wire  [31:0] red_leds_s1_agent_m0_writedata;                                               // red_leds_s1_agent:m0_writedata -> red_leds_s1_translator:uav_writedata
	wire         red_leds_s1_agent_m0_write;                                                   // red_leds_s1_agent:m0_write -> red_leds_s1_translator:uav_write
	wire   [2:0] red_leds_s1_agent_m0_burstcount;                                              // red_leds_s1_agent:m0_burstcount -> red_leds_s1_translator:uav_burstcount
	wire         red_leds_s1_agent_rf_source_valid;                                            // red_leds_s1_agent:rf_source_valid -> red_leds_s1_agent_rsp_fifo:in_valid
	wire  [99:0] red_leds_s1_agent_rf_source_data;                                             // red_leds_s1_agent:rf_source_data -> red_leds_s1_agent_rsp_fifo:in_data
	wire         red_leds_s1_agent_rf_source_ready;                                            // red_leds_s1_agent_rsp_fifo:in_ready -> red_leds_s1_agent:rf_source_ready
	wire         red_leds_s1_agent_rf_source_startofpacket;                                    // red_leds_s1_agent:rf_source_startofpacket -> red_leds_s1_agent_rsp_fifo:in_startofpacket
	wire         red_leds_s1_agent_rf_source_endofpacket;                                      // red_leds_s1_agent:rf_source_endofpacket -> red_leds_s1_agent_rsp_fifo:in_endofpacket
	wire         red_leds_s1_agent_rsp_fifo_out_valid;                                         // red_leds_s1_agent_rsp_fifo:out_valid -> red_leds_s1_agent:rf_sink_valid
	wire  [99:0] red_leds_s1_agent_rsp_fifo_out_data;                                          // red_leds_s1_agent_rsp_fifo:out_data -> red_leds_s1_agent:rf_sink_data
	wire         red_leds_s1_agent_rsp_fifo_out_ready;                                         // red_leds_s1_agent:rf_sink_ready -> red_leds_s1_agent_rsp_fifo:out_ready
	wire         red_leds_s1_agent_rsp_fifo_out_startofpacket;                                 // red_leds_s1_agent_rsp_fifo:out_startofpacket -> red_leds_s1_agent:rf_sink_startofpacket
	wire         red_leds_s1_agent_rsp_fifo_out_endofpacket;                                   // red_leds_s1_agent_rsp_fifo:out_endofpacket -> red_leds_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                        // cmd_mux_003:src_valid -> red_leds_s1_agent:cp_valid
	wire  [98:0] cmd_mux_003_src_data;                                                         // cmd_mux_003:src_data -> red_leds_s1_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                        // red_leds_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire  [16:0] cmd_mux_003_src_channel;                                                      // cmd_mux_003:src_channel -> red_leds_s1_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                                // cmd_mux_003:src_startofpacket -> red_leds_s1_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                                  // cmd_mux_003:src_endofpacket -> red_leds_s1_agent:cp_endofpacket
	wire  [31:0] switches_s1_agent_m0_readdata;                                                // switches_s1_translator:uav_readdata -> switches_s1_agent:m0_readdata
	wire         switches_s1_agent_m0_waitrequest;                                             // switches_s1_translator:uav_waitrequest -> switches_s1_agent:m0_waitrequest
	wire         switches_s1_agent_m0_debugaccess;                                             // switches_s1_agent:m0_debugaccess -> switches_s1_translator:uav_debugaccess
	wire  [18:0] switches_s1_agent_m0_address;                                                 // switches_s1_agent:m0_address -> switches_s1_translator:uav_address
	wire   [3:0] switches_s1_agent_m0_byteenable;                                              // switches_s1_agent:m0_byteenable -> switches_s1_translator:uav_byteenable
	wire         switches_s1_agent_m0_read;                                                    // switches_s1_agent:m0_read -> switches_s1_translator:uav_read
	wire         switches_s1_agent_m0_readdatavalid;                                           // switches_s1_translator:uav_readdatavalid -> switches_s1_agent:m0_readdatavalid
	wire         switches_s1_agent_m0_lock;                                                    // switches_s1_agent:m0_lock -> switches_s1_translator:uav_lock
	wire  [31:0] switches_s1_agent_m0_writedata;                                               // switches_s1_agent:m0_writedata -> switches_s1_translator:uav_writedata
	wire         switches_s1_agent_m0_write;                                                   // switches_s1_agent:m0_write -> switches_s1_translator:uav_write
	wire   [2:0] switches_s1_agent_m0_burstcount;                                              // switches_s1_agent:m0_burstcount -> switches_s1_translator:uav_burstcount
	wire         switches_s1_agent_rf_source_valid;                                            // switches_s1_agent:rf_source_valid -> switches_s1_agent_rsp_fifo:in_valid
	wire  [99:0] switches_s1_agent_rf_source_data;                                             // switches_s1_agent:rf_source_data -> switches_s1_agent_rsp_fifo:in_data
	wire         switches_s1_agent_rf_source_ready;                                            // switches_s1_agent_rsp_fifo:in_ready -> switches_s1_agent:rf_source_ready
	wire         switches_s1_agent_rf_source_startofpacket;                                    // switches_s1_agent:rf_source_startofpacket -> switches_s1_agent_rsp_fifo:in_startofpacket
	wire         switches_s1_agent_rf_source_endofpacket;                                      // switches_s1_agent:rf_source_endofpacket -> switches_s1_agent_rsp_fifo:in_endofpacket
	wire         switches_s1_agent_rsp_fifo_out_valid;                                         // switches_s1_agent_rsp_fifo:out_valid -> switches_s1_agent:rf_sink_valid
	wire  [99:0] switches_s1_agent_rsp_fifo_out_data;                                          // switches_s1_agent_rsp_fifo:out_data -> switches_s1_agent:rf_sink_data
	wire         switches_s1_agent_rsp_fifo_out_ready;                                         // switches_s1_agent:rf_sink_ready -> switches_s1_agent_rsp_fifo:out_ready
	wire         switches_s1_agent_rsp_fifo_out_startofpacket;                                 // switches_s1_agent_rsp_fifo:out_startofpacket -> switches_s1_agent:rf_sink_startofpacket
	wire         switches_s1_agent_rsp_fifo_out_endofpacket;                                   // switches_s1_agent_rsp_fifo:out_endofpacket -> switches_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_004_src_valid;                                                        // cmd_mux_004:src_valid -> switches_s1_agent:cp_valid
	wire  [98:0] cmd_mux_004_src_data;                                                         // cmd_mux_004:src_data -> switches_s1_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                        // switches_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire  [16:0] cmd_mux_004_src_channel;                                                      // cmd_mux_004:src_channel -> switches_s1_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                                // cmd_mux_004:src_startofpacket -> switches_s1_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                                  // cmd_mux_004:src_endofpacket -> switches_s1_agent:cp_endofpacket
	wire  [31:0] key_0_s1_agent_m0_readdata;                                                   // key_0_s1_translator:uav_readdata -> key_0_s1_agent:m0_readdata
	wire         key_0_s1_agent_m0_waitrequest;                                                // key_0_s1_translator:uav_waitrequest -> key_0_s1_agent:m0_waitrequest
	wire         key_0_s1_agent_m0_debugaccess;                                                // key_0_s1_agent:m0_debugaccess -> key_0_s1_translator:uav_debugaccess
	wire  [18:0] key_0_s1_agent_m0_address;                                                    // key_0_s1_agent:m0_address -> key_0_s1_translator:uav_address
	wire   [3:0] key_0_s1_agent_m0_byteenable;                                                 // key_0_s1_agent:m0_byteenable -> key_0_s1_translator:uav_byteenable
	wire         key_0_s1_agent_m0_read;                                                       // key_0_s1_agent:m0_read -> key_0_s1_translator:uav_read
	wire         key_0_s1_agent_m0_readdatavalid;                                              // key_0_s1_translator:uav_readdatavalid -> key_0_s1_agent:m0_readdatavalid
	wire         key_0_s1_agent_m0_lock;                                                       // key_0_s1_agent:m0_lock -> key_0_s1_translator:uav_lock
	wire  [31:0] key_0_s1_agent_m0_writedata;                                                  // key_0_s1_agent:m0_writedata -> key_0_s1_translator:uav_writedata
	wire         key_0_s1_agent_m0_write;                                                      // key_0_s1_agent:m0_write -> key_0_s1_translator:uav_write
	wire   [2:0] key_0_s1_agent_m0_burstcount;                                                 // key_0_s1_agent:m0_burstcount -> key_0_s1_translator:uav_burstcount
	wire         key_0_s1_agent_rf_source_valid;                                               // key_0_s1_agent:rf_source_valid -> key_0_s1_agent_rsp_fifo:in_valid
	wire  [99:0] key_0_s1_agent_rf_source_data;                                                // key_0_s1_agent:rf_source_data -> key_0_s1_agent_rsp_fifo:in_data
	wire         key_0_s1_agent_rf_source_ready;                                               // key_0_s1_agent_rsp_fifo:in_ready -> key_0_s1_agent:rf_source_ready
	wire         key_0_s1_agent_rf_source_startofpacket;                                       // key_0_s1_agent:rf_source_startofpacket -> key_0_s1_agent_rsp_fifo:in_startofpacket
	wire         key_0_s1_agent_rf_source_endofpacket;                                         // key_0_s1_agent:rf_source_endofpacket -> key_0_s1_agent_rsp_fifo:in_endofpacket
	wire         key_0_s1_agent_rsp_fifo_out_valid;                                            // key_0_s1_agent_rsp_fifo:out_valid -> key_0_s1_agent:rf_sink_valid
	wire  [99:0] key_0_s1_agent_rsp_fifo_out_data;                                             // key_0_s1_agent_rsp_fifo:out_data -> key_0_s1_agent:rf_sink_data
	wire         key_0_s1_agent_rsp_fifo_out_ready;                                            // key_0_s1_agent:rf_sink_ready -> key_0_s1_agent_rsp_fifo:out_ready
	wire         key_0_s1_agent_rsp_fifo_out_startofpacket;                                    // key_0_s1_agent_rsp_fifo:out_startofpacket -> key_0_s1_agent:rf_sink_startofpacket
	wire         key_0_s1_agent_rsp_fifo_out_endofpacket;                                      // key_0_s1_agent_rsp_fifo:out_endofpacket -> key_0_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_005_src_valid;                                                        // cmd_mux_005:src_valid -> key_0_s1_agent:cp_valid
	wire  [98:0] cmd_mux_005_src_data;                                                         // cmd_mux_005:src_data -> key_0_s1_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                        // key_0_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire  [16:0] cmd_mux_005_src_channel;                                                      // cmd_mux_005:src_channel -> key_0_s1_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                                // cmd_mux_005:src_startofpacket -> key_0_s1_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                                  // cmd_mux_005:src_endofpacket -> key_0_s1_agent:cp_endofpacket
	wire  [31:0] seven_seg_0_s1_agent_m0_readdata;                                             // seven_seg_0_s1_translator:uav_readdata -> seven_seg_0_s1_agent:m0_readdata
	wire         seven_seg_0_s1_agent_m0_waitrequest;                                          // seven_seg_0_s1_translator:uav_waitrequest -> seven_seg_0_s1_agent:m0_waitrequest
	wire         seven_seg_0_s1_agent_m0_debugaccess;                                          // seven_seg_0_s1_agent:m0_debugaccess -> seven_seg_0_s1_translator:uav_debugaccess
	wire  [18:0] seven_seg_0_s1_agent_m0_address;                                              // seven_seg_0_s1_agent:m0_address -> seven_seg_0_s1_translator:uav_address
	wire   [3:0] seven_seg_0_s1_agent_m0_byteenable;                                           // seven_seg_0_s1_agent:m0_byteenable -> seven_seg_0_s1_translator:uav_byteenable
	wire         seven_seg_0_s1_agent_m0_read;                                                 // seven_seg_0_s1_agent:m0_read -> seven_seg_0_s1_translator:uav_read
	wire         seven_seg_0_s1_agent_m0_readdatavalid;                                        // seven_seg_0_s1_translator:uav_readdatavalid -> seven_seg_0_s1_agent:m0_readdatavalid
	wire         seven_seg_0_s1_agent_m0_lock;                                                 // seven_seg_0_s1_agent:m0_lock -> seven_seg_0_s1_translator:uav_lock
	wire  [31:0] seven_seg_0_s1_agent_m0_writedata;                                            // seven_seg_0_s1_agent:m0_writedata -> seven_seg_0_s1_translator:uav_writedata
	wire         seven_seg_0_s1_agent_m0_write;                                                // seven_seg_0_s1_agent:m0_write -> seven_seg_0_s1_translator:uav_write
	wire   [2:0] seven_seg_0_s1_agent_m0_burstcount;                                           // seven_seg_0_s1_agent:m0_burstcount -> seven_seg_0_s1_translator:uav_burstcount
	wire         seven_seg_0_s1_agent_rf_source_valid;                                         // seven_seg_0_s1_agent:rf_source_valid -> seven_seg_0_s1_agent_rsp_fifo:in_valid
	wire  [99:0] seven_seg_0_s1_agent_rf_source_data;                                          // seven_seg_0_s1_agent:rf_source_data -> seven_seg_0_s1_agent_rsp_fifo:in_data
	wire         seven_seg_0_s1_agent_rf_source_ready;                                         // seven_seg_0_s1_agent_rsp_fifo:in_ready -> seven_seg_0_s1_agent:rf_source_ready
	wire         seven_seg_0_s1_agent_rf_source_startofpacket;                                 // seven_seg_0_s1_agent:rf_source_startofpacket -> seven_seg_0_s1_agent_rsp_fifo:in_startofpacket
	wire         seven_seg_0_s1_agent_rf_source_endofpacket;                                   // seven_seg_0_s1_agent:rf_source_endofpacket -> seven_seg_0_s1_agent_rsp_fifo:in_endofpacket
	wire         seven_seg_0_s1_agent_rsp_fifo_out_valid;                                      // seven_seg_0_s1_agent_rsp_fifo:out_valid -> seven_seg_0_s1_agent:rf_sink_valid
	wire  [99:0] seven_seg_0_s1_agent_rsp_fifo_out_data;                                       // seven_seg_0_s1_agent_rsp_fifo:out_data -> seven_seg_0_s1_agent:rf_sink_data
	wire         seven_seg_0_s1_agent_rsp_fifo_out_ready;                                      // seven_seg_0_s1_agent:rf_sink_ready -> seven_seg_0_s1_agent_rsp_fifo:out_ready
	wire         seven_seg_0_s1_agent_rsp_fifo_out_startofpacket;                              // seven_seg_0_s1_agent_rsp_fifo:out_startofpacket -> seven_seg_0_s1_agent:rf_sink_startofpacket
	wire         seven_seg_0_s1_agent_rsp_fifo_out_endofpacket;                                // seven_seg_0_s1_agent_rsp_fifo:out_endofpacket -> seven_seg_0_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_006_src_valid;                                                        // cmd_mux_006:src_valid -> seven_seg_0_s1_agent:cp_valid
	wire  [98:0] cmd_mux_006_src_data;                                                         // cmd_mux_006:src_data -> seven_seg_0_s1_agent:cp_data
	wire         cmd_mux_006_src_ready;                                                        // seven_seg_0_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire  [16:0] cmd_mux_006_src_channel;                                                      // cmd_mux_006:src_channel -> seven_seg_0_s1_agent:cp_channel
	wire         cmd_mux_006_src_startofpacket;                                                // cmd_mux_006:src_startofpacket -> seven_seg_0_s1_agent:cp_startofpacket
	wire         cmd_mux_006_src_endofpacket;                                                  // cmd_mux_006:src_endofpacket -> seven_seg_0_s1_agent:cp_endofpacket
	wire  [31:0] seven_seg_1_s1_agent_m0_readdata;                                             // seven_seg_1_s1_translator:uav_readdata -> seven_seg_1_s1_agent:m0_readdata
	wire         seven_seg_1_s1_agent_m0_waitrequest;                                          // seven_seg_1_s1_translator:uav_waitrequest -> seven_seg_1_s1_agent:m0_waitrequest
	wire         seven_seg_1_s1_agent_m0_debugaccess;                                          // seven_seg_1_s1_agent:m0_debugaccess -> seven_seg_1_s1_translator:uav_debugaccess
	wire  [18:0] seven_seg_1_s1_agent_m0_address;                                              // seven_seg_1_s1_agent:m0_address -> seven_seg_1_s1_translator:uav_address
	wire   [3:0] seven_seg_1_s1_agent_m0_byteenable;                                           // seven_seg_1_s1_agent:m0_byteenable -> seven_seg_1_s1_translator:uav_byteenable
	wire         seven_seg_1_s1_agent_m0_read;                                                 // seven_seg_1_s1_agent:m0_read -> seven_seg_1_s1_translator:uav_read
	wire         seven_seg_1_s1_agent_m0_readdatavalid;                                        // seven_seg_1_s1_translator:uav_readdatavalid -> seven_seg_1_s1_agent:m0_readdatavalid
	wire         seven_seg_1_s1_agent_m0_lock;                                                 // seven_seg_1_s1_agent:m0_lock -> seven_seg_1_s1_translator:uav_lock
	wire  [31:0] seven_seg_1_s1_agent_m0_writedata;                                            // seven_seg_1_s1_agent:m0_writedata -> seven_seg_1_s1_translator:uav_writedata
	wire         seven_seg_1_s1_agent_m0_write;                                                // seven_seg_1_s1_agent:m0_write -> seven_seg_1_s1_translator:uav_write
	wire   [2:0] seven_seg_1_s1_agent_m0_burstcount;                                           // seven_seg_1_s1_agent:m0_burstcount -> seven_seg_1_s1_translator:uav_burstcount
	wire         seven_seg_1_s1_agent_rf_source_valid;                                         // seven_seg_1_s1_agent:rf_source_valid -> seven_seg_1_s1_agent_rsp_fifo:in_valid
	wire  [99:0] seven_seg_1_s1_agent_rf_source_data;                                          // seven_seg_1_s1_agent:rf_source_data -> seven_seg_1_s1_agent_rsp_fifo:in_data
	wire         seven_seg_1_s1_agent_rf_source_ready;                                         // seven_seg_1_s1_agent_rsp_fifo:in_ready -> seven_seg_1_s1_agent:rf_source_ready
	wire         seven_seg_1_s1_agent_rf_source_startofpacket;                                 // seven_seg_1_s1_agent:rf_source_startofpacket -> seven_seg_1_s1_agent_rsp_fifo:in_startofpacket
	wire         seven_seg_1_s1_agent_rf_source_endofpacket;                                   // seven_seg_1_s1_agent:rf_source_endofpacket -> seven_seg_1_s1_agent_rsp_fifo:in_endofpacket
	wire         seven_seg_1_s1_agent_rsp_fifo_out_valid;                                      // seven_seg_1_s1_agent_rsp_fifo:out_valid -> seven_seg_1_s1_agent:rf_sink_valid
	wire  [99:0] seven_seg_1_s1_agent_rsp_fifo_out_data;                                       // seven_seg_1_s1_agent_rsp_fifo:out_data -> seven_seg_1_s1_agent:rf_sink_data
	wire         seven_seg_1_s1_agent_rsp_fifo_out_ready;                                      // seven_seg_1_s1_agent:rf_sink_ready -> seven_seg_1_s1_agent_rsp_fifo:out_ready
	wire         seven_seg_1_s1_agent_rsp_fifo_out_startofpacket;                              // seven_seg_1_s1_agent_rsp_fifo:out_startofpacket -> seven_seg_1_s1_agent:rf_sink_startofpacket
	wire         seven_seg_1_s1_agent_rsp_fifo_out_endofpacket;                                // seven_seg_1_s1_agent_rsp_fifo:out_endofpacket -> seven_seg_1_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_007_src_valid;                                                        // cmd_mux_007:src_valid -> seven_seg_1_s1_agent:cp_valid
	wire  [98:0] cmd_mux_007_src_data;                                                         // cmd_mux_007:src_data -> seven_seg_1_s1_agent:cp_data
	wire         cmd_mux_007_src_ready;                                                        // seven_seg_1_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire  [16:0] cmd_mux_007_src_channel;                                                      // cmd_mux_007:src_channel -> seven_seg_1_s1_agent:cp_channel
	wire         cmd_mux_007_src_startofpacket;                                                // cmd_mux_007:src_startofpacket -> seven_seg_1_s1_agent:cp_startofpacket
	wire         cmd_mux_007_src_endofpacket;                                                  // cmd_mux_007:src_endofpacket -> seven_seg_1_s1_agent:cp_endofpacket
	wire  [31:0] seven_seg_2_s1_agent_m0_readdata;                                             // seven_seg_2_s1_translator:uav_readdata -> seven_seg_2_s1_agent:m0_readdata
	wire         seven_seg_2_s1_agent_m0_waitrequest;                                          // seven_seg_2_s1_translator:uav_waitrequest -> seven_seg_2_s1_agent:m0_waitrequest
	wire         seven_seg_2_s1_agent_m0_debugaccess;                                          // seven_seg_2_s1_agent:m0_debugaccess -> seven_seg_2_s1_translator:uav_debugaccess
	wire  [18:0] seven_seg_2_s1_agent_m0_address;                                              // seven_seg_2_s1_agent:m0_address -> seven_seg_2_s1_translator:uav_address
	wire   [3:0] seven_seg_2_s1_agent_m0_byteenable;                                           // seven_seg_2_s1_agent:m0_byteenable -> seven_seg_2_s1_translator:uav_byteenable
	wire         seven_seg_2_s1_agent_m0_read;                                                 // seven_seg_2_s1_agent:m0_read -> seven_seg_2_s1_translator:uav_read
	wire         seven_seg_2_s1_agent_m0_readdatavalid;                                        // seven_seg_2_s1_translator:uav_readdatavalid -> seven_seg_2_s1_agent:m0_readdatavalid
	wire         seven_seg_2_s1_agent_m0_lock;                                                 // seven_seg_2_s1_agent:m0_lock -> seven_seg_2_s1_translator:uav_lock
	wire  [31:0] seven_seg_2_s1_agent_m0_writedata;                                            // seven_seg_2_s1_agent:m0_writedata -> seven_seg_2_s1_translator:uav_writedata
	wire         seven_seg_2_s1_agent_m0_write;                                                // seven_seg_2_s1_agent:m0_write -> seven_seg_2_s1_translator:uav_write
	wire   [2:0] seven_seg_2_s1_agent_m0_burstcount;                                           // seven_seg_2_s1_agent:m0_burstcount -> seven_seg_2_s1_translator:uav_burstcount
	wire         seven_seg_2_s1_agent_rf_source_valid;                                         // seven_seg_2_s1_agent:rf_source_valid -> seven_seg_2_s1_agent_rsp_fifo:in_valid
	wire  [99:0] seven_seg_2_s1_agent_rf_source_data;                                          // seven_seg_2_s1_agent:rf_source_data -> seven_seg_2_s1_agent_rsp_fifo:in_data
	wire         seven_seg_2_s1_agent_rf_source_ready;                                         // seven_seg_2_s1_agent_rsp_fifo:in_ready -> seven_seg_2_s1_agent:rf_source_ready
	wire         seven_seg_2_s1_agent_rf_source_startofpacket;                                 // seven_seg_2_s1_agent:rf_source_startofpacket -> seven_seg_2_s1_agent_rsp_fifo:in_startofpacket
	wire         seven_seg_2_s1_agent_rf_source_endofpacket;                                   // seven_seg_2_s1_agent:rf_source_endofpacket -> seven_seg_2_s1_agent_rsp_fifo:in_endofpacket
	wire         seven_seg_2_s1_agent_rsp_fifo_out_valid;                                      // seven_seg_2_s1_agent_rsp_fifo:out_valid -> seven_seg_2_s1_agent:rf_sink_valid
	wire  [99:0] seven_seg_2_s1_agent_rsp_fifo_out_data;                                       // seven_seg_2_s1_agent_rsp_fifo:out_data -> seven_seg_2_s1_agent:rf_sink_data
	wire         seven_seg_2_s1_agent_rsp_fifo_out_ready;                                      // seven_seg_2_s1_agent:rf_sink_ready -> seven_seg_2_s1_agent_rsp_fifo:out_ready
	wire         seven_seg_2_s1_agent_rsp_fifo_out_startofpacket;                              // seven_seg_2_s1_agent_rsp_fifo:out_startofpacket -> seven_seg_2_s1_agent:rf_sink_startofpacket
	wire         seven_seg_2_s1_agent_rsp_fifo_out_endofpacket;                                // seven_seg_2_s1_agent_rsp_fifo:out_endofpacket -> seven_seg_2_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_008_src_valid;                                                        // cmd_mux_008:src_valid -> seven_seg_2_s1_agent:cp_valid
	wire  [98:0] cmd_mux_008_src_data;                                                         // cmd_mux_008:src_data -> seven_seg_2_s1_agent:cp_data
	wire         cmd_mux_008_src_ready;                                                        // seven_seg_2_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire  [16:0] cmd_mux_008_src_channel;                                                      // cmd_mux_008:src_channel -> seven_seg_2_s1_agent:cp_channel
	wire         cmd_mux_008_src_startofpacket;                                                // cmd_mux_008:src_startofpacket -> seven_seg_2_s1_agent:cp_startofpacket
	wire         cmd_mux_008_src_endofpacket;                                                  // cmd_mux_008:src_endofpacket -> seven_seg_2_s1_agent:cp_endofpacket
	wire  [31:0] seven_seg_3_s1_agent_m0_readdata;                                             // seven_seg_3_s1_translator:uav_readdata -> seven_seg_3_s1_agent:m0_readdata
	wire         seven_seg_3_s1_agent_m0_waitrequest;                                          // seven_seg_3_s1_translator:uav_waitrequest -> seven_seg_3_s1_agent:m0_waitrequest
	wire         seven_seg_3_s1_agent_m0_debugaccess;                                          // seven_seg_3_s1_agent:m0_debugaccess -> seven_seg_3_s1_translator:uav_debugaccess
	wire  [18:0] seven_seg_3_s1_agent_m0_address;                                              // seven_seg_3_s1_agent:m0_address -> seven_seg_3_s1_translator:uav_address
	wire   [3:0] seven_seg_3_s1_agent_m0_byteenable;                                           // seven_seg_3_s1_agent:m0_byteenable -> seven_seg_3_s1_translator:uav_byteenable
	wire         seven_seg_3_s1_agent_m0_read;                                                 // seven_seg_3_s1_agent:m0_read -> seven_seg_3_s1_translator:uav_read
	wire         seven_seg_3_s1_agent_m0_readdatavalid;                                        // seven_seg_3_s1_translator:uav_readdatavalid -> seven_seg_3_s1_agent:m0_readdatavalid
	wire         seven_seg_3_s1_agent_m0_lock;                                                 // seven_seg_3_s1_agent:m0_lock -> seven_seg_3_s1_translator:uav_lock
	wire  [31:0] seven_seg_3_s1_agent_m0_writedata;                                            // seven_seg_3_s1_agent:m0_writedata -> seven_seg_3_s1_translator:uav_writedata
	wire         seven_seg_3_s1_agent_m0_write;                                                // seven_seg_3_s1_agent:m0_write -> seven_seg_3_s1_translator:uav_write
	wire   [2:0] seven_seg_3_s1_agent_m0_burstcount;                                           // seven_seg_3_s1_agent:m0_burstcount -> seven_seg_3_s1_translator:uav_burstcount
	wire         seven_seg_3_s1_agent_rf_source_valid;                                         // seven_seg_3_s1_agent:rf_source_valid -> seven_seg_3_s1_agent_rsp_fifo:in_valid
	wire  [99:0] seven_seg_3_s1_agent_rf_source_data;                                          // seven_seg_3_s1_agent:rf_source_data -> seven_seg_3_s1_agent_rsp_fifo:in_data
	wire         seven_seg_3_s1_agent_rf_source_ready;                                         // seven_seg_3_s1_agent_rsp_fifo:in_ready -> seven_seg_3_s1_agent:rf_source_ready
	wire         seven_seg_3_s1_agent_rf_source_startofpacket;                                 // seven_seg_3_s1_agent:rf_source_startofpacket -> seven_seg_3_s1_agent_rsp_fifo:in_startofpacket
	wire         seven_seg_3_s1_agent_rf_source_endofpacket;                                   // seven_seg_3_s1_agent:rf_source_endofpacket -> seven_seg_3_s1_agent_rsp_fifo:in_endofpacket
	wire         seven_seg_3_s1_agent_rsp_fifo_out_valid;                                      // seven_seg_3_s1_agent_rsp_fifo:out_valid -> seven_seg_3_s1_agent:rf_sink_valid
	wire  [99:0] seven_seg_3_s1_agent_rsp_fifo_out_data;                                       // seven_seg_3_s1_agent_rsp_fifo:out_data -> seven_seg_3_s1_agent:rf_sink_data
	wire         seven_seg_3_s1_agent_rsp_fifo_out_ready;                                      // seven_seg_3_s1_agent:rf_sink_ready -> seven_seg_3_s1_agent_rsp_fifo:out_ready
	wire         seven_seg_3_s1_agent_rsp_fifo_out_startofpacket;                              // seven_seg_3_s1_agent_rsp_fifo:out_startofpacket -> seven_seg_3_s1_agent:rf_sink_startofpacket
	wire         seven_seg_3_s1_agent_rsp_fifo_out_endofpacket;                                // seven_seg_3_s1_agent_rsp_fifo:out_endofpacket -> seven_seg_3_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_009_src_valid;                                                        // cmd_mux_009:src_valid -> seven_seg_3_s1_agent:cp_valid
	wire  [98:0] cmd_mux_009_src_data;                                                         // cmd_mux_009:src_data -> seven_seg_3_s1_agent:cp_data
	wire         cmd_mux_009_src_ready;                                                        // seven_seg_3_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire  [16:0] cmd_mux_009_src_channel;                                                      // cmd_mux_009:src_channel -> seven_seg_3_s1_agent:cp_channel
	wire         cmd_mux_009_src_startofpacket;                                                // cmd_mux_009:src_startofpacket -> seven_seg_3_s1_agent:cp_startofpacket
	wire         cmd_mux_009_src_endofpacket;                                                  // cmd_mux_009:src_endofpacket -> seven_seg_3_s1_agent:cp_endofpacket
	wire  [31:0] seven_seg_4_s1_agent_m0_readdata;                                             // seven_seg_4_s1_translator:uav_readdata -> seven_seg_4_s1_agent:m0_readdata
	wire         seven_seg_4_s1_agent_m0_waitrequest;                                          // seven_seg_4_s1_translator:uav_waitrequest -> seven_seg_4_s1_agent:m0_waitrequest
	wire         seven_seg_4_s1_agent_m0_debugaccess;                                          // seven_seg_4_s1_agent:m0_debugaccess -> seven_seg_4_s1_translator:uav_debugaccess
	wire  [18:0] seven_seg_4_s1_agent_m0_address;                                              // seven_seg_4_s1_agent:m0_address -> seven_seg_4_s1_translator:uav_address
	wire   [3:0] seven_seg_4_s1_agent_m0_byteenable;                                           // seven_seg_4_s1_agent:m0_byteenable -> seven_seg_4_s1_translator:uav_byteenable
	wire         seven_seg_4_s1_agent_m0_read;                                                 // seven_seg_4_s1_agent:m0_read -> seven_seg_4_s1_translator:uav_read
	wire         seven_seg_4_s1_agent_m0_readdatavalid;                                        // seven_seg_4_s1_translator:uav_readdatavalid -> seven_seg_4_s1_agent:m0_readdatavalid
	wire         seven_seg_4_s1_agent_m0_lock;                                                 // seven_seg_4_s1_agent:m0_lock -> seven_seg_4_s1_translator:uav_lock
	wire  [31:0] seven_seg_4_s1_agent_m0_writedata;                                            // seven_seg_4_s1_agent:m0_writedata -> seven_seg_4_s1_translator:uav_writedata
	wire         seven_seg_4_s1_agent_m0_write;                                                // seven_seg_4_s1_agent:m0_write -> seven_seg_4_s1_translator:uav_write
	wire   [2:0] seven_seg_4_s1_agent_m0_burstcount;                                           // seven_seg_4_s1_agent:m0_burstcount -> seven_seg_4_s1_translator:uav_burstcount
	wire         seven_seg_4_s1_agent_rf_source_valid;                                         // seven_seg_4_s1_agent:rf_source_valid -> seven_seg_4_s1_agent_rsp_fifo:in_valid
	wire  [99:0] seven_seg_4_s1_agent_rf_source_data;                                          // seven_seg_4_s1_agent:rf_source_data -> seven_seg_4_s1_agent_rsp_fifo:in_data
	wire         seven_seg_4_s1_agent_rf_source_ready;                                         // seven_seg_4_s1_agent_rsp_fifo:in_ready -> seven_seg_4_s1_agent:rf_source_ready
	wire         seven_seg_4_s1_agent_rf_source_startofpacket;                                 // seven_seg_4_s1_agent:rf_source_startofpacket -> seven_seg_4_s1_agent_rsp_fifo:in_startofpacket
	wire         seven_seg_4_s1_agent_rf_source_endofpacket;                                   // seven_seg_4_s1_agent:rf_source_endofpacket -> seven_seg_4_s1_agent_rsp_fifo:in_endofpacket
	wire         seven_seg_4_s1_agent_rsp_fifo_out_valid;                                      // seven_seg_4_s1_agent_rsp_fifo:out_valid -> seven_seg_4_s1_agent:rf_sink_valid
	wire  [99:0] seven_seg_4_s1_agent_rsp_fifo_out_data;                                       // seven_seg_4_s1_agent_rsp_fifo:out_data -> seven_seg_4_s1_agent:rf_sink_data
	wire         seven_seg_4_s1_agent_rsp_fifo_out_ready;                                      // seven_seg_4_s1_agent:rf_sink_ready -> seven_seg_4_s1_agent_rsp_fifo:out_ready
	wire         seven_seg_4_s1_agent_rsp_fifo_out_startofpacket;                              // seven_seg_4_s1_agent_rsp_fifo:out_startofpacket -> seven_seg_4_s1_agent:rf_sink_startofpacket
	wire         seven_seg_4_s1_agent_rsp_fifo_out_endofpacket;                                // seven_seg_4_s1_agent_rsp_fifo:out_endofpacket -> seven_seg_4_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_010_src_valid;                                                        // cmd_mux_010:src_valid -> seven_seg_4_s1_agent:cp_valid
	wire  [98:0] cmd_mux_010_src_data;                                                         // cmd_mux_010:src_data -> seven_seg_4_s1_agent:cp_data
	wire         cmd_mux_010_src_ready;                                                        // seven_seg_4_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire  [16:0] cmd_mux_010_src_channel;                                                      // cmd_mux_010:src_channel -> seven_seg_4_s1_agent:cp_channel
	wire         cmd_mux_010_src_startofpacket;                                                // cmd_mux_010:src_startofpacket -> seven_seg_4_s1_agent:cp_startofpacket
	wire         cmd_mux_010_src_endofpacket;                                                  // cmd_mux_010:src_endofpacket -> seven_seg_4_s1_agent:cp_endofpacket
	wire  [31:0] seven_seg_5_s1_agent_m0_readdata;                                             // seven_seg_5_s1_translator:uav_readdata -> seven_seg_5_s1_agent:m0_readdata
	wire         seven_seg_5_s1_agent_m0_waitrequest;                                          // seven_seg_5_s1_translator:uav_waitrequest -> seven_seg_5_s1_agent:m0_waitrequest
	wire         seven_seg_5_s1_agent_m0_debugaccess;                                          // seven_seg_5_s1_agent:m0_debugaccess -> seven_seg_5_s1_translator:uav_debugaccess
	wire  [18:0] seven_seg_5_s1_agent_m0_address;                                              // seven_seg_5_s1_agent:m0_address -> seven_seg_5_s1_translator:uav_address
	wire   [3:0] seven_seg_5_s1_agent_m0_byteenable;                                           // seven_seg_5_s1_agent:m0_byteenable -> seven_seg_5_s1_translator:uav_byteenable
	wire         seven_seg_5_s1_agent_m0_read;                                                 // seven_seg_5_s1_agent:m0_read -> seven_seg_5_s1_translator:uav_read
	wire         seven_seg_5_s1_agent_m0_readdatavalid;                                        // seven_seg_5_s1_translator:uav_readdatavalid -> seven_seg_5_s1_agent:m0_readdatavalid
	wire         seven_seg_5_s1_agent_m0_lock;                                                 // seven_seg_5_s1_agent:m0_lock -> seven_seg_5_s1_translator:uav_lock
	wire  [31:0] seven_seg_5_s1_agent_m0_writedata;                                            // seven_seg_5_s1_agent:m0_writedata -> seven_seg_5_s1_translator:uav_writedata
	wire         seven_seg_5_s1_agent_m0_write;                                                // seven_seg_5_s1_agent:m0_write -> seven_seg_5_s1_translator:uav_write
	wire   [2:0] seven_seg_5_s1_agent_m0_burstcount;                                           // seven_seg_5_s1_agent:m0_burstcount -> seven_seg_5_s1_translator:uav_burstcount
	wire         seven_seg_5_s1_agent_rf_source_valid;                                         // seven_seg_5_s1_agent:rf_source_valid -> seven_seg_5_s1_agent_rsp_fifo:in_valid
	wire  [99:0] seven_seg_5_s1_agent_rf_source_data;                                          // seven_seg_5_s1_agent:rf_source_data -> seven_seg_5_s1_agent_rsp_fifo:in_data
	wire         seven_seg_5_s1_agent_rf_source_ready;                                         // seven_seg_5_s1_agent_rsp_fifo:in_ready -> seven_seg_5_s1_agent:rf_source_ready
	wire         seven_seg_5_s1_agent_rf_source_startofpacket;                                 // seven_seg_5_s1_agent:rf_source_startofpacket -> seven_seg_5_s1_agent_rsp_fifo:in_startofpacket
	wire         seven_seg_5_s1_agent_rf_source_endofpacket;                                   // seven_seg_5_s1_agent:rf_source_endofpacket -> seven_seg_5_s1_agent_rsp_fifo:in_endofpacket
	wire         seven_seg_5_s1_agent_rsp_fifo_out_valid;                                      // seven_seg_5_s1_agent_rsp_fifo:out_valid -> seven_seg_5_s1_agent:rf_sink_valid
	wire  [99:0] seven_seg_5_s1_agent_rsp_fifo_out_data;                                       // seven_seg_5_s1_agent_rsp_fifo:out_data -> seven_seg_5_s1_agent:rf_sink_data
	wire         seven_seg_5_s1_agent_rsp_fifo_out_ready;                                      // seven_seg_5_s1_agent:rf_sink_ready -> seven_seg_5_s1_agent_rsp_fifo:out_ready
	wire         seven_seg_5_s1_agent_rsp_fifo_out_startofpacket;                              // seven_seg_5_s1_agent_rsp_fifo:out_startofpacket -> seven_seg_5_s1_agent:rf_sink_startofpacket
	wire         seven_seg_5_s1_agent_rsp_fifo_out_endofpacket;                                // seven_seg_5_s1_agent_rsp_fifo:out_endofpacket -> seven_seg_5_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_011_src_valid;                                                        // cmd_mux_011:src_valid -> seven_seg_5_s1_agent:cp_valid
	wire  [98:0] cmd_mux_011_src_data;                                                         // cmd_mux_011:src_data -> seven_seg_5_s1_agent:cp_data
	wire         cmd_mux_011_src_ready;                                                        // seven_seg_5_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire  [16:0] cmd_mux_011_src_channel;                                                      // cmd_mux_011:src_channel -> seven_seg_5_s1_agent:cp_channel
	wire         cmd_mux_011_src_startofpacket;                                                // cmd_mux_011:src_startofpacket -> seven_seg_5_s1_agent:cp_startofpacket
	wire         cmd_mux_011_src_endofpacket;                                                  // cmd_mux_011:src_endofpacket -> seven_seg_5_s1_agent:cp_endofpacket
	wire  [31:0] sdram_s1_agent_m0_readdata;                                                   // SDRAM_s1_translator:uav_readdata -> SDRAM_s1_agent:m0_readdata
	wire         sdram_s1_agent_m0_waitrequest;                                                // SDRAM_s1_translator:uav_waitrequest -> SDRAM_s1_agent:m0_waitrequest
	wire         sdram_s1_agent_m0_debugaccess;                                                // SDRAM_s1_agent:m0_debugaccess -> SDRAM_s1_translator:uav_debugaccess
	wire  [18:0] sdram_s1_agent_m0_address;                                                    // SDRAM_s1_agent:m0_address -> SDRAM_s1_translator:uav_address
	wire   [3:0] sdram_s1_agent_m0_byteenable;                                                 // SDRAM_s1_agent:m0_byteenable -> SDRAM_s1_translator:uav_byteenable
	wire         sdram_s1_agent_m0_read;                                                       // SDRAM_s1_agent:m0_read -> SDRAM_s1_translator:uav_read
	wire         sdram_s1_agent_m0_readdatavalid;                                              // SDRAM_s1_translator:uav_readdatavalid -> SDRAM_s1_agent:m0_readdatavalid
	wire         sdram_s1_agent_m0_lock;                                                       // SDRAM_s1_agent:m0_lock -> SDRAM_s1_translator:uav_lock
	wire  [31:0] sdram_s1_agent_m0_writedata;                                                  // SDRAM_s1_agent:m0_writedata -> SDRAM_s1_translator:uav_writedata
	wire         sdram_s1_agent_m0_write;                                                      // SDRAM_s1_agent:m0_write -> SDRAM_s1_translator:uav_write
	wire   [2:0] sdram_s1_agent_m0_burstcount;                                                 // SDRAM_s1_agent:m0_burstcount -> SDRAM_s1_translator:uav_burstcount
	wire         sdram_s1_agent_rf_source_valid;                                               // SDRAM_s1_agent:rf_source_valid -> SDRAM_s1_agent_rsp_fifo:in_valid
	wire  [99:0] sdram_s1_agent_rf_source_data;                                                // SDRAM_s1_agent:rf_source_data -> SDRAM_s1_agent_rsp_fifo:in_data
	wire         sdram_s1_agent_rf_source_ready;                                               // SDRAM_s1_agent_rsp_fifo:in_ready -> SDRAM_s1_agent:rf_source_ready
	wire         sdram_s1_agent_rf_source_startofpacket;                                       // SDRAM_s1_agent:rf_source_startofpacket -> SDRAM_s1_agent_rsp_fifo:in_startofpacket
	wire         sdram_s1_agent_rf_source_endofpacket;                                         // SDRAM_s1_agent:rf_source_endofpacket -> SDRAM_s1_agent_rsp_fifo:in_endofpacket
	wire         sdram_s1_agent_rsp_fifo_out_valid;                                            // SDRAM_s1_agent_rsp_fifo:out_valid -> SDRAM_s1_agent:rf_sink_valid
	wire  [99:0] sdram_s1_agent_rsp_fifo_out_data;                                             // SDRAM_s1_agent_rsp_fifo:out_data -> SDRAM_s1_agent:rf_sink_data
	wire         sdram_s1_agent_rsp_fifo_out_ready;                                            // SDRAM_s1_agent:rf_sink_ready -> SDRAM_s1_agent_rsp_fifo:out_ready
	wire         sdram_s1_agent_rsp_fifo_out_startofpacket;                                    // SDRAM_s1_agent_rsp_fifo:out_startofpacket -> SDRAM_s1_agent:rf_sink_startofpacket
	wire         sdram_s1_agent_rsp_fifo_out_endofpacket;                                      // SDRAM_s1_agent_rsp_fifo:out_endofpacket -> SDRAM_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_012_src_valid;                                                        // cmd_mux_012:src_valid -> SDRAM_s1_agent:cp_valid
	wire  [98:0] cmd_mux_012_src_data;                                                         // cmd_mux_012:src_data -> SDRAM_s1_agent:cp_data
	wire         cmd_mux_012_src_ready;                                                        // SDRAM_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire  [16:0] cmd_mux_012_src_channel;                                                      // cmd_mux_012:src_channel -> SDRAM_s1_agent:cp_channel
	wire         cmd_mux_012_src_startofpacket;                                                // cmd_mux_012:src_startofpacket -> SDRAM_s1_agent:cp_startofpacket
	wire         cmd_mux_012_src_endofpacket;                                                  // cmd_mux_012:src_endofpacket -> SDRAM_s1_agent:cp_endofpacket
	wire  [31:0] timer_s1_agent_m0_readdata;                                                   // Timer_s1_translator:uav_readdata -> Timer_s1_agent:m0_readdata
	wire         timer_s1_agent_m0_waitrequest;                                                // Timer_s1_translator:uav_waitrequest -> Timer_s1_agent:m0_waitrequest
	wire         timer_s1_agent_m0_debugaccess;                                                // Timer_s1_agent:m0_debugaccess -> Timer_s1_translator:uav_debugaccess
	wire  [18:0] timer_s1_agent_m0_address;                                                    // Timer_s1_agent:m0_address -> Timer_s1_translator:uav_address
	wire   [3:0] timer_s1_agent_m0_byteenable;                                                 // Timer_s1_agent:m0_byteenable -> Timer_s1_translator:uav_byteenable
	wire         timer_s1_agent_m0_read;                                                       // Timer_s1_agent:m0_read -> Timer_s1_translator:uav_read
	wire         timer_s1_agent_m0_readdatavalid;                                              // Timer_s1_translator:uav_readdatavalid -> Timer_s1_agent:m0_readdatavalid
	wire         timer_s1_agent_m0_lock;                                                       // Timer_s1_agent:m0_lock -> Timer_s1_translator:uav_lock
	wire  [31:0] timer_s1_agent_m0_writedata;                                                  // Timer_s1_agent:m0_writedata -> Timer_s1_translator:uav_writedata
	wire         timer_s1_agent_m0_write;                                                      // Timer_s1_agent:m0_write -> Timer_s1_translator:uav_write
	wire   [2:0] timer_s1_agent_m0_burstcount;                                                 // Timer_s1_agent:m0_burstcount -> Timer_s1_translator:uav_burstcount
	wire         timer_s1_agent_rf_source_valid;                                               // Timer_s1_agent:rf_source_valid -> Timer_s1_agent_rsp_fifo:in_valid
	wire  [99:0] timer_s1_agent_rf_source_data;                                                // Timer_s1_agent:rf_source_data -> Timer_s1_agent_rsp_fifo:in_data
	wire         timer_s1_agent_rf_source_ready;                                               // Timer_s1_agent_rsp_fifo:in_ready -> Timer_s1_agent:rf_source_ready
	wire         timer_s1_agent_rf_source_startofpacket;                                       // Timer_s1_agent:rf_source_startofpacket -> Timer_s1_agent_rsp_fifo:in_startofpacket
	wire         timer_s1_agent_rf_source_endofpacket;                                         // Timer_s1_agent:rf_source_endofpacket -> Timer_s1_agent_rsp_fifo:in_endofpacket
	wire         timer_s1_agent_rsp_fifo_out_valid;                                            // Timer_s1_agent_rsp_fifo:out_valid -> Timer_s1_agent:rf_sink_valid
	wire  [99:0] timer_s1_agent_rsp_fifo_out_data;                                             // Timer_s1_agent_rsp_fifo:out_data -> Timer_s1_agent:rf_sink_data
	wire         timer_s1_agent_rsp_fifo_out_ready;                                            // Timer_s1_agent:rf_sink_ready -> Timer_s1_agent_rsp_fifo:out_ready
	wire         timer_s1_agent_rsp_fifo_out_startofpacket;                                    // Timer_s1_agent_rsp_fifo:out_startofpacket -> Timer_s1_agent:rf_sink_startofpacket
	wire         timer_s1_agent_rsp_fifo_out_endofpacket;                                      // Timer_s1_agent_rsp_fifo:out_endofpacket -> Timer_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_013_src_valid;                                                        // cmd_mux_013:src_valid -> Timer_s1_agent:cp_valid
	wire  [98:0] cmd_mux_013_src_data;                                                         // cmd_mux_013:src_data -> Timer_s1_agent:cp_data
	wire         cmd_mux_013_src_ready;                                                        // Timer_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire  [16:0] cmd_mux_013_src_channel;                                                      // cmd_mux_013:src_channel -> Timer_s1_agent:cp_channel
	wire         cmd_mux_013_src_startofpacket;                                                // cmd_mux_013:src_startofpacket -> Timer_s1_agent:cp_startofpacket
	wire         cmd_mux_013_src_endofpacket;                                                  // cmd_mux_013:src_endofpacket -> Timer_s1_agent:cp_endofpacket
	wire  [31:0] key_1_s1_agent_m0_readdata;                                                   // key_1_s1_translator:uav_readdata -> key_1_s1_agent:m0_readdata
	wire         key_1_s1_agent_m0_waitrequest;                                                // key_1_s1_translator:uav_waitrequest -> key_1_s1_agent:m0_waitrequest
	wire         key_1_s1_agent_m0_debugaccess;                                                // key_1_s1_agent:m0_debugaccess -> key_1_s1_translator:uav_debugaccess
	wire  [18:0] key_1_s1_agent_m0_address;                                                    // key_1_s1_agent:m0_address -> key_1_s1_translator:uav_address
	wire   [3:0] key_1_s1_agent_m0_byteenable;                                                 // key_1_s1_agent:m0_byteenable -> key_1_s1_translator:uav_byteenable
	wire         key_1_s1_agent_m0_read;                                                       // key_1_s1_agent:m0_read -> key_1_s1_translator:uav_read
	wire         key_1_s1_agent_m0_readdatavalid;                                              // key_1_s1_translator:uav_readdatavalid -> key_1_s1_agent:m0_readdatavalid
	wire         key_1_s1_agent_m0_lock;                                                       // key_1_s1_agent:m0_lock -> key_1_s1_translator:uav_lock
	wire  [31:0] key_1_s1_agent_m0_writedata;                                                  // key_1_s1_agent:m0_writedata -> key_1_s1_translator:uav_writedata
	wire         key_1_s1_agent_m0_write;                                                      // key_1_s1_agent:m0_write -> key_1_s1_translator:uav_write
	wire   [2:0] key_1_s1_agent_m0_burstcount;                                                 // key_1_s1_agent:m0_burstcount -> key_1_s1_translator:uav_burstcount
	wire         key_1_s1_agent_rf_source_valid;                                               // key_1_s1_agent:rf_source_valid -> key_1_s1_agent_rsp_fifo:in_valid
	wire  [99:0] key_1_s1_agent_rf_source_data;                                                // key_1_s1_agent:rf_source_data -> key_1_s1_agent_rsp_fifo:in_data
	wire         key_1_s1_agent_rf_source_ready;                                               // key_1_s1_agent_rsp_fifo:in_ready -> key_1_s1_agent:rf_source_ready
	wire         key_1_s1_agent_rf_source_startofpacket;                                       // key_1_s1_agent:rf_source_startofpacket -> key_1_s1_agent_rsp_fifo:in_startofpacket
	wire         key_1_s1_agent_rf_source_endofpacket;                                         // key_1_s1_agent:rf_source_endofpacket -> key_1_s1_agent_rsp_fifo:in_endofpacket
	wire         key_1_s1_agent_rsp_fifo_out_valid;                                            // key_1_s1_agent_rsp_fifo:out_valid -> key_1_s1_agent:rf_sink_valid
	wire  [99:0] key_1_s1_agent_rsp_fifo_out_data;                                             // key_1_s1_agent_rsp_fifo:out_data -> key_1_s1_agent:rf_sink_data
	wire         key_1_s1_agent_rsp_fifo_out_ready;                                            // key_1_s1_agent:rf_sink_ready -> key_1_s1_agent_rsp_fifo:out_ready
	wire         key_1_s1_agent_rsp_fifo_out_startofpacket;                                    // key_1_s1_agent_rsp_fifo:out_startofpacket -> key_1_s1_agent:rf_sink_startofpacket
	wire         key_1_s1_agent_rsp_fifo_out_endofpacket;                                      // key_1_s1_agent_rsp_fifo:out_endofpacket -> key_1_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_014_src_valid;                                                        // cmd_mux_014:src_valid -> key_1_s1_agent:cp_valid
	wire  [98:0] cmd_mux_014_src_data;                                                         // cmd_mux_014:src_data -> key_1_s1_agent:cp_data
	wire         cmd_mux_014_src_ready;                                                        // key_1_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire  [16:0] cmd_mux_014_src_channel;                                                      // cmd_mux_014:src_channel -> key_1_s1_agent:cp_channel
	wire         cmd_mux_014_src_startofpacket;                                                // cmd_mux_014:src_startofpacket -> key_1_s1_agent:cp_startofpacket
	wire         cmd_mux_014_src_endofpacket;                                                  // cmd_mux_014:src_endofpacket -> key_1_s1_agent:cp_endofpacket
	wire  [31:0] key_2_s1_agent_m0_readdata;                                                   // key_2_s1_translator:uav_readdata -> key_2_s1_agent:m0_readdata
	wire         key_2_s1_agent_m0_waitrequest;                                                // key_2_s1_translator:uav_waitrequest -> key_2_s1_agent:m0_waitrequest
	wire         key_2_s1_agent_m0_debugaccess;                                                // key_2_s1_agent:m0_debugaccess -> key_2_s1_translator:uav_debugaccess
	wire  [18:0] key_2_s1_agent_m0_address;                                                    // key_2_s1_agent:m0_address -> key_2_s1_translator:uav_address
	wire   [3:0] key_2_s1_agent_m0_byteenable;                                                 // key_2_s1_agent:m0_byteenable -> key_2_s1_translator:uav_byteenable
	wire         key_2_s1_agent_m0_read;                                                       // key_2_s1_agent:m0_read -> key_2_s1_translator:uav_read
	wire         key_2_s1_agent_m0_readdatavalid;                                              // key_2_s1_translator:uav_readdatavalid -> key_2_s1_agent:m0_readdatavalid
	wire         key_2_s1_agent_m0_lock;                                                       // key_2_s1_agent:m0_lock -> key_2_s1_translator:uav_lock
	wire  [31:0] key_2_s1_agent_m0_writedata;                                                  // key_2_s1_agent:m0_writedata -> key_2_s1_translator:uav_writedata
	wire         key_2_s1_agent_m0_write;                                                      // key_2_s1_agent:m0_write -> key_2_s1_translator:uav_write
	wire   [2:0] key_2_s1_agent_m0_burstcount;                                                 // key_2_s1_agent:m0_burstcount -> key_2_s1_translator:uav_burstcount
	wire         key_2_s1_agent_rf_source_valid;                                               // key_2_s1_agent:rf_source_valid -> key_2_s1_agent_rsp_fifo:in_valid
	wire  [99:0] key_2_s1_agent_rf_source_data;                                                // key_2_s1_agent:rf_source_data -> key_2_s1_agent_rsp_fifo:in_data
	wire         key_2_s1_agent_rf_source_ready;                                               // key_2_s1_agent_rsp_fifo:in_ready -> key_2_s1_agent:rf_source_ready
	wire         key_2_s1_agent_rf_source_startofpacket;                                       // key_2_s1_agent:rf_source_startofpacket -> key_2_s1_agent_rsp_fifo:in_startofpacket
	wire         key_2_s1_agent_rf_source_endofpacket;                                         // key_2_s1_agent:rf_source_endofpacket -> key_2_s1_agent_rsp_fifo:in_endofpacket
	wire         key_2_s1_agent_rsp_fifo_out_valid;                                            // key_2_s1_agent_rsp_fifo:out_valid -> key_2_s1_agent:rf_sink_valid
	wire  [99:0] key_2_s1_agent_rsp_fifo_out_data;                                             // key_2_s1_agent_rsp_fifo:out_data -> key_2_s1_agent:rf_sink_data
	wire         key_2_s1_agent_rsp_fifo_out_ready;                                            // key_2_s1_agent:rf_sink_ready -> key_2_s1_agent_rsp_fifo:out_ready
	wire         key_2_s1_agent_rsp_fifo_out_startofpacket;                                    // key_2_s1_agent_rsp_fifo:out_startofpacket -> key_2_s1_agent:rf_sink_startofpacket
	wire         key_2_s1_agent_rsp_fifo_out_endofpacket;                                      // key_2_s1_agent_rsp_fifo:out_endofpacket -> key_2_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_015_src_valid;                                                        // cmd_mux_015:src_valid -> key_2_s1_agent:cp_valid
	wire  [98:0] cmd_mux_015_src_data;                                                         // cmd_mux_015:src_data -> key_2_s1_agent:cp_data
	wire         cmd_mux_015_src_ready;                                                        // key_2_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire  [16:0] cmd_mux_015_src_channel;                                                      // cmd_mux_015:src_channel -> key_2_s1_agent:cp_channel
	wire         cmd_mux_015_src_startofpacket;                                                // cmd_mux_015:src_startofpacket -> key_2_s1_agent:cp_startofpacket
	wire         cmd_mux_015_src_endofpacket;                                                  // cmd_mux_015:src_endofpacket -> key_2_s1_agent:cp_endofpacket
	wire  [31:0] key_3_s1_agent_m0_readdata;                                                   // key_3_s1_translator:uav_readdata -> key_3_s1_agent:m0_readdata
	wire         key_3_s1_agent_m0_waitrequest;                                                // key_3_s1_translator:uav_waitrequest -> key_3_s1_agent:m0_waitrequest
	wire         key_3_s1_agent_m0_debugaccess;                                                // key_3_s1_agent:m0_debugaccess -> key_3_s1_translator:uav_debugaccess
	wire  [18:0] key_3_s1_agent_m0_address;                                                    // key_3_s1_agent:m0_address -> key_3_s1_translator:uav_address
	wire   [3:0] key_3_s1_agent_m0_byteenable;                                                 // key_3_s1_agent:m0_byteenable -> key_3_s1_translator:uav_byteenable
	wire         key_3_s1_agent_m0_read;                                                       // key_3_s1_agent:m0_read -> key_3_s1_translator:uav_read
	wire         key_3_s1_agent_m0_readdatavalid;                                              // key_3_s1_translator:uav_readdatavalid -> key_3_s1_agent:m0_readdatavalid
	wire         key_3_s1_agent_m0_lock;                                                       // key_3_s1_agent:m0_lock -> key_3_s1_translator:uav_lock
	wire  [31:0] key_3_s1_agent_m0_writedata;                                                  // key_3_s1_agent:m0_writedata -> key_3_s1_translator:uav_writedata
	wire         key_3_s1_agent_m0_write;                                                      // key_3_s1_agent:m0_write -> key_3_s1_translator:uav_write
	wire   [2:0] key_3_s1_agent_m0_burstcount;                                                 // key_3_s1_agent:m0_burstcount -> key_3_s1_translator:uav_burstcount
	wire         key_3_s1_agent_rf_source_valid;                                               // key_3_s1_agent:rf_source_valid -> key_3_s1_agent_rsp_fifo:in_valid
	wire  [99:0] key_3_s1_agent_rf_source_data;                                                // key_3_s1_agent:rf_source_data -> key_3_s1_agent_rsp_fifo:in_data
	wire         key_3_s1_agent_rf_source_ready;                                               // key_3_s1_agent_rsp_fifo:in_ready -> key_3_s1_agent:rf_source_ready
	wire         key_3_s1_agent_rf_source_startofpacket;                                       // key_3_s1_agent:rf_source_startofpacket -> key_3_s1_agent_rsp_fifo:in_startofpacket
	wire         key_3_s1_agent_rf_source_endofpacket;                                         // key_3_s1_agent:rf_source_endofpacket -> key_3_s1_agent_rsp_fifo:in_endofpacket
	wire         key_3_s1_agent_rsp_fifo_out_valid;                                            // key_3_s1_agent_rsp_fifo:out_valid -> key_3_s1_agent:rf_sink_valid
	wire  [99:0] key_3_s1_agent_rsp_fifo_out_data;                                             // key_3_s1_agent_rsp_fifo:out_data -> key_3_s1_agent:rf_sink_data
	wire         key_3_s1_agent_rsp_fifo_out_ready;                                            // key_3_s1_agent:rf_sink_ready -> key_3_s1_agent_rsp_fifo:out_ready
	wire         key_3_s1_agent_rsp_fifo_out_startofpacket;                                    // key_3_s1_agent_rsp_fifo:out_startofpacket -> key_3_s1_agent:rf_sink_startofpacket
	wire         key_3_s1_agent_rsp_fifo_out_endofpacket;                                      // key_3_s1_agent_rsp_fifo:out_endofpacket -> key_3_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_016_src_valid;                                                        // cmd_mux_016:src_valid -> key_3_s1_agent:cp_valid
	wire  [98:0] cmd_mux_016_src_data;                                                         // cmd_mux_016:src_data -> key_3_s1_agent:cp_data
	wire         cmd_mux_016_src_ready;                                                        // key_3_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire  [16:0] cmd_mux_016_src_channel;                                                      // cmd_mux_016:src_channel -> key_3_s1_agent:cp_channel
	wire         cmd_mux_016_src_startofpacket;                                                // cmd_mux_016:src_startofpacket -> key_3_s1_agent:cp_startofpacket
	wire         cmd_mux_016_src_endofpacket;                                                  // cmd_mux_016:src_endofpacket -> key_3_s1_agent:cp_endofpacket
	wire         niosii_data_master_agent_cp_valid;                                            // NIOSII_data_master_agent:cp_valid -> router:sink_valid
	wire  [98:0] niosii_data_master_agent_cp_data;                                             // NIOSII_data_master_agent:cp_data -> router:sink_data
	wire         niosii_data_master_agent_cp_ready;                                            // router:sink_ready -> NIOSII_data_master_agent:cp_ready
	wire         niosii_data_master_agent_cp_startofpacket;                                    // NIOSII_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire         niosii_data_master_agent_cp_endofpacket;                                      // NIOSII_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         niosii_instruction_master_agent_cp_valid;                                     // NIOSII_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [98:0] niosii_instruction_master_agent_cp_data;                                      // NIOSII_instruction_master_agent:cp_data -> router_001:sink_data
	wire         niosii_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> NIOSII_instruction_master_agent:cp_ready
	wire         niosii_instruction_master_agent_cp_startofpacket;                             // NIOSII_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire         niosii_instruction_master_agent_cp_endofpacket;                               // NIOSII_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         audio_video_avalon_av_config_slave_agent_rp_valid;                            // Audio_Video_avalon_av_config_slave_agent:rp_valid -> router_002:sink_valid
	wire  [98:0] audio_video_avalon_av_config_slave_agent_rp_data;                             // Audio_Video_avalon_av_config_slave_agent:rp_data -> router_002:sink_data
	wire         audio_video_avalon_av_config_slave_agent_rp_ready;                            // router_002:sink_ready -> Audio_Video_avalon_av_config_slave_agent:rp_ready
	wire         audio_video_avalon_av_config_slave_agent_rp_startofpacket;                    // Audio_Video_avalon_av_config_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         audio_video_avalon_av_config_slave_agent_rp_endofpacket;                      // Audio_Video_avalon_av_config_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                         // router_002:src_valid -> rsp_demux:sink_valid
	wire  [98:0] router_002_src_data;                                                          // router_002:src_data -> rsp_demux:sink_data
	wire         router_002_src_ready;                                                         // rsp_demux:sink_ready -> router_002:src_ready
	wire  [16:0] router_002_src_channel;                                                       // router_002:src_channel -> rsp_demux:sink_channel
	wire         router_002_src_startofpacket;                                                 // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_002_src_endofpacket;                                                   // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         jtag_avalon_jtag_slave_agent_rp_valid;                                        // JTAG_avalon_jtag_slave_agent:rp_valid -> router_003:sink_valid
	wire  [98:0] jtag_avalon_jtag_slave_agent_rp_data;                                         // JTAG_avalon_jtag_slave_agent:rp_data -> router_003:sink_data
	wire         jtag_avalon_jtag_slave_agent_rp_ready;                                        // router_003:sink_ready -> JTAG_avalon_jtag_slave_agent:rp_ready
	wire         jtag_avalon_jtag_slave_agent_rp_startofpacket;                                // JTAG_avalon_jtag_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         jtag_avalon_jtag_slave_agent_rp_endofpacket;                                  // JTAG_avalon_jtag_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                         // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [98:0] router_003_src_data;                                                          // router_003:src_data -> rsp_demux_001:sink_data
	wire         router_003_src_ready;                                                         // rsp_demux_001:sink_ready -> router_003:src_ready
	wire  [16:0] router_003_src_channel;                                                       // router_003:src_channel -> rsp_demux_001:sink_channel
	wire         router_003_src_startofpacket;                                                 // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_003_src_endofpacket;                                                   // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         niosii_debug_mem_slave_agent_rp_valid;                                        // NIOSII_debug_mem_slave_agent:rp_valid -> router_004:sink_valid
	wire  [98:0] niosii_debug_mem_slave_agent_rp_data;                                         // NIOSII_debug_mem_slave_agent:rp_data -> router_004:sink_data
	wire         niosii_debug_mem_slave_agent_rp_ready;                                        // router_004:sink_ready -> NIOSII_debug_mem_slave_agent:rp_ready
	wire         niosii_debug_mem_slave_agent_rp_startofpacket;                                // NIOSII_debug_mem_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         niosii_debug_mem_slave_agent_rp_endofpacket;                                  // NIOSII_debug_mem_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                         // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [98:0] router_004_src_data;                                                          // router_004:src_data -> rsp_demux_002:sink_data
	wire         router_004_src_ready;                                                         // rsp_demux_002:sink_ready -> router_004:src_ready
	wire  [16:0] router_004_src_channel;                                                       // router_004:src_channel -> rsp_demux_002:sink_channel
	wire         router_004_src_startofpacket;                                                 // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_004_src_endofpacket;                                                   // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         red_leds_s1_agent_rp_valid;                                                   // red_leds_s1_agent:rp_valid -> router_005:sink_valid
	wire  [98:0] red_leds_s1_agent_rp_data;                                                    // red_leds_s1_agent:rp_data -> router_005:sink_data
	wire         red_leds_s1_agent_rp_ready;                                                   // router_005:sink_ready -> red_leds_s1_agent:rp_ready
	wire         red_leds_s1_agent_rp_startofpacket;                                           // red_leds_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         red_leds_s1_agent_rp_endofpacket;                                             // red_leds_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                         // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [98:0] router_005_src_data;                                                          // router_005:src_data -> rsp_demux_003:sink_data
	wire         router_005_src_ready;                                                         // rsp_demux_003:sink_ready -> router_005:src_ready
	wire  [16:0] router_005_src_channel;                                                       // router_005:src_channel -> rsp_demux_003:sink_channel
	wire         router_005_src_startofpacket;                                                 // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_005_src_endofpacket;                                                   // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         switches_s1_agent_rp_valid;                                                   // switches_s1_agent:rp_valid -> router_006:sink_valid
	wire  [98:0] switches_s1_agent_rp_data;                                                    // switches_s1_agent:rp_data -> router_006:sink_data
	wire         switches_s1_agent_rp_ready;                                                   // router_006:sink_ready -> switches_s1_agent:rp_ready
	wire         switches_s1_agent_rp_startofpacket;                                           // switches_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         switches_s1_agent_rp_endofpacket;                                             // switches_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                         // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [98:0] router_006_src_data;                                                          // router_006:src_data -> rsp_demux_004:sink_data
	wire         router_006_src_ready;                                                         // rsp_demux_004:sink_ready -> router_006:src_ready
	wire  [16:0] router_006_src_channel;                                                       // router_006:src_channel -> rsp_demux_004:sink_channel
	wire         router_006_src_startofpacket;                                                 // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_006_src_endofpacket;                                                   // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         key_0_s1_agent_rp_valid;                                                      // key_0_s1_agent:rp_valid -> router_007:sink_valid
	wire  [98:0] key_0_s1_agent_rp_data;                                                       // key_0_s1_agent:rp_data -> router_007:sink_data
	wire         key_0_s1_agent_rp_ready;                                                      // router_007:sink_ready -> key_0_s1_agent:rp_ready
	wire         key_0_s1_agent_rp_startofpacket;                                              // key_0_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire         key_0_s1_agent_rp_endofpacket;                                                // key_0_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         router_007_src_valid;                                                         // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [98:0] router_007_src_data;                                                          // router_007:src_data -> rsp_demux_005:sink_data
	wire         router_007_src_ready;                                                         // rsp_demux_005:sink_ready -> router_007:src_ready
	wire  [16:0] router_007_src_channel;                                                       // router_007:src_channel -> rsp_demux_005:sink_channel
	wire         router_007_src_startofpacket;                                                 // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_007_src_endofpacket;                                                   // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         seven_seg_0_s1_agent_rp_valid;                                                // seven_seg_0_s1_agent:rp_valid -> router_008:sink_valid
	wire  [98:0] seven_seg_0_s1_agent_rp_data;                                                 // seven_seg_0_s1_agent:rp_data -> router_008:sink_data
	wire         seven_seg_0_s1_agent_rp_ready;                                                // router_008:sink_ready -> seven_seg_0_s1_agent:rp_ready
	wire         seven_seg_0_s1_agent_rp_startofpacket;                                        // seven_seg_0_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire         seven_seg_0_s1_agent_rp_endofpacket;                                          // seven_seg_0_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         router_008_src_valid;                                                         // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [98:0] router_008_src_data;                                                          // router_008:src_data -> rsp_demux_006:sink_data
	wire         router_008_src_ready;                                                         // rsp_demux_006:sink_ready -> router_008:src_ready
	wire  [16:0] router_008_src_channel;                                                       // router_008:src_channel -> rsp_demux_006:sink_channel
	wire         router_008_src_startofpacket;                                                 // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire         router_008_src_endofpacket;                                                   // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         seven_seg_1_s1_agent_rp_valid;                                                // seven_seg_1_s1_agent:rp_valid -> router_009:sink_valid
	wire  [98:0] seven_seg_1_s1_agent_rp_data;                                                 // seven_seg_1_s1_agent:rp_data -> router_009:sink_data
	wire         seven_seg_1_s1_agent_rp_ready;                                                // router_009:sink_ready -> seven_seg_1_s1_agent:rp_ready
	wire         seven_seg_1_s1_agent_rp_startofpacket;                                        // seven_seg_1_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire         seven_seg_1_s1_agent_rp_endofpacket;                                          // seven_seg_1_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         router_009_src_valid;                                                         // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [98:0] router_009_src_data;                                                          // router_009:src_data -> rsp_demux_007:sink_data
	wire         router_009_src_ready;                                                         // rsp_demux_007:sink_ready -> router_009:src_ready
	wire  [16:0] router_009_src_channel;                                                       // router_009:src_channel -> rsp_demux_007:sink_channel
	wire         router_009_src_startofpacket;                                                 // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire         router_009_src_endofpacket;                                                   // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         seven_seg_2_s1_agent_rp_valid;                                                // seven_seg_2_s1_agent:rp_valid -> router_010:sink_valid
	wire  [98:0] seven_seg_2_s1_agent_rp_data;                                                 // seven_seg_2_s1_agent:rp_data -> router_010:sink_data
	wire         seven_seg_2_s1_agent_rp_ready;                                                // router_010:sink_ready -> seven_seg_2_s1_agent:rp_ready
	wire         seven_seg_2_s1_agent_rp_startofpacket;                                        // seven_seg_2_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire         seven_seg_2_s1_agent_rp_endofpacket;                                          // seven_seg_2_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         router_010_src_valid;                                                         // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [98:0] router_010_src_data;                                                          // router_010:src_data -> rsp_demux_008:sink_data
	wire         router_010_src_ready;                                                         // rsp_demux_008:sink_ready -> router_010:src_ready
	wire  [16:0] router_010_src_channel;                                                       // router_010:src_channel -> rsp_demux_008:sink_channel
	wire         router_010_src_startofpacket;                                                 // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire         router_010_src_endofpacket;                                                   // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         seven_seg_3_s1_agent_rp_valid;                                                // seven_seg_3_s1_agent:rp_valid -> router_011:sink_valid
	wire  [98:0] seven_seg_3_s1_agent_rp_data;                                                 // seven_seg_3_s1_agent:rp_data -> router_011:sink_data
	wire         seven_seg_3_s1_agent_rp_ready;                                                // router_011:sink_ready -> seven_seg_3_s1_agent:rp_ready
	wire         seven_seg_3_s1_agent_rp_startofpacket;                                        // seven_seg_3_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire         seven_seg_3_s1_agent_rp_endofpacket;                                          // seven_seg_3_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire         router_011_src_valid;                                                         // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [98:0] router_011_src_data;                                                          // router_011:src_data -> rsp_demux_009:sink_data
	wire         router_011_src_ready;                                                         // rsp_demux_009:sink_ready -> router_011:src_ready
	wire  [16:0] router_011_src_channel;                                                       // router_011:src_channel -> rsp_demux_009:sink_channel
	wire         router_011_src_startofpacket;                                                 // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire         router_011_src_endofpacket;                                                   // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         seven_seg_4_s1_agent_rp_valid;                                                // seven_seg_4_s1_agent:rp_valid -> router_012:sink_valid
	wire  [98:0] seven_seg_4_s1_agent_rp_data;                                                 // seven_seg_4_s1_agent:rp_data -> router_012:sink_data
	wire         seven_seg_4_s1_agent_rp_ready;                                                // router_012:sink_ready -> seven_seg_4_s1_agent:rp_ready
	wire         seven_seg_4_s1_agent_rp_startofpacket;                                        // seven_seg_4_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire         seven_seg_4_s1_agent_rp_endofpacket;                                          // seven_seg_4_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire         router_012_src_valid;                                                         // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [98:0] router_012_src_data;                                                          // router_012:src_data -> rsp_demux_010:sink_data
	wire         router_012_src_ready;                                                         // rsp_demux_010:sink_ready -> router_012:src_ready
	wire  [16:0] router_012_src_channel;                                                       // router_012:src_channel -> rsp_demux_010:sink_channel
	wire         router_012_src_startofpacket;                                                 // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire         router_012_src_endofpacket;                                                   // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire         seven_seg_5_s1_agent_rp_valid;                                                // seven_seg_5_s1_agent:rp_valid -> router_013:sink_valid
	wire  [98:0] seven_seg_5_s1_agent_rp_data;                                                 // seven_seg_5_s1_agent:rp_data -> router_013:sink_data
	wire         seven_seg_5_s1_agent_rp_ready;                                                // router_013:sink_ready -> seven_seg_5_s1_agent:rp_ready
	wire         seven_seg_5_s1_agent_rp_startofpacket;                                        // seven_seg_5_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire         seven_seg_5_s1_agent_rp_endofpacket;                                          // seven_seg_5_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire         router_013_src_valid;                                                         // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [98:0] router_013_src_data;                                                          // router_013:src_data -> rsp_demux_011:sink_data
	wire         router_013_src_ready;                                                         // rsp_demux_011:sink_ready -> router_013:src_ready
	wire  [16:0] router_013_src_channel;                                                       // router_013:src_channel -> rsp_demux_011:sink_channel
	wire         router_013_src_startofpacket;                                                 // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire         router_013_src_endofpacket;                                                   // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire         sdram_s1_agent_rp_valid;                                                      // SDRAM_s1_agent:rp_valid -> router_014:sink_valid
	wire  [98:0] sdram_s1_agent_rp_data;                                                       // SDRAM_s1_agent:rp_data -> router_014:sink_data
	wire         sdram_s1_agent_rp_ready;                                                      // router_014:sink_ready -> SDRAM_s1_agent:rp_ready
	wire         sdram_s1_agent_rp_startofpacket;                                              // SDRAM_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire         sdram_s1_agent_rp_endofpacket;                                                // SDRAM_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire         router_014_src_valid;                                                         // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [98:0] router_014_src_data;                                                          // router_014:src_data -> rsp_demux_012:sink_data
	wire         router_014_src_ready;                                                         // rsp_demux_012:sink_ready -> router_014:src_ready
	wire  [16:0] router_014_src_channel;                                                       // router_014:src_channel -> rsp_demux_012:sink_channel
	wire         router_014_src_startofpacket;                                                 // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire         router_014_src_endofpacket;                                                   // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire         timer_s1_agent_rp_valid;                                                      // Timer_s1_agent:rp_valid -> router_015:sink_valid
	wire  [98:0] timer_s1_agent_rp_data;                                                       // Timer_s1_agent:rp_data -> router_015:sink_data
	wire         timer_s1_agent_rp_ready;                                                      // router_015:sink_ready -> Timer_s1_agent:rp_ready
	wire         timer_s1_agent_rp_startofpacket;                                              // Timer_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire         timer_s1_agent_rp_endofpacket;                                                // Timer_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire         router_015_src_valid;                                                         // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [98:0] router_015_src_data;                                                          // router_015:src_data -> rsp_demux_013:sink_data
	wire         router_015_src_ready;                                                         // rsp_demux_013:sink_ready -> router_015:src_ready
	wire  [16:0] router_015_src_channel;                                                       // router_015:src_channel -> rsp_demux_013:sink_channel
	wire         router_015_src_startofpacket;                                                 // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire         router_015_src_endofpacket;                                                   // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire         key_1_s1_agent_rp_valid;                                                      // key_1_s1_agent:rp_valid -> router_016:sink_valid
	wire  [98:0] key_1_s1_agent_rp_data;                                                       // key_1_s1_agent:rp_data -> router_016:sink_data
	wire         key_1_s1_agent_rp_ready;                                                      // router_016:sink_ready -> key_1_s1_agent:rp_ready
	wire         key_1_s1_agent_rp_startofpacket;                                              // key_1_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire         key_1_s1_agent_rp_endofpacket;                                                // key_1_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire         router_016_src_valid;                                                         // router_016:src_valid -> rsp_demux_014:sink_valid
	wire  [98:0] router_016_src_data;                                                          // router_016:src_data -> rsp_demux_014:sink_data
	wire         router_016_src_ready;                                                         // rsp_demux_014:sink_ready -> router_016:src_ready
	wire  [16:0] router_016_src_channel;                                                       // router_016:src_channel -> rsp_demux_014:sink_channel
	wire         router_016_src_startofpacket;                                                 // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire         router_016_src_endofpacket;                                                   // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire         key_2_s1_agent_rp_valid;                                                      // key_2_s1_agent:rp_valid -> router_017:sink_valid
	wire  [98:0] key_2_s1_agent_rp_data;                                                       // key_2_s1_agent:rp_data -> router_017:sink_data
	wire         key_2_s1_agent_rp_ready;                                                      // router_017:sink_ready -> key_2_s1_agent:rp_ready
	wire         key_2_s1_agent_rp_startofpacket;                                              // key_2_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire         key_2_s1_agent_rp_endofpacket;                                                // key_2_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire         router_017_src_valid;                                                         // router_017:src_valid -> rsp_demux_015:sink_valid
	wire  [98:0] router_017_src_data;                                                          // router_017:src_data -> rsp_demux_015:sink_data
	wire         router_017_src_ready;                                                         // rsp_demux_015:sink_ready -> router_017:src_ready
	wire  [16:0] router_017_src_channel;                                                       // router_017:src_channel -> rsp_demux_015:sink_channel
	wire         router_017_src_startofpacket;                                                 // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire         router_017_src_endofpacket;                                                   // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire         key_3_s1_agent_rp_valid;                                                      // key_3_s1_agent:rp_valid -> router_018:sink_valid
	wire  [98:0] key_3_s1_agent_rp_data;                                                       // key_3_s1_agent:rp_data -> router_018:sink_data
	wire         key_3_s1_agent_rp_ready;                                                      // router_018:sink_ready -> key_3_s1_agent:rp_ready
	wire         key_3_s1_agent_rp_startofpacket;                                              // key_3_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire         key_3_s1_agent_rp_endofpacket;                                                // key_3_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire         router_018_src_valid;                                                         // router_018:src_valid -> rsp_demux_016:sink_valid
	wire  [98:0] router_018_src_data;                                                          // router_018:src_data -> rsp_demux_016:sink_data
	wire         router_018_src_ready;                                                         // rsp_demux_016:sink_ready -> router_018:src_ready
	wire  [16:0] router_018_src_channel;                                                       // router_018:src_channel -> rsp_demux_016:sink_channel
	wire         router_018_src_startofpacket;                                                 // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire         router_018_src_endofpacket;                                                   // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire         router_src_valid;                                                             // router:src_valid -> NIOSII_data_master_limiter:cmd_sink_valid
	wire  [98:0] router_src_data;                                                              // router:src_data -> NIOSII_data_master_limiter:cmd_sink_data
	wire         router_src_ready;                                                             // NIOSII_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire  [16:0] router_src_channel;                                                           // router:src_channel -> NIOSII_data_master_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                                     // router:src_startofpacket -> NIOSII_data_master_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                                       // router:src_endofpacket -> NIOSII_data_master_limiter:cmd_sink_endofpacket
	wire  [98:0] niosii_data_master_limiter_cmd_src_data;                                      // NIOSII_data_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         niosii_data_master_limiter_cmd_src_ready;                                     // cmd_demux:sink_ready -> NIOSII_data_master_limiter:cmd_src_ready
	wire  [16:0] niosii_data_master_limiter_cmd_src_channel;                                   // NIOSII_data_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         niosii_data_master_limiter_cmd_src_startofpacket;                             // NIOSII_data_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         niosii_data_master_limiter_cmd_src_endofpacket;                               // NIOSII_data_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                            // rsp_mux:src_valid -> NIOSII_data_master_limiter:rsp_sink_valid
	wire  [98:0] rsp_mux_src_data;                                                             // rsp_mux:src_data -> NIOSII_data_master_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                            // NIOSII_data_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire  [16:0] rsp_mux_src_channel;                                                          // rsp_mux:src_channel -> NIOSII_data_master_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                                    // rsp_mux:src_startofpacket -> NIOSII_data_master_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                                      // rsp_mux:src_endofpacket -> NIOSII_data_master_limiter:rsp_sink_endofpacket
	wire         niosii_data_master_limiter_rsp_src_valid;                                     // NIOSII_data_master_limiter:rsp_src_valid -> NIOSII_data_master_agent:rp_valid
	wire  [98:0] niosii_data_master_limiter_rsp_src_data;                                      // NIOSII_data_master_limiter:rsp_src_data -> NIOSII_data_master_agent:rp_data
	wire         niosii_data_master_limiter_rsp_src_ready;                                     // NIOSII_data_master_agent:rp_ready -> NIOSII_data_master_limiter:rsp_src_ready
	wire  [16:0] niosii_data_master_limiter_rsp_src_channel;                                   // NIOSII_data_master_limiter:rsp_src_channel -> NIOSII_data_master_agent:rp_channel
	wire         niosii_data_master_limiter_rsp_src_startofpacket;                             // NIOSII_data_master_limiter:rsp_src_startofpacket -> NIOSII_data_master_agent:rp_startofpacket
	wire         niosii_data_master_limiter_rsp_src_endofpacket;                               // NIOSII_data_master_limiter:rsp_src_endofpacket -> NIOSII_data_master_agent:rp_endofpacket
	wire         router_001_src_valid;                                                         // router_001:src_valid -> NIOSII_instruction_master_limiter:cmd_sink_valid
	wire  [98:0] router_001_src_data;                                                          // router_001:src_data -> NIOSII_instruction_master_limiter:cmd_sink_data
	wire         router_001_src_ready;                                                         // NIOSII_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire  [16:0] router_001_src_channel;                                                       // router_001:src_channel -> NIOSII_instruction_master_limiter:cmd_sink_channel
	wire         router_001_src_startofpacket;                                                 // router_001:src_startofpacket -> NIOSII_instruction_master_limiter:cmd_sink_startofpacket
	wire         router_001_src_endofpacket;                                                   // router_001:src_endofpacket -> NIOSII_instruction_master_limiter:cmd_sink_endofpacket
	wire  [98:0] niosii_instruction_master_limiter_cmd_src_data;                               // NIOSII_instruction_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire         niosii_instruction_master_limiter_cmd_src_ready;                              // cmd_demux_001:sink_ready -> NIOSII_instruction_master_limiter:cmd_src_ready
	wire  [16:0] niosii_instruction_master_limiter_cmd_src_channel;                            // NIOSII_instruction_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire         niosii_instruction_master_limiter_cmd_src_startofpacket;                      // NIOSII_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire         niosii_instruction_master_limiter_cmd_src_endofpacket;                        // NIOSII_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         rsp_mux_001_src_valid;                                                        // rsp_mux_001:src_valid -> NIOSII_instruction_master_limiter:rsp_sink_valid
	wire  [98:0] rsp_mux_001_src_data;                                                         // rsp_mux_001:src_data -> NIOSII_instruction_master_limiter:rsp_sink_data
	wire         rsp_mux_001_src_ready;                                                        // NIOSII_instruction_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire  [16:0] rsp_mux_001_src_channel;                                                      // rsp_mux_001:src_channel -> NIOSII_instruction_master_limiter:rsp_sink_channel
	wire         rsp_mux_001_src_startofpacket;                                                // rsp_mux_001:src_startofpacket -> NIOSII_instruction_master_limiter:rsp_sink_startofpacket
	wire         rsp_mux_001_src_endofpacket;                                                  // rsp_mux_001:src_endofpacket -> NIOSII_instruction_master_limiter:rsp_sink_endofpacket
	wire         niosii_instruction_master_limiter_rsp_src_valid;                              // NIOSII_instruction_master_limiter:rsp_src_valid -> NIOSII_instruction_master_agent:rp_valid
	wire  [98:0] niosii_instruction_master_limiter_rsp_src_data;                               // NIOSII_instruction_master_limiter:rsp_src_data -> NIOSII_instruction_master_agent:rp_data
	wire         niosii_instruction_master_limiter_rsp_src_ready;                              // NIOSII_instruction_master_agent:rp_ready -> NIOSII_instruction_master_limiter:rsp_src_ready
	wire  [16:0] niosii_instruction_master_limiter_rsp_src_channel;                            // NIOSII_instruction_master_limiter:rsp_src_channel -> NIOSII_instruction_master_agent:rp_channel
	wire         niosii_instruction_master_limiter_rsp_src_startofpacket;                      // NIOSII_instruction_master_limiter:rsp_src_startofpacket -> NIOSII_instruction_master_agent:rp_startofpacket
	wire         niosii_instruction_master_limiter_rsp_src_endofpacket;                        // NIOSII_instruction_master_limiter:rsp_src_endofpacket -> NIOSII_instruction_master_agent:rp_endofpacket
	wire         cmd_demux_src0_valid;                                                         // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [98:0] cmd_demux_src0_data;                                                          // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                         // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire  [16:0] cmd_demux_src0_channel;                                                       // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                 // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                   // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                         // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [98:0] cmd_demux_src1_data;                                                          // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                         // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire  [16:0] cmd_demux_src1_channel;                                                       // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                                 // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                   // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                         // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [98:0] cmd_demux_src2_data;                                                          // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                         // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire  [16:0] cmd_demux_src2_channel;                                                       // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                                 // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                                   // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                         // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [98:0] cmd_demux_src3_data;                                                          // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                         // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire  [16:0] cmd_demux_src3_channel;                                                       // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                                 // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                                   // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                         // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [98:0] cmd_demux_src4_data;                                                          // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                                         // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire  [16:0] cmd_demux_src4_channel;                                                       // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                                 // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                                   // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                         // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [98:0] cmd_demux_src5_data;                                                          // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                                         // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire  [16:0] cmd_demux_src5_channel;                                                       // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                                 // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                                   // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_src6_valid;                                                         // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [98:0] cmd_demux_src6_data;                                                          // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire         cmd_demux_src6_ready;                                                         // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire  [16:0] cmd_demux_src6_channel;                                                       // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire         cmd_demux_src6_startofpacket;                                                 // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire         cmd_demux_src6_endofpacket;                                                   // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_src7_valid;                                                         // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [98:0] cmd_demux_src7_data;                                                          // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire         cmd_demux_src7_ready;                                                         // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire  [16:0] cmd_demux_src7_channel;                                                       // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire         cmd_demux_src7_startofpacket;                                                 // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire         cmd_demux_src7_endofpacket;                                                   // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_src8_valid;                                                         // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [98:0] cmd_demux_src8_data;                                                          // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire         cmd_demux_src8_ready;                                                         // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire  [16:0] cmd_demux_src8_channel;                                                       // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire         cmd_demux_src8_startofpacket;                                                 // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire         cmd_demux_src8_endofpacket;                                                   // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_src9_valid;                                                         // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [98:0] cmd_demux_src9_data;                                                          // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire         cmd_demux_src9_ready;                                                         // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire  [16:0] cmd_demux_src9_channel;                                                       // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire         cmd_demux_src9_startofpacket;                                                 // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire         cmd_demux_src9_endofpacket;                                                   // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         cmd_demux_src10_valid;                                                        // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [98:0] cmd_demux_src10_data;                                                         // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire         cmd_demux_src10_ready;                                                        // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire  [16:0] cmd_demux_src10_channel;                                                      // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire         cmd_demux_src10_startofpacket;                                                // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire         cmd_demux_src10_endofpacket;                                                  // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire         cmd_demux_src11_valid;                                                        // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [98:0] cmd_demux_src11_data;                                                         // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire         cmd_demux_src11_ready;                                                        // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire  [16:0] cmd_demux_src11_channel;                                                      // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire         cmd_demux_src11_startofpacket;                                                // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire         cmd_demux_src11_endofpacket;                                                  // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire         cmd_demux_src12_valid;                                                        // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [98:0] cmd_demux_src12_data;                                                         // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire         cmd_demux_src12_ready;                                                        // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire  [16:0] cmd_demux_src12_channel;                                                      // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire         cmd_demux_src12_startofpacket;                                                // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire         cmd_demux_src12_endofpacket;                                                  // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire         cmd_demux_src13_valid;                                                        // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [98:0] cmd_demux_src13_data;                                                         // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire         cmd_demux_src13_ready;                                                        // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire  [16:0] cmd_demux_src13_channel;                                                      // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire         cmd_demux_src13_startofpacket;                                                // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire         cmd_demux_src13_endofpacket;                                                  // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire         cmd_demux_src14_valid;                                                        // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [98:0] cmd_demux_src14_data;                                                         // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire         cmd_demux_src14_ready;                                                        // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire  [16:0] cmd_demux_src14_channel;                                                      // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire         cmd_demux_src14_startofpacket;                                                // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire         cmd_demux_src14_endofpacket;                                                  // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire         cmd_demux_src15_valid;                                                        // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [98:0] cmd_demux_src15_data;                                                         // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire         cmd_demux_src15_ready;                                                        // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire  [16:0] cmd_demux_src15_channel;                                                      // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire         cmd_demux_src15_startofpacket;                                                // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire         cmd_demux_src15_endofpacket;                                                  // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire         cmd_demux_src16_valid;                                                        // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [98:0] cmd_demux_src16_data;                                                         // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire         cmd_demux_src16_ready;                                                        // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire  [16:0] cmd_demux_src16_channel;                                                      // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire         cmd_demux_src16_startofpacket;                                                // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire         cmd_demux_src16_endofpacket;                                                  // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire         cmd_demux_001_src0_valid;                                                     // cmd_demux_001:src0_valid -> cmd_mux_002:sink1_valid
	wire  [98:0] cmd_demux_001_src0_data;                                                      // cmd_demux_001:src0_data -> cmd_mux_002:sink1_data
	wire         cmd_demux_001_src0_ready;                                                     // cmd_mux_002:sink1_ready -> cmd_demux_001:src0_ready
	wire  [16:0] cmd_demux_001_src0_channel;                                                   // cmd_demux_001:src0_channel -> cmd_mux_002:sink1_channel
	wire         cmd_demux_001_src0_startofpacket;                                             // cmd_demux_001:src0_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire         cmd_demux_001_src0_endofpacket;                                               // cmd_demux_001:src0_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire         cmd_demux_001_src1_valid;                                                     // cmd_demux_001:src1_valid -> cmd_mux_012:sink1_valid
	wire  [98:0] cmd_demux_001_src1_data;                                                      // cmd_demux_001:src1_data -> cmd_mux_012:sink1_data
	wire         cmd_demux_001_src1_ready;                                                     // cmd_mux_012:sink1_ready -> cmd_demux_001:src1_ready
	wire  [16:0] cmd_demux_001_src1_channel;                                                   // cmd_demux_001:src1_channel -> cmd_mux_012:sink1_channel
	wire         cmd_demux_001_src1_startofpacket;                                             // cmd_demux_001:src1_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire         cmd_demux_001_src1_endofpacket;                                               // cmd_demux_001:src1_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire         rsp_demux_src0_valid;                                                         // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [98:0] rsp_demux_src0_data;                                                          // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                         // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire  [16:0] rsp_demux_src0_channel;                                                       // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                 // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                   // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                     // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [98:0] rsp_demux_001_src0_data;                                                      // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                     // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire  [16:0] rsp_demux_001_src0_channel;                                                   // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                             // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                               // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                     // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [98:0] rsp_demux_002_src0_data;                                                      // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                     // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire  [16:0] rsp_demux_002_src0_channel;                                                   // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                             // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                               // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_002_src1_valid;                                                     // rsp_demux_002:src1_valid -> rsp_mux_001:sink0_valid
	wire  [98:0] rsp_demux_002_src1_data;                                                      // rsp_demux_002:src1_data -> rsp_mux_001:sink0_data
	wire         rsp_demux_002_src1_ready;                                                     // rsp_mux_001:sink0_ready -> rsp_demux_002:src1_ready
	wire  [16:0] rsp_demux_002_src1_channel;                                                   // rsp_demux_002:src1_channel -> rsp_mux_001:sink0_channel
	wire         rsp_demux_002_src1_startofpacket;                                             // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire         rsp_demux_002_src1_endofpacket;                                               // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire         rsp_demux_003_src0_valid;                                                     // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [98:0] rsp_demux_003_src0_data;                                                      // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                     // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire  [16:0] rsp_demux_003_src0_channel;                                                   // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                             // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                               // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                     // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [98:0] rsp_demux_004_src0_data;                                                      // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                                     // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire  [16:0] rsp_demux_004_src0_channel;                                                   // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                             // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                               // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                     // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [98:0] rsp_demux_005_src0_data;                                                      // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                                     // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire  [16:0] rsp_demux_005_src0_channel;                                                   // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                             // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                               // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire         rsp_demux_006_src0_valid;                                                     // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [98:0] rsp_demux_006_src0_data;                                                      // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire         rsp_demux_006_src0_ready;                                                     // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire  [16:0] rsp_demux_006_src0_channel;                                                   // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire         rsp_demux_006_src0_startofpacket;                                             // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire         rsp_demux_006_src0_endofpacket;                                               // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire         rsp_demux_007_src0_valid;                                                     // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [98:0] rsp_demux_007_src0_data;                                                      // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire         rsp_demux_007_src0_ready;                                                     // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire  [16:0] rsp_demux_007_src0_channel;                                                   // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire         rsp_demux_007_src0_startofpacket;                                             // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire         rsp_demux_007_src0_endofpacket;                                               // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire         rsp_demux_008_src0_valid;                                                     // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [98:0] rsp_demux_008_src0_data;                                                      // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire         rsp_demux_008_src0_ready;                                                     // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire  [16:0] rsp_demux_008_src0_channel;                                                   // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire         rsp_demux_008_src0_startofpacket;                                             // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire         rsp_demux_008_src0_endofpacket;                                               // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire         rsp_demux_009_src0_valid;                                                     // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [98:0] rsp_demux_009_src0_data;                                                      // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire         rsp_demux_009_src0_ready;                                                     // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire  [16:0] rsp_demux_009_src0_channel;                                                   // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire         rsp_demux_009_src0_startofpacket;                                             // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire         rsp_demux_009_src0_endofpacket;                                               // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire         rsp_demux_010_src0_valid;                                                     // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [98:0] rsp_demux_010_src0_data;                                                      // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire         rsp_demux_010_src0_ready;                                                     // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire  [16:0] rsp_demux_010_src0_channel;                                                   // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire         rsp_demux_010_src0_startofpacket;                                             // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire         rsp_demux_010_src0_endofpacket;                                               // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire         rsp_demux_011_src0_valid;                                                     // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [98:0] rsp_demux_011_src0_data;                                                      // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire         rsp_demux_011_src0_ready;                                                     // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire  [16:0] rsp_demux_011_src0_channel;                                                   // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire         rsp_demux_011_src0_startofpacket;                                             // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire         rsp_demux_011_src0_endofpacket;                                               // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire         rsp_demux_012_src0_valid;                                                     // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [98:0] rsp_demux_012_src0_data;                                                      // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire         rsp_demux_012_src0_ready;                                                     // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire  [16:0] rsp_demux_012_src0_channel;                                                   // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire         rsp_demux_012_src0_startofpacket;                                             // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire         rsp_demux_012_src0_endofpacket;                                               // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire         rsp_demux_012_src1_valid;                                                     // rsp_demux_012:src1_valid -> rsp_mux_001:sink1_valid
	wire  [98:0] rsp_demux_012_src1_data;                                                      // rsp_demux_012:src1_data -> rsp_mux_001:sink1_data
	wire         rsp_demux_012_src1_ready;                                                     // rsp_mux_001:sink1_ready -> rsp_demux_012:src1_ready
	wire  [16:0] rsp_demux_012_src1_channel;                                                   // rsp_demux_012:src1_channel -> rsp_mux_001:sink1_channel
	wire         rsp_demux_012_src1_startofpacket;                                             // rsp_demux_012:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire         rsp_demux_012_src1_endofpacket;                                               // rsp_demux_012:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire         rsp_demux_013_src0_valid;                                                     // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [98:0] rsp_demux_013_src0_data;                                                      // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire         rsp_demux_013_src0_ready;                                                     // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire  [16:0] rsp_demux_013_src0_channel;                                                   // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire         rsp_demux_013_src0_startofpacket;                                             // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire         rsp_demux_013_src0_endofpacket;                                               // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire         rsp_demux_014_src0_valid;                                                     // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [98:0] rsp_demux_014_src0_data;                                                      // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire         rsp_demux_014_src0_ready;                                                     // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire  [16:0] rsp_demux_014_src0_channel;                                                   // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire         rsp_demux_014_src0_startofpacket;                                             // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire         rsp_demux_014_src0_endofpacket;                                               // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire         rsp_demux_015_src0_valid;                                                     // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [98:0] rsp_demux_015_src0_data;                                                      // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire         rsp_demux_015_src0_ready;                                                     // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire  [16:0] rsp_demux_015_src0_channel;                                                   // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire         rsp_demux_015_src0_startofpacket;                                             // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire         rsp_demux_015_src0_endofpacket;                                               // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire         rsp_demux_016_src0_valid;                                                     // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [98:0] rsp_demux_016_src0_data;                                                      // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire         rsp_demux_016_src0_ready;                                                     // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire  [16:0] rsp_demux_016_src0_channel;                                                   // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire         rsp_demux_016_src0_startofpacket;                                             // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire         rsp_demux_016_src0_endofpacket;                                               // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire  [16:0] niosii_data_master_limiter_cmd_valid_data;                                    // NIOSII_data_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire  [16:0] niosii_instruction_master_limiter_cmd_valid_data;                             // NIOSII_instruction_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire         audio_video_avalon_av_config_slave_agent_rdata_fifo_src_valid;                // Audio_Video_avalon_av_config_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] audio_video_avalon_av_config_slave_agent_rdata_fifo_src_data;                 // Audio_Video_avalon_av_config_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         audio_video_avalon_av_config_slave_agent_rdata_fifo_src_ready;                // avalon_st_adapter:in_0_ready -> Audio_Video_avalon_av_config_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                                // avalon_st_adapter:out_0_valid -> Audio_Video_avalon_av_config_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                                 // avalon_st_adapter:out_0_data -> Audio_Video_avalon_av_config_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                                // Audio_Video_avalon_av_config_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                                // avalon_st_adapter:out_0_error -> Audio_Video_avalon_av_config_slave_agent:rdata_fifo_sink_error
	wire         jtag_avalon_jtag_slave_agent_rdata_fifo_src_valid;                            // JTAG_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] jtag_avalon_jtag_slave_agent_rdata_fifo_src_data;                             // JTAG_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         jtag_avalon_jtag_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_001:in_0_ready -> JTAG_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                            // avalon_st_adapter_001:out_0_valid -> JTAG_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                             // avalon_st_adapter_001:out_0_data -> JTAG_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                            // JTAG_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                            // avalon_st_adapter_001:out_0_error -> JTAG_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire         niosii_debug_mem_slave_agent_rdata_fifo_src_valid;                            // NIOSII_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] niosii_debug_mem_slave_agent_rdata_fifo_src_data;                             // NIOSII_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         niosii_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_002:in_0_ready -> NIOSII_debug_mem_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                            // avalon_st_adapter_002:out_0_valid -> NIOSII_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                             // avalon_st_adapter_002:out_0_data -> NIOSII_debug_mem_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                            // NIOSII_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                            // avalon_st_adapter_002:out_0_error -> NIOSII_debug_mem_slave_agent:rdata_fifo_sink_error
	wire         red_leds_s1_agent_rdata_fifo_src_valid;                                       // red_leds_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] red_leds_s1_agent_rdata_fifo_src_data;                                        // red_leds_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         red_leds_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_003:in_0_ready -> red_leds_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                            // avalon_st_adapter_003:out_0_valid -> red_leds_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                             // avalon_st_adapter_003:out_0_data -> red_leds_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                            // red_leds_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                            // avalon_st_adapter_003:out_0_error -> red_leds_s1_agent:rdata_fifo_sink_error
	wire         switches_s1_agent_rdata_fifo_src_valid;                                       // switches_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] switches_s1_agent_rdata_fifo_src_data;                                        // switches_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         switches_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_004:in_0_ready -> switches_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                            // avalon_st_adapter_004:out_0_valid -> switches_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                             // avalon_st_adapter_004:out_0_data -> switches_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                            // switches_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                            // avalon_st_adapter_004:out_0_error -> switches_s1_agent:rdata_fifo_sink_error
	wire         key_0_s1_agent_rdata_fifo_src_valid;                                          // key_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] key_0_s1_agent_rdata_fifo_src_data;                                           // key_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire         key_0_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_005:in_0_ready -> key_0_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_005_out_0_valid;                                            // avalon_st_adapter_005:out_0_valid -> key_0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                             // avalon_st_adapter_005:out_0_data -> key_0_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                            // key_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                            // avalon_st_adapter_005:out_0_error -> key_0_s1_agent:rdata_fifo_sink_error
	wire         seven_seg_0_s1_agent_rdata_fifo_src_valid;                                    // seven_seg_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire  [33:0] seven_seg_0_s1_agent_rdata_fifo_src_data;                                     // seven_seg_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire         seven_seg_0_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_006:in_0_ready -> seven_seg_0_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_006_out_0_valid;                                            // avalon_st_adapter_006:out_0_valid -> seven_seg_0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_006_out_0_data;                                             // avalon_st_adapter_006:out_0_data -> seven_seg_0_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_006_out_0_ready;                                            // seven_seg_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire   [0:0] avalon_st_adapter_006_out_0_error;                                            // avalon_st_adapter_006:out_0_error -> seven_seg_0_s1_agent:rdata_fifo_sink_error
	wire         seven_seg_1_s1_agent_rdata_fifo_src_valid;                                    // seven_seg_1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire  [33:0] seven_seg_1_s1_agent_rdata_fifo_src_data;                                     // seven_seg_1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire         seven_seg_1_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_007:in_0_ready -> seven_seg_1_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_007_out_0_valid;                                            // avalon_st_adapter_007:out_0_valid -> seven_seg_1_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_007_out_0_data;                                             // avalon_st_adapter_007:out_0_data -> seven_seg_1_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_007_out_0_ready;                                            // seven_seg_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire   [0:0] avalon_st_adapter_007_out_0_error;                                            // avalon_st_adapter_007:out_0_error -> seven_seg_1_s1_agent:rdata_fifo_sink_error
	wire         seven_seg_2_s1_agent_rdata_fifo_src_valid;                                    // seven_seg_2_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire  [33:0] seven_seg_2_s1_agent_rdata_fifo_src_data;                                     // seven_seg_2_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire         seven_seg_2_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_008:in_0_ready -> seven_seg_2_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_008_out_0_valid;                                            // avalon_st_adapter_008:out_0_valid -> seven_seg_2_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_008_out_0_data;                                             // avalon_st_adapter_008:out_0_data -> seven_seg_2_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_008_out_0_ready;                                            // seven_seg_2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire   [0:0] avalon_st_adapter_008_out_0_error;                                            // avalon_st_adapter_008:out_0_error -> seven_seg_2_s1_agent:rdata_fifo_sink_error
	wire         seven_seg_3_s1_agent_rdata_fifo_src_valid;                                    // seven_seg_3_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire  [33:0] seven_seg_3_s1_agent_rdata_fifo_src_data;                                     // seven_seg_3_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire         seven_seg_3_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_009:in_0_ready -> seven_seg_3_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_009_out_0_valid;                                            // avalon_st_adapter_009:out_0_valid -> seven_seg_3_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_009_out_0_data;                                             // avalon_st_adapter_009:out_0_data -> seven_seg_3_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_009_out_0_ready;                                            // seven_seg_3_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire   [0:0] avalon_st_adapter_009_out_0_error;                                            // avalon_st_adapter_009:out_0_error -> seven_seg_3_s1_agent:rdata_fifo_sink_error
	wire         seven_seg_4_s1_agent_rdata_fifo_src_valid;                                    // seven_seg_4_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire  [33:0] seven_seg_4_s1_agent_rdata_fifo_src_data;                                     // seven_seg_4_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire         seven_seg_4_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_010:in_0_ready -> seven_seg_4_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_010_out_0_valid;                                            // avalon_st_adapter_010:out_0_valid -> seven_seg_4_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_010_out_0_data;                                             // avalon_st_adapter_010:out_0_data -> seven_seg_4_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_010_out_0_ready;                                            // seven_seg_4_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire   [0:0] avalon_st_adapter_010_out_0_error;                                            // avalon_st_adapter_010:out_0_error -> seven_seg_4_s1_agent:rdata_fifo_sink_error
	wire         seven_seg_5_s1_agent_rdata_fifo_src_valid;                                    // seven_seg_5_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire  [33:0] seven_seg_5_s1_agent_rdata_fifo_src_data;                                     // seven_seg_5_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire         seven_seg_5_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_011:in_0_ready -> seven_seg_5_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_011_out_0_valid;                                            // avalon_st_adapter_011:out_0_valid -> seven_seg_5_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_011_out_0_data;                                             // avalon_st_adapter_011:out_0_data -> seven_seg_5_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_011_out_0_ready;                                            // seven_seg_5_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire   [0:0] avalon_st_adapter_011_out_0_error;                                            // avalon_st_adapter_011:out_0_error -> seven_seg_5_s1_agent:rdata_fifo_sink_error
	wire         sdram_s1_agent_rdata_fifo_src_valid;                                          // SDRAM_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire  [33:0] sdram_s1_agent_rdata_fifo_src_data;                                           // SDRAM_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire         sdram_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_012:in_0_ready -> SDRAM_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_012_out_0_valid;                                            // avalon_st_adapter_012:out_0_valid -> SDRAM_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_012_out_0_data;                                             // avalon_st_adapter_012:out_0_data -> SDRAM_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_012_out_0_ready;                                            // SDRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire   [0:0] avalon_st_adapter_012_out_0_error;                                            // avalon_st_adapter_012:out_0_error -> SDRAM_s1_agent:rdata_fifo_sink_error
	wire         timer_s1_agent_rdata_fifo_src_valid;                                          // Timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire  [33:0] timer_s1_agent_rdata_fifo_src_data;                                           // Timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire         timer_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_013:in_0_ready -> Timer_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_013_out_0_valid;                                            // avalon_st_adapter_013:out_0_valid -> Timer_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_013_out_0_data;                                             // avalon_st_adapter_013:out_0_data -> Timer_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_013_out_0_ready;                                            // Timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire   [0:0] avalon_st_adapter_013_out_0_error;                                            // avalon_st_adapter_013:out_0_error -> Timer_s1_agent:rdata_fifo_sink_error
	wire         key_1_s1_agent_rdata_fifo_src_valid;                                          // key_1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire  [33:0] key_1_s1_agent_rdata_fifo_src_data;                                           // key_1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire         key_1_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_014:in_0_ready -> key_1_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_014_out_0_valid;                                            // avalon_st_adapter_014:out_0_valid -> key_1_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_014_out_0_data;                                             // avalon_st_adapter_014:out_0_data -> key_1_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_014_out_0_ready;                                            // key_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire   [0:0] avalon_st_adapter_014_out_0_error;                                            // avalon_st_adapter_014:out_0_error -> key_1_s1_agent:rdata_fifo_sink_error
	wire         key_2_s1_agent_rdata_fifo_src_valid;                                          // key_2_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire  [33:0] key_2_s1_agent_rdata_fifo_src_data;                                           // key_2_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire         key_2_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_015:in_0_ready -> key_2_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_015_out_0_valid;                                            // avalon_st_adapter_015:out_0_valid -> key_2_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_015_out_0_data;                                             // avalon_st_adapter_015:out_0_data -> key_2_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_015_out_0_ready;                                            // key_2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire   [0:0] avalon_st_adapter_015_out_0_error;                                            // avalon_st_adapter_015:out_0_error -> key_2_s1_agent:rdata_fifo_sink_error
	wire         key_3_s1_agent_rdata_fifo_src_valid;                                          // key_3_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire  [33:0] key_3_s1_agent_rdata_fifo_src_data;                                           // key_3_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire         key_3_s1_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_016:in_0_ready -> key_3_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_016_out_0_valid;                                            // avalon_st_adapter_016:out_0_valid -> key_3_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_016_out_0_data;                                             // avalon_st_adapter_016:out_0_data -> key_3_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_016_out_0_ready;                                            // key_3_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire   [0:0] avalon_st_adapter_016_out_0_error;                                            // avalon_st_adapter_016:out_0_error -> key_3_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (19),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) niosii_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                         //                       clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (niosii_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (niosii_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (niosii_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (niosii_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (niosii_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (niosii_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (niosii_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (niosii_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (niosii_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (niosii_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (niosii_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (NIOSII_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (NIOSII_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (NIOSII_data_master_byteenable),                                         //                          .byteenable
		.av_read                (NIOSII_data_master_read),                                               //                          .read
		.av_readdata            (NIOSII_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (NIOSII_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (NIOSII_data_master_write),                                              //                          .write
		.av_writedata           (NIOSII_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (NIOSII_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                  //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (19),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) niosii_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                                //                       clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (niosii_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (niosii_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (niosii_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (niosii_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (niosii_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (niosii_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (niosii_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (niosii_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (niosii_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (niosii_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (niosii_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (NIOSII_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (NIOSII_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (NIOSII_instruction_master_read),                                               //                          .read
		.av_readdata            (NIOSII_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (NIOSII_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                         //               (terminated)
		.av_byteenable          (4'b1111),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                         //               (terminated)
		.av_begintransfer       (1'b0),                                                                         //               (terminated)
		.av_chipselect          (1'b0),                                                                         //               (terminated)
		.av_write               (1'b0),                                                                         //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                         //               (terminated)
		.av_lock                (1'b0),                                                                         //               (terminated)
		.av_debugaccess         (1'b0),                                                                         //               (terminated)
		.uav_clken              (),                                                                             //               (terminated)
		.av_clken               (1'b1),                                                                         //               (terminated)
		.uav_response           (2'b00),                                                                        //               (terminated)
		.av_response            (),                                                                             //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid  ()                                                                              //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_video_avalon_av_config_slave_translator (
		.clk                    (clk_0_clk_clk),                                             //                      clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset),                  //                    reset.reset
		.uav_address            (audio_video_avalon_av_config_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (audio_video_avalon_av_config_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (audio_video_avalon_av_config_slave_agent_m0_read),          //                         .read
		.uav_write              (audio_video_avalon_av_config_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (audio_video_avalon_av_config_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (audio_video_avalon_av_config_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (audio_video_avalon_av_config_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (audio_video_avalon_av_config_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (audio_video_avalon_av_config_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (audio_video_avalon_av_config_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (audio_video_avalon_av_config_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Audio_Video_avalon_av_config_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Audio_Video_avalon_av_config_slave_write),                  //                         .write
		.av_read                (Audio_Video_avalon_av_config_slave_read),                   //                         .read
		.av_readdata            (Audio_Video_avalon_av_config_slave_readdata),               //                         .readdata
		.av_writedata           (Audio_Video_avalon_av_config_slave_writedata),              //                         .writedata
		.av_byteenable          (Audio_Video_avalon_av_config_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (Audio_Video_avalon_av_config_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (JTAG_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (jtag_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAG_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAG_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAG_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAG_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAG_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAG_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAG_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) niosii_debug_mem_slave_translator (
		.clk                    (clk_0_clk_clk),                                 //                      clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (niosii_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (niosii_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (niosii_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (niosii_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (niosii_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (niosii_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (niosii_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (niosii_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (niosii_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (niosii_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (niosii_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (NIOSII_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (NIOSII_debug_mem_slave_write),                  //                         .write
		.av_read                (NIOSII_debug_mem_slave_read),                   //                         .read
		.av_readdata            (NIOSII_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (NIOSII_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (NIOSII_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (NIOSII_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (NIOSII_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) red_leds_s1_translator (
		.clk                    (clk_0_clk_clk),                            //                      clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (red_leds_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (red_leds_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (red_leds_s1_agent_m0_read),                //                         .read
		.uav_write              (red_leds_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (red_leds_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (red_leds_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (red_leds_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (red_leds_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (red_leds_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (red_leds_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (red_leds_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (red_leds_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (red_leds_s1_write),                        //                         .write
		.av_readdata            (red_leds_s1_readdata),                     //                         .readdata
		.av_writedata           (red_leds_s1_writedata),                    //                         .writedata
		.av_chipselect          (red_leds_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) switches_s1_translator (
		.clk                    (clk_0_clk_clk),                            //                      clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (switches_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (switches_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (switches_s1_agent_m0_read),                //                         .read
		.uav_write              (switches_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (switches_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (switches_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (switches_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (switches_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (switches_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (switches_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (switches_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (switches_s1_address),                      //      avalon_anti_slave_0.address
		.av_readdata            (switches_s1_readdata),                     //                         .readdata
		.av_write               (),                                         //              (terminated)
		.av_read                (),                                         //              (terminated)
		.av_writedata           (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) key_0_s1_translator (
		.clk                    (clk_0_clk_clk),                            //                      clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (key_0_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (key_0_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (key_0_s1_agent_m0_read),                   //                         .read
		.uav_write              (key_0_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (key_0_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (key_0_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (key_0_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (key_0_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (key_0_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (key_0_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (key_0_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (key_0_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (key_0_s1_write),                           //                         .write
		.av_readdata            (key_0_s1_readdata),                        //                         .readdata
		.av_writedata           (key_0_s1_writedata),                       //                         .writedata
		.av_chipselect          (key_0_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) seven_seg_0_s1_translator (
		.clk                    (clk_0_clk_clk),                            //                      clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (seven_seg_0_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (seven_seg_0_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (seven_seg_0_s1_agent_m0_read),             //                         .read
		.uav_write              (seven_seg_0_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (seven_seg_0_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (seven_seg_0_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (seven_seg_0_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (seven_seg_0_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (seven_seg_0_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (seven_seg_0_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (seven_seg_0_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (seven_seg_0_s1_address),                   //      avalon_anti_slave_0.address
		.av_write               (seven_seg_0_s1_write),                     //                         .write
		.av_readdata            (seven_seg_0_s1_readdata),                  //                         .readdata
		.av_writedata           (seven_seg_0_s1_writedata),                 //                         .writedata
		.av_chipselect          (seven_seg_0_s1_chipselect),                //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) seven_seg_1_s1_translator (
		.clk                    (clk_0_clk_clk),                            //                      clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (seven_seg_1_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (seven_seg_1_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (seven_seg_1_s1_agent_m0_read),             //                         .read
		.uav_write              (seven_seg_1_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (seven_seg_1_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (seven_seg_1_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (seven_seg_1_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (seven_seg_1_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (seven_seg_1_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (seven_seg_1_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (seven_seg_1_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (seven_seg_1_s1_address),                   //      avalon_anti_slave_0.address
		.av_write               (seven_seg_1_s1_write),                     //                         .write
		.av_readdata            (seven_seg_1_s1_readdata),                  //                         .readdata
		.av_writedata           (seven_seg_1_s1_writedata),                 //                         .writedata
		.av_chipselect          (seven_seg_1_s1_chipselect),                //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) seven_seg_2_s1_translator (
		.clk                    (clk_0_clk_clk),                            //                      clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (seven_seg_2_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (seven_seg_2_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (seven_seg_2_s1_agent_m0_read),             //                         .read
		.uav_write              (seven_seg_2_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (seven_seg_2_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (seven_seg_2_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (seven_seg_2_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (seven_seg_2_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (seven_seg_2_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (seven_seg_2_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (seven_seg_2_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (seven_seg_2_s1_address),                   //      avalon_anti_slave_0.address
		.av_write               (seven_seg_2_s1_write),                     //                         .write
		.av_readdata            (seven_seg_2_s1_readdata),                  //                         .readdata
		.av_writedata           (seven_seg_2_s1_writedata),                 //                         .writedata
		.av_chipselect          (seven_seg_2_s1_chipselect),                //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) seven_seg_3_s1_translator (
		.clk                    (clk_0_clk_clk),                            //                      clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (seven_seg_3_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (seven_seg_3_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (seven_seg_3_s1_agent_m0_read),             //                         .read
		.uav_write              (seven_seg_3_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (seven_seg_3_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (seven_seg_3_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (seven_seg_3_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (seven_seg_3_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (seven_seg_3_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (seven_seg_3_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (seven_seg_3_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (seven_seg_3_s1_address),                   //      avalon_anti_slave_0.address
		.av_write               (seven_seg_3_s1_write),                     //                         .write
		.av_readdata            (seven_seg_3_s1_readdata),                  //                         .readdata
		.av_writedata           (seven_seg_3_s1_writedata),                 //                         .writedata
		.av_chipselect          (seven_seg_3_s1_chipselect),                //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) seven_seg_4_s1_translator (
		.clk                    (clk_0_clk_clk),                            //                      clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (seven_seg_4_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (seven_seg_4_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (seven_seg_4_s1_agent_m0_read),             //                         .read
		.uav_write              (seven_seg_4_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (seven_seg_4_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (seven_seg_4_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (seven_seg_4_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (seven_seg_4_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (seven_seg_4_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (seven_seg_4_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (seven_seg_4_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (seven_seg_4_s1_address),                   //      avalon_anti_slave_0.address
		.av_write               (seven_seg_4_s1_write),                     //                         .write
		.av_readdata            (seven_seg_4_s1_readdata),                  //                         .readdata
		.av_writedata           (seven_seg_4_s1_writedata),                 //                         .writedata
		.av_chipselect          (seven_seg_4_s1_chipselect),                //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) seven_seg_5_s1_translator (
		.clk                    (clk_0_clk_clk),                            //                      clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (seven_seg_5_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (seven_seg_5_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (seven_seg_5_s1_agent_m0_read),             //                         .read
		.uav_write              (seven_seg_5_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (seven_seg_5_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (seven_seg_5_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (seven_seg_5_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (seven_seg_5_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (seven_seg_5_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (seven_seg_5_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (seven_seg_5_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (seven_seg_5_s1_address),                   //      avalon_anti_slave_0.address
		.av_write               (seven_seg_5_s1_write),                     //                         .write
		.av_readdata            (seven_seg_5_s1_readdata),                  //                         .readdata
		.av_writedata           (seven_seg_5_s1_writedata),                 //                         .writedata
		.av_chipselect          (seven_seg_5_s1_chipselect),                //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (clk_0_clk_clk),                            //                      clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                   //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (SDRAM_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (SDRAM_s1_write),                           //                         .write
		.av_readdata            (SDRAM_s1_readdata),                        //                         .readdata
		.av_writedata           (SDRAM_s1_writedata),                       //                         .writedata
		.av_byteenable          (SDRAM_s1_byteenable),                      //                         .byteenable
		.av_chipselect          (SDRAM_s1_chipselect),                      //                         .chipselect
		.av_clken               (SDRAM_s1_clken),                           //                         .clken
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_s1_translator (
		.clk                    (clk_0_clk_clk),                            //                      clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (timer_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (timer_s1_agent_m0_read),                   //                         .read
		.uav_write              (timer_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (timer_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (timer_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (timer_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (timer_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (timer_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (timer_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (timer_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (Timer_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (Timer_s1_write),                           //                         .write
		.av_readdata            (Timer_s1_readdata),                        //                         .readdata
		.av_writedata           (Timer_s1_writedata),                       //                         .writedata
		.av_chipselect          (Timer_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) key_1_s1_translator (
		.clk                    (clk_0_clk_clk),                            //                      clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (key_1_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (key_1_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (key_1_s1_agent_m0_read),                   //                         .read
		.uav_write              (key_1_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (key_1_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (key_1_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (key_1_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (key_1_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (key_1_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (key_1_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (key_1_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (key_1_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (key_1_s1_write),                           //                         .write
		.av_readdata            (key_1_s1_readdata),                        //                         .readdata
		.av_writedata           (key_1_s1_writedata),                       //                         .writedata
		.av_chipselect          (key_1_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) key_2_s1_translator (
		.clk                    (clk_0_clk_clk),                            //                      clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (key_2_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (key_2_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (key_2_s1_agent_m0_read),                   //                         .read
		.uav_write              (key_2_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (key_2_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (key_2_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (key_2_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (key_2_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (key_2_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (key_2_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (key_2_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (key_2_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (key_2_s1_write),                           //                         .write
		.av_readdata            (key_2_s1_readdata),                        //                         .readdata
		.av_writedata           (key_2_s1_writedata),                       //                         .writedata
		.av_chipselect          (key_2_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (19),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) key_3_s1_translator (
		.clk                    (clk_0_clk_clk),                            //                      clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (key_3_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (key_3_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (key_3_s1_agent_m0_read),                   //                         .read
		.uav_write              (key_3_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (key_3_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (key_3_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (key_3_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (key_3_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (key_3_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (key_3_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (key_3_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (key_3_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (key_3_s1_write),                           //                         .write
		.av_readdata            (key_3_s1_readdata),                        //                         .readdata
		.av_writedata           (key_3_s1_writedata),                       //                         .writedata
		.av_chipselect          (key_3_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                         //              (terminated)
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_burstcount          (),                                         //              (terminated)
		.av_byteenable          (),                                         //              (terminated)
		.av_readdatavalid       (1'b0),                                     //              (terminated)
		.av_waitrequest         (1'b0),                                     //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_debugaccess         (),                                         //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_QOS_H                 (75),
		.PKT_QOS_L                 (75),
		.PKT_DATA_SIDEBAND_H       (73),
		.PKT_DATA_SIDEBAND_L       (73),
		.PKT_ADDR_SIDEBAND_H       (72),
		.PKT_ADDR_SIDEBAND_L       (72),
		.PKT_BURST_TYPE_H          (71),
		.PKT_BURST_TYPE_L          (70),
		.PKT_CACHE_H               (93),
		.PKT_CACHE_L               (90),
		.PKT_THREAD_ID_H           (86),
		.PKT_THREAD_ID_L           (86),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (17),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) niosii_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                         //       clk.clk
		.reset                 (NIOSII_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (niosii_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (niosii_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (niosii_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (niosii_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (niosii_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (niosii_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (niosii_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (niosii_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (niosii_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (niosii_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (niosii_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (niosii_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (niosii_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (niosii_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (niosii_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (niosii_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (niosii_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (niosii_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (niosii_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (niosii_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (niosii_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (niosii_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_QOS_H                 (75),
		.PKT_QOS_L                 (75),
		.PKT_DATA_SIDEBAND_H       (73),
		.PKT_DATA_SIDEBAND_L       (73),
		.PKT_ADDR_SIDEBAND_H       (72),
		.PKT_ADDR_SIDEBAND_L       (72),
		.PKT_BURST_TYPE_H          (71),
		.PKT_BURST_TYPE_L          (70),
		.PKT_CACHE_H               (93),
		.PKT_CACHE_L               (90),
		.PKT_THREAD_ID_H           (86),
		.PKT_THREAD_ID_L           (86),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_EXCLUSIVE       (60),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (17),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) niosii_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                                //       clk.clk
		.reset                 (NIOSII_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (niosii_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (niosii_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (niosii_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (niosii_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (niosii_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (niosii_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (niosii_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (niosii_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (niosii_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (niosii_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (niosii_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (niosii_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (niosii_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (niosii_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (niosii_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (niosii_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (niosii_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (niosii_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (niosii_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (niosii_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (niosii_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (niosii_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) audio_video_avalon_av_config_slave_agent (
		.clk                     (clk_0_clk_clk),                                                       //             clk.clk
		.reset                   (NIOSII_reset_reset_bridge_in_reset_reset),                            //       clk_reset.reset
		.m0_address              (audio_video_avalon_av_config_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (audio_video_avalon_av_config_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (audio_video_avalon_av_config_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (audio_video_avalon_av_config_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (audio_video_avalon_av_config_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (audio_video_avalon_av_config_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (audio_video_avalon_av_config_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (audio_video_avalon_av_config_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (audio_video_avalon_av_config_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (audio_video_avalon_av_config_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (audio_video_avalon_av_config_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (audio_video_avalon_av_config_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (audio_video_avalon_av_config_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (audio_video_avalon_av_config_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (audio_video_avalon_av_config_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (audio_video_avalon_av_config_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                   //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                   //                .valid
		.cp_data                 (cmd_mux_src_data),                                                    //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                             //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                                 //                .channel
		.rf_sink_ready           (audio_video_avalon_av_config_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (audio_video_avalon_av_config_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (audio_video_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (audio_video_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (audio_video_avalon_av_config_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (audio_video_avalon_av_config_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (audio_video_avalon_av_config_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (audio_video_avalon_av_config_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (audio_video_avalon_av_config_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (audio_video_avalon_av_config_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (audio_video_avalon_av_config_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_video_avalon_av_config_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (audio_video_avalon_av_config_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_video_avalon_av_config_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                       //       clk.clk
		.reset             (NIOSII_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_data           (audio_video_avalon_av_config_slave_agent_rf_source_data),             //        in.data
		.in_valid          (audio_video_avalon_av_config_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_video_avalon_av_config_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_video_avalon_av_config_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_video_avalon_av_config_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_video_avalon_av_config_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_video_avalon_av_config_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_video_avalon_av_config_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_video_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_video_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                           //             clk.clk
		.reset                   (JTAG_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                 //                .channel
		.rf_sink_ready           (jtag_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (jtag_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (JTAG_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) niosii_debug_mem_slave_agent (
		.clk                     (clk_0_clk_clk),                                           //             clk.clk
		.reset                   (NIOSII_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (niosii_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (niosii_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (niosii_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (niosii_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (niosii_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (niosii_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (niosii_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (niosii_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (niosii_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (niosii_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (niosii_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (niosii_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (niosii_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (niosii_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (niosii_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (niosii_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                 //                .channel
		.rf_sink_ready           (niosii_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (niosii_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (niosii_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (niosii_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (niosii_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (niosii_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (niosii_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (niosii_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (niosii_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (niosii_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (niosii_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (niosii_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (niosii_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) niosii_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (NIOSII_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (niosii_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (niosii_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (niosii_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (niosii_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (niosii_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (niosii_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (niosii_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (niosii_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (niosii_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (niosii_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) red_leds_s1_agent (
		.clk                     (clk_0_clk_clk),                                //             clk.clk
		.reset                   (NIOSII_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (red_leds_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (red_leds_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (red_leds_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (red_leds_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (red_leds_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (red_leds_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (red_leds_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (red_leds_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (red_leds_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (red_leds_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (red_leds_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (red_leds_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (red_leds_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (red_leds_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (red_leds_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (red_leds_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_003_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                      //                .channel
		.rf_sink_ready           (red_leds_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (red_leds_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (red_leds_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (red_leds_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (red_leds_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (red_leds_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (red_leds_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (red_leds_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (red_leds_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (red_leds_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),            //                .error
		.rdata_fifo_src_ready    (red_leds_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (red_leds_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (red_leds_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) red_leds_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (NIOSII_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (red_leds_s1_agent_rf_source_data),             //        in.data
		.in_valid          (red_leds_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (red_leds_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (red_leds_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (red_leds_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (red_leds_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (red_leds_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (red_leds_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (red_leds_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (red_leds_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) switches_s1_agent (
		.clk                     (clk_0_clk_clk),                                //             clk.clk
		.reset                   (NIOSII_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (switches_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (switches_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (switches_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (switches_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (switches_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (switches_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (switches_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (switches_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (switches_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (switches_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (switches_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (switches_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (switches_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (switches_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (switches_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (switches_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_004_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                      //                .channel
		.rf_sink_ready           (switches_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (switches_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (switches_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (switches_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (switches_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (switches_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (switches_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (switches_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (switches_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (switches_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),            //                .error
		.rdata_fifo_src_ready    (switches_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (switches_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (switches_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) switches_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                //       clk.clk
		.reset             (NIOSII_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (switches_s1_agent_rf_source_data),             //        in.data
		.in_valid          (switches_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (switches_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (switches_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (switches_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (switches_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (switches_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (switches_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (switches_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (switches_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) key_0_s1_agent (
		.clk                     (clk_0_clk_clk),                             //             clk.clk
		.reset                   (NIOSII_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (key_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (key_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (key_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (key_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (key_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (key_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (key_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (key_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (key_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (key_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (key_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (key_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (key_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (key_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (key_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (key_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_005_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                   //                .channel
		.rf_sink_ready           (key_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (key_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (key_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (key_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (key_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (key_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (key_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (key_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (key_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (key_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),         //                .error
		.rdata_fifo_src_ready    (key_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (key_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (key_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                             //       clk.clk
		.reset             (NIOSII_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (key_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (key_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (key_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (key_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (key_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (key_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (key_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (key_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (key_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (key_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) seven_seg_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (NIOSII_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (seven_seg_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (seven_seg_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (seven_seg_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (seven_seg_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (seven_seg_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (seven_seg_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (seven_seg_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (seven_seg_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (seven_seg_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (seven_seg_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (seven_seg_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (seven_seg_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (seven_seg_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (seven_seg_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (seven_seg_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (seven_seg_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_006_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                         //                .channel
		.rf_sink_ready           (seven_seg_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (seven_seg_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (seven_seg_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (seven_seg_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (seven_seg_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (seven_seg_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (seven_seg_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (seven_seg_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (seven_seg_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (seven_seg_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),               //                .error
		.rdata_fifo_src_ready    (seven_seg_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (seven_seg_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (seven_seg_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seven_seg_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (NIOSII_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (seven_seg_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (seven_seg_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (seven_seg_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (seven_seg_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (seven_seg_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (seven_seg_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (seven_seg_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (seven_seg_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (seven_seg_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (seven_seg_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) seven_seg_1_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (NIOSII_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (seven_seg_1_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (seven_seg_1_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (seven_seg_1_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (seven_seg_1_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (seven_seg_1_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (seven_seg_1_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (seven_seg_1_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (seven_seg_1_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (seven_seg_1_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (seven_seg_1_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (seven_seg_1_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (seven_seg_1_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (seven_seg_1_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (seven_seg_1_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (seven_seg_1_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (seven_seg_1_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_007_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                         //                .channel
		.rf_sink_ready           (seven_seg_1_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (seven_seg_1_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (seven_seg_1_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (seven_seg_1_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (seven_seg_1_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (seven_seg_1_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (seven_seg_1_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (seven_seg_1_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (seven_seg_1_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (seven_seg_1_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),               //                .error
		.rdata_fifo_src_ready    (seven_seg_1_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (seven_seg_1_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (seven_seg_1_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seven_seg_1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (NIOSII_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (seven_seg_1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (seven_seg_1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (seven_seg_1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (seven_seg_1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (seven_seg_1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (seven_seg_1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (seven_seg_1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (seven_seg_1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (seven_seg_1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (seven_seg_1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) seven_seg_2_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (NIOSII_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (seven_seg_2_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (seven_seg_2_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (seven_seg_2_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (seven_seg_2_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (seven_seg_2_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (seven_seg_2_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (seven_seg_2_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (seven_seg_2_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (seven_seg_2_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (seven_seg_2_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (seven_seg_2_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (seven_seg_2_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (seven_seg_2_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (seven_seg_2_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (seven_seg_2_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (seven_seg_2_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_008_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                         //                .channel
		.rf_sink_ready           (seven_seg_2_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (seven_seg_2_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (seven_seg_2_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (seven_seg_2_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (seven_seg_2_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (seven_seg_2_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (seven_seg_2_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (seven_seg_2_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (seven_seg_2_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (seven_seg_2_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),               //                .error
		.rdata_fifo_src_ready    (seven_seg_2_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (seven_seg_2_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (seven_seg_2_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seven_seg_2_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (NIOSII_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (seven_seg_2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (seven_seg_2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (seven_seg_2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (seven_seg_2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (seven_seg_2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (seven_seg_2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (seven_seg_2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (seven_seg_2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (seven_seg_2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (seven_seg_2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) seven_seg_3_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (NIOSII_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (seven_seg_3_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (seven_seg_3_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (seven_seg_3_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (seven_seg_3_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (seven_seg_3_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (seven_seg_3_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (seven_seg_3_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (seven_seg_3_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (seven_seg_3_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (seven_seg_3_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (seven_seg_3_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (seven_seg_3_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (seven_seg_3_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (seven_seg_3_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (seven_seg_3_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (seven_seg_3_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_009_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                         //                .channel
		.rf_sink_ready           (seven_seg_3_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (seven_seg_3_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (seven_seg_3_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (seven_seg_3_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (seven_seg_3_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (seven_seg_3_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (seven_seg_3_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (seven_seg_3_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (seven_seg_3_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (seven_seg_3_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),               //                .error
		.rdata_fifo_src_ready    (seven_seg_3_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (seven_seg_3_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (seven_seg_3_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seven_seg_3_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (NIOSII_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (seven_seg_3_s1_agent_rf_source_data),             //        in.data
		.in_valid          (seven_seg_3_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (seven_seg_3_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (seven_seg_3_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (seven_seg_3_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (seven_seg_3_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (seven_seg_3_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (seven_seg_3_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (seven_seg_3_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (seven_seg_3_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) seven_seg_4_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (NIOSII_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (seven_seg_4_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (seven_seg_4_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (seven_seg_4_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (seven_seg_4_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (seven_seg_4_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (seven_seg_4_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (seven_seg_4_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (seven_seg_4_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (seven_seg_4_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (seven_seg_4_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (seven_seg_4_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (seven_seg_4_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (seven_seg_4_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (seven_seg_4_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (seven_seg_4_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (seven_seg_4_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_010_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                         //                .channel
		.rf_sink_ready           (seven_seg_4_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (seven_seg_4_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (seven_seg_4_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (seven_seg_4_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (seven_seg_4_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (seven_seg_4_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (seven_seg_4_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (seven_seg_4_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (seven_seg_4_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (seven_seg_4_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),               //                .error
		.rdata_fifo_src_ready    (seven_seg_4_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (seven_seg_4_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (seven_seg_4_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seven_seg_4_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (NIOSII_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (seven_seg_4_s1_agent_rf_source_data),             //        in.data
		.in_valid          (seven_seg_4_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (seven_seg_4_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (seven_seg_4_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (seven_seg_4_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (seven_seg_4_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (seven_seg_4_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (seven_seg_4_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (seven_seg_4_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (seven_seg_4_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) seven_seg_5_s1_agent (
		.clk                     (clk_0_clk_clk),                                   //             clk.clk
		.reset                   (NIOSII_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (seven_seg_5_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (seven_seg_5_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (seven_seg_5_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (seven_seg_5_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (seven_seg_5_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (seven_seg_5_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (seven_seg_5_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (seven_seg_5_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (seven_seg_5_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (seven_seg_5_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (seven_seg_5_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (seven_seg_5_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (seven_seg_5_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (seven_seg_5_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (seven_seg_5_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (seven_seg_5_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_011_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                         //                .channel
		.rf_sink_ready           (seven_seg_5_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (seven_seg_5_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (seven_seg_5_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (seven_seg_5_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (seven_seg_5_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (seven_seg_5_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (seven_seg_5_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (seven_seg_5_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (seven_seg_5_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (seven_seg_5_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),               //                .error
		.rdata_fifo_src_ready    (seven_seg_5_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (seven_seg_5_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (seven_seg_5_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) seven_seg_5_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (NIOSII_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (seven_seg_5_s1_agent_rf_source_data),             //        in.data
		.in_valid          (seven_seg_5_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (seven_seg_5_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (seven_seg_5_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (seven_seg_5_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (seven_seg_5_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (seven_seg_5_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (seven_seg_5_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (seven_seg_5_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (seven_seg_5_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (clk_0_clk_clk),                             //             clk.clk
		.reset                   (NIOSII_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_012_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                   //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),         //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                             //       clk.clk
		.reset             (NIOSII_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_s1_agent (
		.clk                     (clk_0_clk_clk),                             //             clk.clk
		.reset                   (NIOSII_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (timer_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timer_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timer_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timer_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timer_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (timer_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timer_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timer_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (timer_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timer_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (timer_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (timer_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timer_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (timer_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (timer_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (timer_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_013_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                   //                .channel
		.rf_sink_ready           (timer_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timer_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timer_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timer_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timer_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timer_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timer_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timer_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timer_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timer_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),         //                .error
		.rdata_fifo_src_ready    (timer_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timer_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                             //       clk.clk
		.reset             (NIOSII_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) key_1_s1_agent (
		.clk                     (clk_0_clk_clk),                             //             clk.clk
		.reset                   (NIOSII_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (key_1_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (key_1_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (key_1_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (key_1_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (key_1_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (key_1_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (key_1_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (key_1_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (key_1_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (key_1_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (key_1_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (key_1_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (key_1_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (key_1_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (key_1_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (key_1_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_014_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                   //                .channel
		.rf_sink_ready           (key_1_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (key_1_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (key_1_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (key_1_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (key_1_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (key_1_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (key_1_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (key_1_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (key_1_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (key_1_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),         //                .error
		.rdata_fifo_src_ready    (key_1_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (key_1_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (key_1_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                             //       clk.clk
		.reset             (NIOSII_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (key_1_s1_agent_rf_source_data),             //        in.data
		.in_valid          (key_1_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (key_1_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (key_1_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (key_1_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (key_1_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (key_1_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (key_1_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (key_1_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (key_1_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) key_2_s1_agent (
		.clk                     (clk_0_clk_clk),                             //             clk.clk
		.reset                   (NIOSII_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (key_2_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (key_2_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (key_2_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (key_2_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (key_2_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (key_2_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (key_2_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (key_2_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (key_2_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (key_2_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (key_2_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (key_2_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (key_2_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (key_2_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (key_2_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (key_2_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_015_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                   //                .channel
		.rf_sink_ready           (key_2_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (key_2_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (key_2_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (key_2_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (key_2_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (key_2_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (key_2_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (key_2_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (key_2_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (key_2_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),         //                .error
		.rdata_fifo_src_ready    (key_2_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (key_2_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (key_2_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_2_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                             //       clk.clk
		.reset             (NIOSII_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (key_2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (key_2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (key_2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (key_2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (key_2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (key_2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (key_2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (key_2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (key_2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (key_2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (69),
		.PKT_BURST_SIZE_L          (67),
		.PKT_TRANS_LOCK            (59),
		.PKT_BEGIN_BURST           (74),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (66),
		.PKT_BURSTWRAP_L           (64),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_ADDR_H                (54),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (55),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.PKT_TRANS_READ            (58),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) key_3_s1_agent (
		.clk                     (clk_0_clk_clk),                             //             clk.clk
		.reset                   (NIOSII_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (key_3_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (key_3_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (key_3_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (key_3_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (key_3_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (key_3_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (key_3_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (key_3_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (key_3_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (key_3_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (key_3_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (key_3_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (key_3_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (key_3_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (key_3_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (key_3_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                     //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                     //                .valid
		.cp_data                 (cmd_mux_016_src_data),                      //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),             //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),               //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                   //                .channel
		.rf_sink_ready           (key_3_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (key_3_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (key_3_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (key_3_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (key_3_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (key_3_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (key_3_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (key_3_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (key_3_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (key_3_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),         //                .error
		.rdata_fifo_src_ready    (key_3_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (key_3_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (key_3_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) key_3_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                             //       clk.clk
		.reset             (NIOSII_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (key_3_s1_agent_rf_source_data),             //        in.data
		.in_valid          (key_3_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (key_3_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (key_3_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (key_3_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (key_3_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (key_3_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (key_3_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (key_3_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (key_3_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	System_mm_interconnect_0_router router (
		.sink_ready         (niosii_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (niosii_data_master_agent_cp_valid),         //          .valid
		.sink_data          (niosii_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (niosii_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (niosii_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                          //       src.ready
		.src_valid          (router_src_valid),                          //          .valid
		.src_data           (router_src_data),                           //          .data
		.src_channel        (router_src_channel),                        //          .channel
		.src_startofpacket  (router_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                     //          .endofpacket
	);

	System_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (niosii_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (niosii_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (niosii_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (niosii_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (niosii_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                             //       src.ready
		.src_valid          (router_001_src_valid),                             //          .valid
		.src_data           (router_001_src_data),                              //          .data
		.src_channel        (router_001_src_channel),                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                        //          .endofpacket
	);

	System_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (audio_video_avalon_av_config_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (audio_video_avalon_av_config_slave_agent_rp_valid),         //          .valid
		.sink_data          (audio_video_avalon_av_config_slave_agent_rp_data),          //          .data
		.sink_startofpacket (audio_video_avalon_av_config_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (audio_video_avalon_av_config_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                             //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.src_ready          (router_002_src_ready),                                      //       src.ready
		.src_valid          (router_002_src_valid),                                      //          .valid
		.src_data           (router_002_src_data),                                       //          .data
		.src_channel        (router_002_src_channel),                                    //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                 //          .endofpacket
	);

	System_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (jtag_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (JTAG_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_003_src_ready),                          //       src.ready
		.src_valid          (router_003_src_valid),                          //          .valid
		.src_data           (router_003_src_data),                           //          .data
		.src_channel        (router_003_src_channel),                        //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                     //          .endofpacket
	);

	System_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (niosii_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (niosii_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (niosii_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (niosii_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (niosii_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                 //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_004_src_ready),                          //       src.ready
		.src_valid          (router_004_src_valid),                          //          .valid
		.src_data           (router_004_src_data),                           //          .data
		.src_channel        (router_004_src_channel),                        //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                     //          .endofpacket
	);

	System_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (red_leds_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (red_leds_s1_agent_rp_valid),               //          .valid
		.sink_data          (red_leds_s1_agent_rp_data),                //          .data
		.sink_startofpacket (red_leds_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (red_leds_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                     //       src.ready
		.src_valid          (router_005_src_valid),                     //          .valid
		.src_data           (router_005_src_data),                      //          .data
		.src_channel        (router_005_src_channel),                   //          .channel
		.src_startofpacket  (router_005_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (switches_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (switches_s1_agent_rp_valid),               //          .valid
		.sink_data          (switches_s1_agent_rp_data),                //          .data
		.sink_startofpacket (switches_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (switches_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                     //       src.ready
		.src_valid          (router_006_src_valid),                     //          .valid
		.src_data           (router_006_src_data),                      //          .data
		.src_channel        (router_006_src_channel),                   //          .channel
		.src_startofpacket  (router_006_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (key_0_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (key_0_s1_agent_rp_valid),                  //          .valid
		.sink_data          (key_0_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (key_0_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (key_0_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                     //       src.ready
		.src_valid          (router_007_src_valid),                     //          .valid
		.src_data           (router_007_src_data),                      //          .data
		.src_channel        (router_007_src_channel),                   //          .channel
		.src_startofpacket  (router_007_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (seven_seg_0_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (seven_seg_0_s1_agent_rp_valid),            //          .valid
		.sink_data          (seven_seg_0_s1_agent_rp_data),             //          .data
		.sink_startofpacket (seven_seg_0_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (seven_seg_0_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                     //       src.ready
		.src_valid          (router_008_src_valid),                     //          .valid
		.src_data           (router_008_src_data),                      //          .data
		.src_channel        (router_008_src_channel),                   //          .channel
		.src_startofpacket  (router_008_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (seven_seg_1_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (seven_seg_1_s1_agent_rp_valid),            //          .valid
		.sink_data          (seven_seg_1_s1_agent_rp_data),             //          .data
		.sink_startofpacket (seven_seg_1_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (seven_seg_1_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                     //       src.ready
		.src_valid          (router_009_src_valid),                     //          .valid
		.src_data           (router_009_src_data),                      //          .data
		.src_channel        (router_009_src_channel),                   //          .channel
		.src_startofpacket  (router_009_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_router_002 router_010 (
		.sink_ready         (seven_seg_2_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (seven_seg_2_s1_agent_rp_valid),            //          .valid
		.sink_data          (seven_seg_2_s1_agent_rp_data),             //          .data
		.sink_startofpacket (seven_seg_2_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (seven_seg_2_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                     //       src.ready
		.src_valid          (router_010_src_valid),                     //          .valid
		.src_data           (router_010_src_data),                      //          .data
		.src_channel        (router_010_src_channel),                   //          .channel
		.src_startofpacket  (router_010_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (seven_seg_3_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (seven_seg_3_s1_agent_rp_valid),            //          .valid
		.sink_data          (seven_seg_3_s1_agent_rp_data),             //          .data
		.sink_startofpacket (seven_seg_3_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (seven_seg_3_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                     //       src.ready
		.src_valid          (router_011_src_valid),                     //          .valid
		.src_data           (router_011_src_data),                      //          .data
		.src_channel        (router_011_src_channel),                   //          .channel
		.src_startofpacket  (router_011_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_router_002 router_012 (
		.sink_ready         (seven_seg_4_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (seven_seg_4_s1_agent_rp_valid),            //          .valid
		.sink_data          (seven_seg_4_s1_agent_rp_data),             //          .data
		.sink_startofpacket (seven_seg_4_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (seven_seg_4_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                     //       src.ready
		.src_valid          (router_012_src_valid),                     //          .valid
		.src_data           (router_012_src_data),                      //          .data
		.src_channel        (router_012_src_channel),                   //          .channel
		.src_startofpacket  (router_012_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_router_002 router_013 (
		.sink_ready         (seven_seg_5_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (seven_seg_5_s1_agent_rp_valid),            //          .valid
		.sink_data          (seven_seg_5_s1_agent_rp_data),             //          .data
		.sink_startofpacket (seven_seg_5_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (seven_seg_5_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                     //       src.ready
		.src_valid          (router_013_src_valid),                     //          .valid
		.src_data           (router_013_src_data),                      //          .data
		.src_channel        (router_013_src_channel),                   //          .channel
		.src_startofpacket  (router_013_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_router_004 router_014 (
		.sink_ready         (sdram_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                  //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                     //       src.ready
		.src_valid          (router_014_src_valid),                     //          .valid
		.src_data           (router_014_src_data),                      //          .data
		.src_channel        (router_014_src_channel),                   //          .channel
		.src_startofpacket  (router_014_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_router_002 router_015 (
		.sink_ready         (timer_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (timer_s1_agent_rp_valid),                  //          .valid
		.sink_data          (timer_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (timer_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (timer_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                     //       src.ready
		.src_valid          (router_015_src_valid),                     //          .valid
		.src_data           (router_015_src_data),                      //          .data
		.src_channel        (router_015_src_channel),                   //          .channel
		.src_startofpacket  (router_015_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_router_002 router_016 (
		.sink_ready         (key_1_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (key_1_s1_agent_rp_valid),                  //          .valid
		.sink_data          (key_1_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (key_1_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (key_1_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                     //       src.ready
		.src_valid          (router_016_src_valid),                     //          .valid
		.src_data           (router_016_src_data),                      //          .data
		.src_channel        (router_016_src_channel),                   //          .channel
		.src_startofpacket  (router_016_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_router_002 router_017 (
		.sink_ready         (key_2_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (key_2_s1_agent_rp_valid),                  //          .valid
		.sink_data          (key_2_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (key_2_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (key_2_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                     //       src.ready
		.src_valid          (router_017_src_valid),                     //          .valid
		.src_data           (router_017_src_data),                      //          .data
		.src_channel        (router_017_src_channel),                   //          .channel
		.src_startofpacket  (router_017_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_router_002 router_018 (
		.sink_ready         (key_3_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (key_3_s1_agent_rp_valid),                  //          .valid
		.sink_data          (key_3_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (key_3_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (key_3_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                     //       src.ready
		.src_valid          (router_018_src_valid),                     //          .valid
		.src_data           (router_018_src_data),                      //          .data
		.src_channel        (router_018_src_channel),                   //          .channel
		.src_startofpacket  (router_018_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (17),
		.VALID_WIDTH               (17),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) niosii_data_master_limiter (
		.clk                    (clk_0_clk_clk),                                    //       clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                 //          .valid
		.cmd_sink_data          (router_src_data),                                  //          .data
		.cmd_sink_channel       (router_src_channel),                               //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                         //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                           //          .endofpacket
		.cmd_src_ready          (niosii_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (niosii_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (niosii_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (niosii_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (niosii_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                              //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                 //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                        //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                          //          .endofpacket
		.rsp_src_ready          (niosii_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (niosii_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (niosii_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (niosii_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (niosii_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (niosii_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (niosii_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (81),
		.PKT_SRC_ID_H              (80),
		.PKT_SRC_ID_L              (76),
		.PKT_BYTE_CNT_H            (63),
		.PKT_BYTE_CNT_L            (61),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (56),
		.PKT_TRANS_WRITE           (57),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (17),
		.VALID_WIDTH               (17),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) niosii_instruction_master_limiter (
		.clk                    (clk_0_clk_clk),                                           //       clk.clk
		.reset                  (NIOSII_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                    //          .valid
		.cmd_sink_data          (router_001_src_data),                                     //          .data
		.cmd_sink_channel       (router_001_src_channel),                                  //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                            //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                              //          .endofpacket
		.cmd_src_ready          (niosii_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (niosii_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (niosii_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (niosii_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (niosii_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                   //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                 //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                             //          .endofpacket
		.rsp_src_ready          (niosii_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (niosii_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (niosii_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (niosii_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (niosii_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (niosii_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (niosii_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	System_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_0_clk_clk),                                    //        clk.clk
		.reset               (NIOSII_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready          (niosii_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (niosii_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (niosii_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (niosii_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (niosii_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (niosii_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                             //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                             //           .valid
		.src0_data           (cmd_demux_src0_data),                              //           .data
		.src0_channel        (cmd_demux_src0_channel),                           //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                     //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                       //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                             //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                             //           .valid
		.src1_data           (cmd_demux_src1_data),                              //           .data
		.src1_channel        (cmd_demux_src1_channel),                           //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                     //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                       //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                             //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                             //           .valid
		.src2_data           (cmd_demux_src2_data),                              //           .data
		.src2_channel        (cmd_demux_src2_channel),                           //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                     //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                       //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                             //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                             //           .valid
		.src3_data           (cmd_demux_src3_data),                              //           .data
		.src3_channel        (cmd_demux_src3_channel),                           //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                     //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                       //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                             //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                             //           .valid
		.src4_data           (cmd_demux_src4_data),                              //           .data
		.src4_channel        (cmd_demux_src4_channel),                           //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                     //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                       //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                             //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                             //           .valid
		.src5_data           (cmd_demux_src5_data),                              //           .data
		.src5_channel        (cmd_demux_src5_channel),                           //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                     //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                       //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                             //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                             //           .valid
		.src6_data           (cmd_demux_src6_data),                              //           .data
		.src6_channel        (cmd_demux_src6_channel),                           //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                     //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                       //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                             //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                             //           .valid
		.src7_data           (cmd_demux_src7_data),                              //           .data
		.src7_channel        (cmd_demux_src7_channel),                           //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                     //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                       //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                             //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                             //           .valid
		.src8_data           (cmd_demux_src8_data),                              //           .data
		.src8_channel        (cmd_demux_src8_channel),                           //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                     //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                       //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                             //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                             //           .valid
		.src9_data           (cmd_demux_src9_data),                              //           .data
		.src9_channel        (cmd_demux_src9_channel),                           //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                     //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                       //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                            //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                            //           .valid
		.src10_data          (cmd_demux_src10_data),                             //           .data
		.src10_channel       (cmd_demux_src10_channel),                          //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                    //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                      //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                            //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                            //           .valid
		.src11_data          (cmd_demux_src11_data),                             //           .data
		.src11_channel       (cmd_demux_src11_channel),                          //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                    //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                      //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                            //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                            //           .valid
		.src12_data          (cmd_demux_src12_data),                             //           .data
		.src12_channel       (cmd_demux_src12_channel),                          //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                    //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                      //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                            //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                            //           .valid
		.src13_data          (cmd_demux_src13_data),                             //           .data
		.src13_channel       (cmd_demux_src13_channel),                          //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                    //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                      //           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                            //      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                            //           .valid
		.src14_data          (cmd_demux_src14_data),                             //           .data
		.src14_channel       (cmd_demux_src14_channel),                          //           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                    //           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                      //           .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                            //      src15.ready
		.src15_valid         (cmd_demux_src15_valid),                            //           .valid
		.src15_data          (cmd_demux_src15_data),                             //           .data
		.src15_channel       (cmd_demux_src15_channel),                          //           .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                    //           .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                      //           .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                            //      src16.ready
		.src16_valid         (cmd_demux_src16_valid),                            //           .valid
		.src16_data          (cmd_demux_src16_data),                             //           .data
		.src16_channel       (cmd_demux_src16_channel),                          //           .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                    //           .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket)                       //           .endofpacket
	);

	System_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                           //        clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (niosii_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (niosii_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (niosii_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (niosii_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (niosii_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (niosii_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                 //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                              //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                        //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                          //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                 //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                              //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                        //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                           //           .endofpacket
	);

	System_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_src_valid),                        //          .valid
		.src_data            (cmd_mux_src_data),                         //          .data
		.src_channel         (cmd_mux_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                   //          .channel
		.sink0_data          (cmd_demux_src0_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                          //       clk.clk
		.reset               (JTAG_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                  //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                  //          .valid
		.src_data            (cmd_mux_001_src_data),                   //          .data
		.src_channel         (cmd_mux_001_src_channel),                //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),          //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),            //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                 //          .channel
		.sink0_data          (cmd_demux_src1_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)              //          .endofpacket
	);

	System_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                    //          .valid
		.src_data            (cmd_mux_002_src_data),                     //          .data
		.src_channel         (cmd_mux_002_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                   //          .channel
		.sink0_data          (cmd_demux_src2_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),               //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                 //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),               //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                  //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)            //          .endofpacket
	);

	System_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                    //          .valid
		.src_data            (cmd_mux_003_src_data),                     //          .data
		.src_channel         (cmd_mux_003_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                   //          .channel
		.sink0_data          (cmd_demux_src3_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                    //          .valid
		.src_data            (cmd_mux_004_src_data),                     //          .data
		.src_channel         (cmd_mux_004_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                   //          .channel
		.sink0_data          (cmd_demux_src4_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                    //          .valid
		.src_data            (cmd_mux_005_src_data),                     //          .data
		.src_channel         (cmd_mux_005_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                   //          .channel
		.sink0_data          (cmd_demux_src5_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                    //          .valid
		.src_data            (cmd_mux_006_src_data),                     //          .data
		.src_channel         (cmd_mux_006_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                   //          .channel
		.sink0_data          (cmd_demux_src6_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                    //          .valid
		.src_data            (cmd_mux_007_src_data),                     //          .data
		.src_channel         (cmd_mux_007_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                   //          .channel
		.sink0_data          (cmd_demux_src7_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                    //          .valid
		.src_data            (cmd_mux_008_src_data),                     //          .data
		.src_channel         (cmd_mux_008_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                   //          .channel
		.sink0_data          (cmd_demux_src8_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                    //          .valid
		.src_data            (cmd_mux_009_src_data),                     //          .data
		.src_channel         (cmd_mux_009_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                     //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                     //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                   //          .channel
		.sink0_data          (cmd_demux_src9_data),                      //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                    //          .valid
		.src_data            (cmd_mux_010_src_data),                     //          .data
		.src_channel         (cmd_mux_010_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                  //          .channel
		.sink0_data          (cmd_demux_src10_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)               //          .endofpacket
	);

	System_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                    //          .valid
		.src_data            (cmd_mux_011_src_data),                     //          .data
		.src_channel         (cmd_mux_011_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                  //          .channel
		.sink0_data          (cmd_demux_src11_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)               //          .endofpacket
	);

	System_mm_interconnect_0_cmd_mux_002 cmd_mux_012 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                    //          .valid
		.src_data            (cmd_mux_012_src_data),                     //          .data
		.src_channel         (cmd_mux_012_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                  //          .channel
		.sink0_data          (cmd_demux_src12_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                 //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                 //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),               //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                  //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)            //          .endofpacket
	);

	System_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                    //          .valid
		.src_data            (cmd_mux_013_src_data),                     //          .data
		.src_channel         (cmd_mux_013_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                  //          .channel
		.sink0_data          (cmd_demux_src13_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)               //          .endofpacket
	);

	System_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                    //          .valid
		.src_data            (cmd_mux_014_src_data),                     //          .data
		.src_channel         (cmd_mux_014_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                  //          .channel
		.sink0_data          (cmd_demux_src14_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)               //          .endofpacket
	);

	System_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                    //          .valid
		.src_data            (cmd_mux_015_src_data),                     //          .data
		.src_channel         (cmd_mux_015_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                  //          .channel
		.sink0_data          (cmd_demux_src15_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)               //          .endofpacket
	);

	System_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                    //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                    //          .valid
		.src_data            (cmd_mux_016_src_data),                     //          .data
		.src_channel         (cmd_mux_016_src_channel),                  //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                  //          .channel
		.sink0_data          (cmd_demux_src16_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket)               //          .endofpacket
	);

	System_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                     //      sink.ready
		.sink_channel       (router_002_src_channel),                   //          .channel
		.sink_data          (router_002_src_data),                      //          .data
		.sink_startofpacket (router_002_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_002_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_src0_data),                      //          .data
		.src0_channel       (rsp_demux_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                //          .endofpacket
	);

	System_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (clk_0_clk_clk),                          //       clk.clk
		.reset              (JTAG_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                   //      sink.ready
		.sink_channel       (router_003_src_channel),                 //          .channel
		.sink_data          (router_003_src_data),                    //          .data
		.sink_startofpacket (router_003_src_startofpacket),           //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),             //          .endofpacket
		.sink_valid         (router_003_src_valid),                   //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),               //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),               //          .valid
		.src0_data          (rsp_demux_001_src0_data),                //          .data
		.src0_channel       (rsp_demux_001_src0_channel),             //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),       //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)          //          .endofpacket
	);

	System_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                     //      sink.ready
		.sink_channel       (router_004_src_channel),                   //          .channel
		.sink_data          (router_004_src_data),                      //          .data
		.sink_startofpacket (router_004_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_004_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_002_src0_data),                  //          .data
		.src0_channel       (rsp_demux_002_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_002_src1_data),                  //          .data
		.src1_channel       (rsp_demux_002_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)            //          .endofpacket
	);

	System_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                     //      sink.ready
		.sink_channel       (router_005_src_channel),                   //          .channel
		.sink_data          (router_005_src_data),                      //          .data
		.sink_startofpacket (router_005_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_005_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_003_src0_data),                  //          .data
		.src0_channel       (rsp_demux_003_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)            //          .endofpacket
	);

	System_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                     //      sink.ready
		.sink_channel       (router_006_src_channel),                   //          .channel
		.sink_data          (router_006_src_data),                      //          .data
		.sink_startofpacket (router_006_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_006_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_004_src0_data),                  //          .data
		.src0_channel       (rsp_demux_004_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)            //          .endofpacket
	);

	System_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                     //      sink.ready
		.sink_channel       (router_007_src_channel),                   //          .channel
		.sink_data          (router_007_src_data),                      //          .data
		.sink_startofpacket (router_007_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_007_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_005_src0_data),                  //          .data
		.src0_channel       (rsp_demux_005_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)            //          .endofpacket
	);

	System_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                     //      sink.ready
		.sink_channel       (router_008_src_channel),                   //          .channel
		.sink_data          (router_008_src_data),                      //          .data
		.sink_startofpacket (router_008_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_008_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_006_src0_data),                  //          .data
		.src0_channel       (rsp_demux_006_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)            //          .endofpacket
	);

	System_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                     //      sink.ready
		.sink_channel       (router_009_src_channel),                   //          .channel
		.sink_data          (router_009_src_data),                      //          .data
		.sink_startofpacket (router_009_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_009_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_007_src0_data),                  //          .data
		.src0_channel       (rsp_demux_007_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)            //          .endofpacket
	);

	System_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                     //      sink.ready
		.sink_channel       (router_010_src_channel),                   //          .channel
		.sink_data          (router_010_src_data),                      //          .data
		.sink_startofpacket (router_010_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_010_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_008_src0_data),                  //          .data
		.src0_channel       (rsp_demux_008_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)            //          .endofpacket
	);

	System_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                     //      sink.ready
		.sink_channel       (router_011_src_channel),                   //          .channel
		.sink_data          (router_011_src_data),                      //          .data
		.sink_startofpacket (router_011_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_011_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_009_src0_data),                  //          .data
		.src0_channel       (rsp_demux_009_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)            //          .endofpacket
	);

	System_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                     //      sink.ready
		.sink_channel       (router_012_src_channel),                   //          .channel
		.sink_data          (router_012_src_data),                      //          .data
		.sink_startofpacket (router_012_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_012_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_010_src0_data),                  //          .data
		.src0_channel       (rsp_demux_010_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)            //          .endofpacket
	);

	System_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                     //      sink.ready
		.sink_channel       (router_013_src_channel),                   //          .channel
		.sink_data          (router_013_src_data),                      //          .data
		.sink_startofpacket (router_013_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_013_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_011_src0_data),                  //          .data
		.src0_channel       (rsp_demux_011_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)            //          .endofpacket
	);

	System_mm_interconnect_0_rsp_demux_002 rsp_demux_012 (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                     //      sink.ready
		.sink_channel       (router_014_src_channel),                   //          .channel
		.sink_data          (router_014_src_data),                      //          .data
		.sink_startofpacket (router_014_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_014_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_012_src0_data),                  //          .data
		.src0_channel       (rsp_demux_012_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                 //          .valid
		.src1_data          (rsp_demux_012_src1_data),                  //          .data
		.src1_channel       (rsp_demux_012_src1_channel),               //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)            //          .endofpacket
	);

	System_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                     //      sink.ready
		.sink_channel       (router_015_src_channel),                   //          .channel
		.sink_data          (router_015_src_data),                      //          .data
		.sink_startofpacket (router_015_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_015_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_013_src0_data),                  //          .data
		.src0_channel       (rsp_demux_013_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)            //          .endofpacket
	);

	System_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                     //      sink.ready
		.sink_channel       (router_016_src_channel),                   //          .channel
		.sink_data          (router_016_src_data),                      //          .data
		.sink_startofpacket (router_016_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_016_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_014_src0_data),                  //          .data
		.src0_channel       (rsp_demux_014_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)            //          .endofpacket
	);

	System_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                     //      sink.ready
		.sink_channel       (router_017_src_channel),                   //          .channel
		.sink_data          (router_017_src_data),                      //          .data
		.sink_startofpacket (router_017_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_017_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_015_src0_data),                  //          .data
		.src0_channel       (rsp_demux_015_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)            //          .endofpacket
	);

	System_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (clk_0_clk_clk),                            //       clk.clk
		.reset              (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                     //      sink.ready
		.sink_channel       (router_018_src_channel),                   //          .channel
		.sink_data          (router_018_src_data),                      //          .data
		.sink_startofpacket (router_018_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),               //          .endofpacket
		.sink_valid         (router_018_src_valid),                     //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                 //          .valid
		.src0_data          (rsp_demux_016_src0_data),                  //          .data
		.src0_channel       (rsp_demux_016_src0_channel),               //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)            //          .endofpacket
	);

	System_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_0_clk_clk),                            //       clk.clk
		.reset                (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                        //       src.ready
		.src_valid            (rsp_mux_src_valid),                        //          .valid
		.src_data             (rsp_mux_src_data),                         //          .data
		.src_channel          (rsp_mux_src_channel),                      //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                  //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                     //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                     //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                   //          .channel
		.sink0_data           (rsp_demux_src0_data),                      //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),             //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),               //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                 //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                 //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),               //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                  //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),         //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),           //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                 //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                 //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),               //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                  //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),         //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),           //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                 //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                 //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),               //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                  //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),         //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),           //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                 //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                 //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),               //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                  //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),         //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),           //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                 //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                 //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),               //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                  //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),         //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),           //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                 //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                 //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),               //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                  //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),         //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),           //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                 //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                 //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),               //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                  //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),         //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),           //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                 //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                 //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),               //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                  //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),         //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),           //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                 //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                 //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),               //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                  //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),         //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),           //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                 //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                 //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),               //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                  //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),         //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),           //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                 //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                 //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),               //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                  //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),         //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),           //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                 //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                 //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),               //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                  //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),         //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),           //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                 //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                 //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),               //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                  //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),         //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),           //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                 //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                 //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),               //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                  //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),         //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),           //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                 //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                 //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),               //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                  //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),         //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),           //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                 //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                 //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),               //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                  //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),         //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket)            //          .endofpacket
	);

	System_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                            //       clk.clk
		.reset               (NIOSII_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                    //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                    //          .valid
		.src_data            (rsp_mux_001_src_data),                     //          .data
		.src_channel         (rsp_mux_001_src_channel),                  //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),              //          .endofpacket
		.sink0_ready         (rsp_demux_002_src1_ready),                 //     sink0.ready
		.sink0_valid         (rsp_demux_002_src1_valid),                 //          .valid
		.sink0_channel       (rsp_demux_002_src1_channel),               //          .channel
		.sink0_data          (rsp_demux_002_src1_data),                  //          .data
		.sink0_startofpacket (rsp_demux_002_src1_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (rsp_demux_002_src1_endofpacket),           //          .endofpacket
		.sink1_ready         (rsp_demux_012_src1_ready),                 //     sink1.ready
		.sink1_valid         (rsp_demux_012_src1_valid),                 //          .valid
		.sink1_channel       (rsp_demux_012_src1_channel),               //          .channel
		.sink1_data          (rsp_demux_012_src1_data),                  //          .data
		.sink1_startofpacket (rsp_demux_012_src1_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_012_src1_endofpacket)            //          .endofpacket
	);

	System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                                 // in_clk_0.clk
		.in_rst_0_reset (NIOSII_reset_reset_bridge_in_reset_reset),                      // in_rst_0.reset
		.in_0_data      (audio_video_avalon_av_config_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (audio_video_avalon_av_config_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (audio_video_avalon_av_config_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                 //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                 //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                  //         .error
	);

	System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (JTAG_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (jtag_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                  //         .error
	);

	System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (NIOSII_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (niosii_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (niosii_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (niosii_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                  //         .error
	);

	System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (NIOSII_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (red_leds_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (red_leds_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (red_leds_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)         //         .error
	);

	System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (NIOSII_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (switches_s1_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (switches_s1_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (switches_s1_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)         //         .error
	);

	System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (NIOSII_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (key_0_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (key_0_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (key_0_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)         //         .error
	);

	System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (NIOSII_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (seven_seg_0_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (seven_seg_0_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (seven_seg_0_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)          //         .error
	);

	System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (NIOSII_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (seven_seg_1_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (seven_seg_1_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (seven_seg_1_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)          //         .error
	);

	System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (NIOSII_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (seven_seg_2_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (seven_seg_2_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (seven_seg_2_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)          //         .error
	);

	System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (NIOSII_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (seven_seg_3_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (seven_seg_3_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (seven_seg_3_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)          //         .error
	);

	System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (NIOSII_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (seven_seg_4_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (seven_seg_4_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (seven_seg_4_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)          //         .error
	);

	System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (NIOSII_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (seven_seg_5_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (seven_seg_5_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (seven_seg_5_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),          //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),         //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),         //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)          //         .error
	);

	System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_0_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (NIOSII_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)         //         .error
	);

	System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_0_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (NIOSII_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (timer_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (timer_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)         //         .error
	);

	System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_0_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (NIOSII_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (key_1_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (key_1_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (key_1_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)         //         .error
	);

	System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_0_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (NIOSII_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (key_2_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (key_2_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (key_2_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)         //         .error
	);

	System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_0_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (NIOSII_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (key_3_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (key_3_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (key_3_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),         //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),        //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),        //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)         //         .error
	);

endmodule
